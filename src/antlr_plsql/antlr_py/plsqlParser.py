# Generated from ..\plsql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02a7")
        buf.write("\u20cb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216")
        buf.write("\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a")
        buf.write("\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d")
        buf.write("\4\u021e\t\u021e\4\u021f\t\u021f\4\u0220\t\u0220\3\2\6")
        buf.write("\2\u0442\n\2\r\2\16\2\u0443\3\3\7\3\u0447\n\3\f\3\16\3")
        buf.write("\u044a\13\3\3\3\3\3\3\4\3\4\5\4\u0450\n\4\3\4\3\4\3\4")
        buf.write("\5\4\u0455\n\4\7\4\u0457\n\4\f\4\16\4\u045a\13\4\3\4\5")
        buf.write("\4\u045d\n\4\5\4\u045f\n\4\3\4\3\4\3\5\3\5\5\5\u0465\n")
        buf.write("\5\3\5\5\5\u0468\n\5\3\6\5\6\u046b\n\6\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u048b\n\7\3\b\3\b\3\b\3\b\5\b\u0491\n\b\3\b\6\b\u0494")
        buf.write("\n\b\r\b\16\b\u0495\5\b\u0498\n\b\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u04a7\n\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u04af\n\13\3\13\5")
        buf.write("\13\u04b2\n\13\3\13\5\13\u04b5\n\13\3\13\5\13\u04b8\n")
        buf.write("\13\3\13\5\13\u04bb\n\13\5\13\u04bd\n\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\6\13\u04c4\n\13\r\13\16\13\u04c5\7\13\u04c8")
        buf.write("\n\13\f\13\16\13\u04cb\13\13\3\13\3\13\3\13\5\13\u04d0")
        buf.write("\n\13\3\13\5\13\u04d3\n\13\3\13\3\13\5\13\u04d7\n\13\3")
        buf.write("\13\3\13\3\13\5\13\u04dc\n\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u04ea\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u04f0\n\f\3\f\3\f\3\f\5\f\u04f5\n\f\3\f\3\f\3\f")
        buf.write("\5\f\u04fa\n\f\3\f\3\f\3\f\5\f\u04ff\n\f\3\f\3\f\3\f\6")
        buf.write("\f\u0504\n\f\r\f\16\f\u0505\5\f\u0508\n\f\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\3\16\5\16\u0511\n\16\3\16\3\16\3\16\5")
        buf.write("\16\u0516\n\16\3\16\3\16\5\16\u051a\n\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u0520\n\16\3\16\3\16\3\16\5\16\u0525\n\16\3")
        buf.write("\16\3\16\5\16\u0529\n\16\3\16\3\16\3\16\3\16\7\16\u052f")
        buf.write("\n\16\f\16\16\16\u0532\13\16\3\16\3\16\3\16\3\16\7\16")
        buf.write("\u0538\n\16\f\16\16\16\u053b\13\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u0541\n\16\f\16\16\16\u0544\13\16\3\16\3\16\3\16")
        buf.write("\3\16\7\16\u054a\n\16\f\16\16\16\u054d\13\16\5\16\u054f")
        buf.write("\n\16\3\17\5\17\u0552\n\17\3\17\6\17\u0555\n\17\r\17\16")
        buf.write("\17\u0556\3\20\3\20\3\20\5\20\u055c\n\20\3\20\5\20\u055f")
        buf.write("\n\20\3\20\5\20\u0562\n\20\3\20\5\20\u0565\n\20\3\20\3")
        buf.write("\20\3\20\5\20\u056a\n\20\3\20\3\20\3\20\5\20\u056f\n\20")
        buf.write("\3\21\3\21\3\22\3\22\5\22\u0575\n\22\3\22\3\22\7\22\u0579")
        buf.write("\n\22\f\22\16\22\u057c\13\22\3\22\5\22\u057f\n\22\6\22")
        buf.write("\u0581\n\22\r\22\16\22\u0582\3\22\3\22\3\23\3\23\5\23")
        buf.write("\u0589\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0591\n")
        buf.write("\23\3\23\5\23\u0594\n\23\3\24\3\24\3\24\5\24\u0599\n\24")
        buf.write("\3\25\3\25\3\25\5\25\u059e\n\25\3\25\3\25\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u05a7\n\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\6\26\u05ae\n\26\r\26\16\26\u05af\3\27\3\27\3\30\3\30")
        buf.write("\3\30\5\30\u05b7\n\30\3\31\3\31\3\32\3\32\3\33\3\33\3")
        buf.write("\33\5\33\u05c0\n\33\5\33\u05c2\n\33\3\34\3\34\5\34\u05c6")
        buf.write("\n\34\3\34\3\34\5\34\u05ca\n\34\3\34\3\34\5\34\u05ce\n")
        buf.write("\34\6\34\u05d0\n\34\r\34\16\34\u05d1\3\34\3\34\5\34\u05d6")
        buf.write("\n\34\3\35\3\35\5\35\u05da\n\35\3\36\3\36\3\36\6\36\u05df")
        buf.write("\n\36\r\36\16\36\u05e0\3\36\3\36\3\36\3\36\5\36\u05e7")
        buf.write("\n\36\5\36\u05e9\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u05f8\n\37\5\37")
        buf.write("\u05fa\n\37\3 \3 \5 \u05fe\n \3 \3 \3 \3 \3 \5 \u0605")
        buf.write("\n \3 \6 \u0608\n \r \16 \u0609\3 \3 \5 \u060e\n \3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\5\"\u0616\n\"\3#\3#\3#\3#\3#\3#\3#\5")
        buf.write("#\u061f\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0628\n#\3#\3#\5#\u062c")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0635\n#\3#\3#\5#\u0639\n")
        buf.write("#\3#\3#\5#\u063d\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0657\n#\3#\5")
        buf.write("#\u065a\n#\3#\5#\u065d\n#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0667")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\5#\u066f\n#\3#\3#\6#\u0673\n#\r")
        buf.write("#\16#\u0674\3#\3#\5#\u0679\n#\3#\3#\5#\u067d\n#\3$\3$")
        buf.write("\3$\7$\u0682\n$\f$\16$\u0685\13$\3%\3%\5%\u0689\n%\3%")
        buf.write("\3%\5%\u068d\n%\3%\5%\u0690\n%\6%\u0692\n%\r%\16%\u0693")
        buf.write("\3%\3%\3&\3&\3&\3&\3&\5&\u069d\n&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u06a7\n&\3&\3&\3&\6&\u06ac\n&\r&\16&\u06ad\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u06b6\n\'\5\'\u06b8\n\'\5\'\u06ba")
        buf.write("\n\'\3\'\5\'\u06bd\n\'\3(\3(\3(\3(\3(\3(\3(\5(\u06c6\n")
        buf.write("(\3(\3(\3(\3(\3(\3(\5(\u06ce\n(\3(\3(\3(\3(\3(\5(\u06d5")
        buf.write("\n(\3)\3)\3*\3*\3+\3+\3+\5+\u06de\n+\3+\3+\3+\5+\u06e3")
        buf.write("\n+\3+\3+\3,\3,\3,\3,\3,\3,\5,\u06ed\n,\3,\6,\u06f0\n")
        buf.write(",\r,\16,\u06f1\3,\3,\5,\u06f6\n,\3,\3,\5,\u06fa\n,\3,")
        buf.write("\3,\3,\3,\3,\5,\u0701\n,\3,\6,\u0704\n,\r,\16,\u0705\3")
        buf.write(",\3,\5,\u070a\n,\3-\3-\3.\3.\3.\3.\3.\5.\u0713\n.\3/\3")
        buf.write("/\5/\u0717\n/\3/\3/\5/\u071b\n/\3/\3/\6/\u071f\n/\r/\16")
        buf.write("/\u0720\5/\u0723\n/\3/\5/\u0726\n/\6/\u0728\n/\r/\16/")
        buf.write("\u0729\3/\3/\3\60\3\60\5\60\u0730\n\60\3\60\3\60\5\60")
        buf.write("\u0734\n\60\3\60\3\60\6\60\u0738\n\60\r\60\16\60\u0739")
        buf.write("\5\60\u073c\n\60\3\60\5\60\u073f\n\60\6\60\u0741\n\60")
        buf.write("\r\60\16\60\u0742\3\60\3\60\3\61\3\61\3\61\3\61\5\61\u074b")
        buf.write("\n\61\3\61\6\61\u074e\n\61\r\61\16\61\u074f\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u0756\n\61\3\61\3\61\5\61\u075a\n\61\3")
        buf.write("\61\3\61\5\61\u075e\n\61\3\61\5\61\u0761\n\61\3\61\5\61")
        buf.write("\u0764\n\61\6\61\u0766\n\61\r\61\16\61\u0767\3\61\5\61")
        buf.write("\u076b\n\61\3\62\3\62\3\62\3\62\5\62\u0771\n\62\3\62\6")
        buf.write("\62\u0774\n\62\r\62\16\62\u0775\3\62\3\62\5\62\u077a\n")
        buf.write("\62\3\62\3\62\5\62\u077e\n\62\3\62\3\62\5\62\u0782\n\62")
        buf.write("\3\62\3\62\6\62\u0786\n\62\r\62\16\62\u0787\5\62\u078a")
        buf.write("\n\62\3\62\3\62\5\62\u078e\n\62\6\62\u0790\n\62\r\62\16")
        buf.write("\62\u0791\3\62\3\62\3\63\3\63\3\63\3\63\5\63\u079a\n\63")
        buf.write("\3\63\6\63\u079d\n\63\r\63\16\63\u079e\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u07a5\n\63\3\63\3\63\5\63\u07a9\n\63\3\63\3")
        buf.write("\63\5\63\u07ad\n\63\3\63\5\63\u07b0\n\63\3\63\5\63\u07b3")
        buf.write("\n\63\6\63\u07b5\n\63\r\63\16\63\u07b6\3\63\5\63\u07ba")
        buf.write("\n\63\3\64\3\64\3\65\3\65\5\65\u07c0\n\65\3\65\5\65\u07c3")
        buf.write("\n\65\3\65\3\65\3\65\3\65\3\65\5\65\u07ca\n\65\3\66\3")
        buf.write("\66\3\66\5\66\u07cf\n\66\3\66\3\66\3\67\3\67\38\38\38")
        buf.write("\58\u07d8\n8\38\38\38\38\38\38\38\58\u07e1\n8\68\u07e3")
        buf.write("\n8\r8\168\u07e4\38\38\58\u07e9\n8\39\39\59\u07ed\n9\3")
        buf.write("9\39\59\u07f1\n9\39\59\u07f4\n9\3:\3:\3:\5:\u07f9\n:\3")
        buf.write(":\3:\6:\u07fd\n:\r:\16:\u07fe\3:\3:\5:\u0803\n:\3;\3;")
        buf.write("\3;\5;\u0808\n;\3;\3;\5;\u080c\n;\3;\3;\5;\u0810\n;\6")
        buf.write(";\u0812\n;\r;\16;\u0813\3;\3;\3;\5;\u0819\n;\3;\3;\3;")
        buf.write("\6;\u081e\n;\r;\16;\u081f\3;\3;\5;\u0824\n;\3;\5;\u0827")
        buf.write("\n;\3<\3<\5<\u082b\n<\3<\5<\u082e\n<\3<\3<\3<\3<\3<\5")
        buf.write("<\u0835\n<\3<\3<\5<\u0839\n<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\7<\u0845\n<\f<\16<\u0848\13<\3<\3<\3<\5<\u084d\n")
        buf.write("<\5<\u084f\n<\3=\3=\3=\3=\5=\u0855\n=\3=\3=\3=\3=\5=\u085b")
        buf.write("\n=\3=\5=\u085e\n=\3=\5=\u0861\n=\3=\5=\u0864\n=\3=\5")
        buf.write("=\u0867\n=\3=\3=\3=\3=\3=\5=\u086e\n=\3=\5=\u0871\n=\3")
        buf.write("=\5=\u0874\n=\3=\6=\u0877\n=\r=\16=\u0878\5=\u087b\n=")
        buf.write("\3=\5=\u087e\n=\3=\5=\u0881\n=\3>\5>\u0884\n>\3>\3>\3")
        buf.write(">\3>\3>\5>\u088b\n>\6>\u088d\n>\r>\16>\u088e\3?\3?\3?")
        buf.write("\5?\u0894\n?\3?\5?\u0897\n?\3?\3?\5?\u089b\n?\3?\3?\3")
        buf.write("?\5?\u08a0\n?\3?\3?\3?\5?\u08a5\n?\3?\5?\u08a8\n?\3?\5")
        buf.write("?\u08ab\n?\3?\5?\u08ae\n?\5?\u08b0\n?\3?\7?\u08b3\n?\f")
        buf.write("?\16?\u08b6\13?\3?\5?\u08b9\n?\3?\3?\5?\u08bd\n?\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\5@\u08c6\n@\3@\3@\5@\u08ca\n@\5@\u08cc")
        buf.write("\n@\3A\3A\5A\u08d0\nA\3A\3A\5A\u08d4\nA\3A\3A\3A\3A\3")
        buf.write("A\5A\u08db\nA\3A\7A\u08de\nA\fA\16A\u08e1\13A\3B\3B\5")
        buf.write("B\u08e5\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u08f2\n")
        buf.write("B\3B\5B\u08f5\nB\3C\3C\3C\3C\3C\5C\u08fc\nC\3D\3D\3D\3")
        buf.write("D\3D\5D\u0903\nD\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u0916\nE\3E\3E\3E\3E\5E\u091c\nE\3E\6")
        buf.write("E\u091f\nE\rE\16E\u0920\3E\3E\3E\5E\u0926\nE\5E\u0928")
        buf.write("\nE\3F\3F\3F\3F\5F\u092e\nF\3G\3G\3G\3G\5G\u0934\nG\3")
        buf.write("G\3G\3G\5G\u0939\nG\6G\u093b\nG\rG\16G\u093c\3G\3G\5G")
        buf.write("\u0941\nG\3H\3H\3I\3I\3I\5I\u0948\nI\3I\3I\3I\3I\3I\3")
        buf.write("I\5I\u0950\nI\6I\u0952\nI\rI\16I\u0953\3I\3I\3I\3J\5J")
        buf.write("\u095a\nJ\3J\3J\5J\u095e\nJ\3K\3K\3K\3K\3L\3L\3L\3L\6")
        buf.write("L\u0968\nL\rL\16L\u0969\3M\3M\3M\3M\3M\3M\3M\6M\u0973")
        buf.write("\nM\rM\16M\u0974\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\5N\u098b\nN\3N\3N\3N\3N\3N\6N\u0992")
        buf.write("\nN\rN\16N\u0993\3N\3N\3O\3O\5O\u099a\nO\3P\3P\3Q\3Q\3")
        buf.write("Q\3Q\5Q\u09a2\nQ\3Q\5Q\u09a5\nQ\3R\3R\3R\3R\3S\5S\u09ac")
        buf.write("\nS\3S\3S\3S\5S\u09b1\nS\3S\3S\3S\3S\3S\5S\u09b8\nS\3")
        buf.write("S\3S\3S\3S\5S\u09be\nS\3T\3T\3T\3T\5T\u09c4\nT\3T\5T\u09c7")
        buf.write("\nT\3T\5T\u09ca\nT\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\6T\u09d6")
        buf.write("\nT\rT\16T\u09d7\3T\3T\5T\u09dc\nT\3T\3T\5T\u09e0\nT\3")
        buf.write("T\5T\u09e3\nT\3U\3U\3V\3V\5V\u09e9\nV\3V\3V\5V\u09ed\n")
        buf.write("V\3V\5V\u09f0\nV\3V\6V\u09f3\nV\rV\16V\u09f4\3V\5V\u09f8")
        buf.write("\nV\3V\3V\3V\5V\u09fd\nV\3W\3W\5W\u0a01\nW\3W\5W\u0a04")
        buf.write("\nW\3W\3W\3W\3W\3W\3W\5W\u0a0c\nW\3W\5W\u0a0f\nW\3X\3")
        buf.write("X\3X\3X\3Y\3Y\3Y\3Y\3Z\5Z\u0a1a\nZ\3Z\6Z\u0a1d\nZ\rZ\16")
        buf.write("Z\u0a1e\3[\3[\3[\3[\3[\5[\u0a26\n[\3\\\5\\\u0a29\n\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3\\\3\\\6\\\u0a32\n\\\r\\\16\\\u0a33")
        buf.write("\3]\3]\3]\3]\3]\3]\3]\3]\5]\u0a3e\n]\3^\3^\3^\5^\u0a43")
        buf.write("\n^\3^\3^\5^\u0a47\n^\3_\3_\3_\5_\u0a4c\n_\3_\3_\5_\u0a50")
        buf.write("\n_\3_\3_\3_\3_\3_\5_\u0a57\n_\3`\3`\3`\3`\5`\u0a5d\n")
        buf.write("`\3`\5`\u0a60\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\5a\u0a76\na\3a\5a\u0a79\na\6a\u0a7b")
        buf.write("\na\ra\16a\u0a7c\3b\3b\3b\3b\3b\3b\5b\u0a85\nb\3c\3c\3")
        buf.write("d\3d\3d\5d\u0a8c\nd\5d\u0a8e\nd\3e\3e\5e\u0a92\ne\3e\3")
        buf.write("e\3e\5e\u0a97\ne\3e\5e\u0a9a\ne\3e\5e\u0a9d\ne\3e\5e\u0aa0")
        buf.write("\ne\3f\3f\3f\5f\u0aa5\nf\3f\6f\u0aa8\nf\rf\16f\u0aa9\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\6f\u0ab4\nf\rf\16f\u0ab5\3f\3f")
        buf.write("\3f\3f\3f\3f\3f\3f\3f\3f\3f\6f\u0ac3\nf\rf\16f\u0ac4\5")
        buf.write("f\u0ac7\nf\3g\3g\5g\u0acb\ng\3g\3g\5g\u0acf\ng\3g\5g\u0ad2")
        buf.write("\ng\3h\3h\3h\3h\3h\5h\u0ad9\nh\3h\3h\3h\5h\u0ade\nh\3")
        buf.write("h\3h\3h\3h\3h\5h\u0ae5\nh\3h\3h\3h\3h\5h\u0aeb\nh\5h\u0aed")
        buf.write("\nh\3h\3h\3h\3h\5h\u0af3\nh\3i\3i\5i\u0af7\ni\3i\3i\3")
        buf.write("i\3i\3i\5i\u0afe\ni\3i\3i\3i\5i\u0b03\ni\3j\3j\3k\3k\3")
        buf.write("k\3k\3k\3k\3k\3k\5k\u0b0f\nk\3l\3l\3l\3l\3l\3l\3l\3l\3")
        buf.write("l\3l\3l\3l\5l\u0b1d\nl\3l\6l\u0b20\nl\rl\16l\u0b21\3l")
        buf.write("\3l\5l\u0b26\nl\5l\u0b28\nl\3l\3l\5l\u0b2c\nl\3l\3l\5")
        buf.write("l\u0b30\nl\3l\3l\3l\6l\u0b35\nl\rl\16l\u0b36\3l\3l\3m")
        buf.write("\3m\3m\3m\3m\5m\u0b40\nm\3m\6m\u0b43\nm\rm\16m\u0b44\3")
        buf.write("m\3m\3n\5n\u0b4a\nn\3n\5n\u0b4d\nn\3n\3n\5n\u0b51\nn\3")
        buf.write("n\3n\5n\u0b55\nn\5n\u0b57\nn\3n\3n\3n\5n\u0b5c\nn\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\3o\5o\u0b66\no\3o\3o\5o\u0b6a\no\3o\3")
        buf.write("o\3o\6o\u0b6f\no\ro\16o\u0b70\3o\3o\5o\u0b75\no\3p\3p")
        buf.write("\3p\5p\u0b7a\np\3p\6p\u0b7d\np\rp\16p\u0b7e\3p\5p\u0b82")
        buf.write("\np\3p\3p\3q\3q\3q\3q\3q\3q\5q\u0b8c\nq\3r\3r\3r\3r\3")
        buf.write("r\3r\3r\3r\3r\3r\3r\3r\5r\u0b9a\nr\3r\6r\u0b9d\nr\rr\16")
        buf.write("r\u0b9e\3r\3r\5r\u0ba3\nr\5r\u0ba5\nr\3r\3r\3r\5r\u0baa")
        buf.write("\nr\3r\3r\5r\u0bae\nr\3r\6r\u0bb1\nr\rr\16r\u0bb2\3r\3")
        buf.write("r\3s\3s\3s\3s\3s\5s\u0bbc\ns\3t\3t\3t\3t\3t\3t\3t\5t\u0bc5")
        buf.write("\nt\3u\3u\3u\3u\5u\u0bcb\nu\3u\6u\u0bce\nu\ru\16u\u0bcf")
        buf.write("\3u\5u\u0bd3\nu\3u\6u\u0bd6\nu\ru\16u\u0bd7\3u\5u\u0bdb")
        buf.write("\nu\3u\6u\u0bde\nu\ru\16u\u0bdf\5u\u0be2\nu\3u\3u\3u\5")
        buf.write("u\u0be7\nu\3v\3v\5v\u0beb\nv\3v\3v\5v\u0bef\nv\3w\3w\5")
        buf.write("w\u0bf3\nw\3w\3w\5w\u0bf7\nw\3x\3x\5x\u0bfb\nx\3x\5x\u0bfe")
        buf.write("\nx\3y\3y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0c0c\nz\3")
        buf.write("z\6z\u0c0f\nz\rz\16z\u0c10\3z\3z\5z\u0c15\nz\3z\5z\u0c18")
        buf.write("\nz\3{\3{\5{\u0c1c\n{\3{\3{\3{\3{\5{\u0c22\n{\3{\6{\u0c25")
        buf.write("\n{\r{\16{\u0c26\3{\5{\u0c2a\n{\3{\6{\u0c2d\n{\r{\16{")
        buf.write("\u0c2e\3{\5{\u0c32\n{\3{\6{\u0c35\n{\r{\16{\u0c36\5{\u0c39")
        buf.write("\n{\3{\3{\3{\5{\u0c3e\n{\5{\u0c40\n{\3|\3|\3|\3|\3|\3")
        buf.write("|\5|\u0c48\n|\3|\6|\u0c4b\n|\r|\16|\u0c4c\3|\3|\5|\u0c51")
        buf.write("\n|\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0c5c\n}\3}\3}\5}\u0c60")
        buf.write("\n}\3}\6}\u0c63\n}\r}\16}\u0c64\3}\3}\3~\3~\5~\u0c6b\n")
        buf.write("~\3~\3~\3~\3~\5~\u0c71\n~\3~\6~\u0c74\n~\r~\16~\u0c75")
        buf.write("\3~\5~\u0c79\n~\3~\6~\u0c7c\n~\r~\16~\u0c7d\3~\5~\u0c81")
        buf.write("\n~\3~\6~\u0c84\n~\r~\16~\u0c85\5~\u0c88\n~\3~\3~\3~\5")
        buf.write("~\u0c8d\n~\5~\u0c8f\n~\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\6\177\u0c97\n\177\r\177\16\177\u0c98\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u0c9f\n\177\3\177\3\177\5\177\u0ca3")
        buf.write("\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u0cad\n\u0080\3\u0080\6\u0080")
        buf.write("\u0cb0\n\u0080\r\u0080\16\u0080\u0cb1\3\u0080\3\u0080")
        buf.write("\5\u0080\u0cb6\n\u0080\3\u0081\3\u0081\5\u0081\u0cba\n")
        buf.write("\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\5\u0082\u0cc4\n\u0082\3\u0082\6\u0082")
        buf.write("\u0cc7\n\u0082\r\u0082\16\u0082\u0cc8\5\u0082\u0ccb\n")
        buf.write("\u0082\3\u0083\3\u0083\5\u0083\u0ccf\n\u0083\3\u0083\3")
        buf.write("\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0cd7\n")
        buf.write("\u0083\3\u0083\5\u0083\u0cda\n\u0083\3\u0083\5\u0083\u0cdd")
        buf.write("\n\u0083\3\u0083\5\u0083\u0ce0\n\u0083\3\u0083\3\u0083")
        buf.write("\5\u0083\u0ce4\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0085\5\u0085\u0ceb\n\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0cf6\n\u0086\3\u0087\3\u0087\3\u0087\5\u0087\u0cfb\n")
        buf.write("\u0087\3\u0087\3\u0087\5\u0087\u0cff\n\u0087\3\u0087\6")
        buf.write("\u0087\u0d02\n\u0087\r\u0087\16\u0087\u0d03\3\u0087\3")
        buf.write("\u0087\5\u0087\u0d08\n\u0087\3\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\5\u0087\u0d0e\n\u0087\3\u0087\5\u0087\u0d11\n\u0087")
        buf.write("\3\u0087\5\u0087\u0d14\n\u0087\3\u0087\5\u0087\u0d17\n")
        buf.write("\u0087\3\u0087\5\u0087\u0d1a\n\u0087\3\u0087\5\u0087\u0d1d")
        buf.write("\n\u0087\3\u0087\5\u0087\u0d20\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\5\u0087\u0d27\n\u0087\3\u0087")
        buf.write("\5\u0087\u0d2a\n\u0087\3\u0087\5\u0087\u0d2d\n\u0087\3")
        buf.write("\u0087\6\u0087\u0d30\n\u0087\r\u0087\16\u0087\u0d31\5")
        buf.write("\u0087\u0d34\n\u0087\3\u0087\5\u0087\u0d37\n\u0087\3\u0087")
        buf.write("\5\u0087\u0d3a\n\u0087\3\u0088\5\u0088\u0d3d\n\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0d4b")
        buf.write("\n\u0089\3\u008a\3\u008a\5\u008a\u0d4f\n\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\6\u008a\u0d55\n\u008a\r\u008a")
        buf.write("\16\u008a\u0d56\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0d61\n\u008b\3\u008b")
        buf.write("\3\u008b\5\u008b\u0d65\n\u008b\3\u008b\5\u008b\u0d68\n")
        buf.write("\u008b\3\u008b\5\u008b\u0d6b\n\u008b\3\u008b\3\u008b\3")
        buf.write("\u008b\3\u008b\5\u008b\u0d71\n\u008b\3\u008b\5\u008b\u0d74")
        buf.write("\n\u008b\3\u008b\5\u008b\u0d77\n\u008b\3\u008b\5\u008b")
        buf.write("\u0d7a\n\u008b\3\u008b\5\u008b\u0d7d\n\u008b\3\u008b\5")
        buf.write("\u008b\u0d80\n\u008b\3\u008b\5\u008b\u0d83\n\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0d8a\n\u008b")
        buf.write("\3\u008b\5\u008b\u0d8d\n\u008b\3\u008b\5\u008b\u0d90\n")
        buf.write("\u008b\3\u008b\6\u008b\u0d93\n\u008b\r\u008b\16\u008b")
        buf.write("\u0d94\5\u008b\u0d97\n\u008b\3\u008b\5\u008b\u0d9a\n\u008b")
        buf.write("\3\u008b\5\u008b\u0d9d\n\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u0da3\n\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\6\u008c\u0dab\n\u008c\r\u008c")
        buf.write("\16\u008c\u0dac\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\5\u008d\u0db5\n\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u0db9\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\5\u008e\u0dc2\n\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u0dcf\n\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\6\u0090\u0de2\n\u0090\r\u0090\16\u0090\u0de3")
        buf.write("\3\u0090\5\u0090\u0de7\n\u0090\3\u0091\3\u0091\5\u0091")
        buf.write("\u0deb\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u0df1\n\u0091\7\u0091\u0df3\n\u0091\f\u0091\16\u0091")
        buf.write("\u0df6\13\u0091\3\u0091\3\u0091\5\u0091\u0dfa\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0e01")
        buf.write("\n\u0091\7\u0091\u0e03\n\u0091\f\u0091\16\u0091\u0e06")
        buf.write("\13\u0091\5\u0091\u0e08\n\u0091\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092")
        buf.write("\u0e13\n\u0092\r\u0092\16\u0092\u0e14\3\u0092\5\u0092")
        buf.write("\u0e18\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u0e1e\n\u0093\3\u0094\3\u0094\5\u0094\u0e22\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0095\5\u0095")
        buf.write("\u0e2a\n\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\5\u0096\u0e32\n\u0096\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0e38\n\u0097\3\u0097\5\u0097\u0e3b\n")
        buf.write("\u0097\3\u0098\3\u0098\3\u0098\5\u0098\u0e40\n\u0098\3")
        buf.write("\u0099\3\u0099\5\u0099\u0e44\n\u0099\3\u0099\3\u0099\5")
        buf.write("\u0099\u0e48\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\6\u009a\u0e50\n\u009a\r\u009a\16\u009a")
        buf.write("\u0e51\5\u009a\u0e54\n\u009a\3\u009b\3\u009b\3\u009b\5")
        buf.write("\u009b\u0e59\n\u009b\3\u009b\3\u009b\5\u009b\u0e5d\n\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0e61\n\u009b\6\u009b\u0e63\n")
        buf.write("\u009b\r\u009b\16\u009b\u0e64\3\u009b\5\u009b\u0e68\n")
        buf.write("\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u0e6d\n\u009c\3")
        buf.write("\u009c\5\u009c\u0e70\n\u009c\3\u009d\3\u009d\3\u009d\3")
        buf.write("\u009d\5\u009d\u0e76\n\u009d\3\u009e\3\u009e\3\u009e\7")
        buf.write("\u009e\u0e7b\n\u009e\f\u009e\16\u009e\u0e7e\13\u009e\3")
        buf.write("\u009e\5\u009e\u0e81\n\u009e\3\u009e\3\u009e\3\u009e\7")
        buf.write("\u009e\u0e86\n\u009e\f\u009e\16\u009e\u0e89\13\u009e\3")
        buf.write("\u009e\5\u009e\u0e8c\n\u009e\3\u009e\3\u009e\3\u009e\3")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e95\n\u009e\3")
        buf.write("\u009e\3\u009e\5\u009e\u0e99\n\u009e\3\u009e\3\u009e\3")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\3\u009e\6\u009e\u0ea2\n")
        buf.write("\u009e\r\u009e\16\u009e\u0ea3\5\u009e\u0ea6\n\u009e\3")
        buf.write("\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0eb3\n\u00a2")
        buf.write("\3\u00a2\5\u00a2\u0eb6\n\u00a2\3\u00a2\5\u00a2\u0eb9\n")
        buf.write("\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0ebe\n\u00a2\5")
        buf.write("\u00a2\u0ec0\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5")
        buf.write("\u00a3\u0ec6\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3")
        buf.write("\u00a4\3\u00a4\7\u00a4\u0ece\n\u00a4\f\u00a4\16\u00a4")
        buf.write("\u0ed1\13\u00a4\6\u00a4\u0ed3\n\u00a4\r\u00a4\16\u00a4")
        buf.write("\u0ed4\3\u00a5\3\u00a5\5\u00a5\u0ed9\n\u00a5\3\u00a5\3")
        buf.write("\u00a5\5\u00a5\u0edd\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0ee1")
        buf.write("\n\u00a5\3\u00a5\6\u00a5\u0ee4\n\u00a5\r\u00a5\16\u00a5")
        buf.write("\u0ee5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0eec\n")
        buf.write("\u00a5\5\u00a5\u0eee\n\u00a5\3\u00a5\5\u00a5\u0ef1\n\u00a5")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0ef6\n\u00a6\3\u00a6")
        buf.write("\6\u00a6\u0ef9\n\u00a6\r\u00a6\16\u00a6\u0efa\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f01\n\u00a6\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u0f05\n\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0f0f")
        buf.write("\n\u00a7\5\u00a7\u0f11\n\u00a7\3\u00a8\3\u00a8\5\u00a8")
        buf.write("\u0f15\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0f19\n\u00a8\3")
        buf.write("\u00a8\3\u00a8\3\u00a8\5\u00a8\u0f1e\n\u00a8\3\u00a8\7")
        buf.write("\u00a8\u0f21\n\u00a8\f\u00a8\16\u00a8\u0f24\13\u00a8\3")
        buf.write("\u00a8\5\u00a8\u0f27\n\u00a8\3\u00a9\3\u00a9\3\u00a9\5")
        buf.write("\u00a9\u0f2c\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3")
        buf.write("\u00a9\5\u00a9\u0f33\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3")
        buf.write("\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f3b\n\u00aa\3\u00aa\6")
        buf.write("\u00aa\u0f3e\n\u00aa\r\u00aa\16\u00aa\u0f3f\3\u00aa\3")
        buf.write("\u00aa\5\u00aa\u0f44\n\u00aa\3\u00aa\3\u00aa\3\u00aa\7")
        buf.write("\u00aa\u0f49\n\u00aa\f\u00aa\16\u00aa\u0f4c\13\u00aa\3")
        buf.write("\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f53\n")
        buf.write("\u00aa\3\u00aa\6\u00aa\u0f56\n\u00aa\r\u00aa\16\u00aa")
        buf.write("\u0f57\3\u00aa\3\u00aa\5\u00aa\u0f5c\n\u00aa\3\u00aa\3")
        buf.write("\u00aa\3\u00aa\7\u00aa\u0f61\n\u00aa\f\u00aa\16\u00aa")
        buf.write("\u0f64\13\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f68\n\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f6f")
        buf.write("\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f73\n\u00aa\3\u00ab")
        buf.write("\3\u00ab\5\u00ab\u0f77\n\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0fa4")
        buf.write("\n\u00b1\3\u00b1\5\u00b1\u0fa7\n\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\6\u00b1\u0fac\n\u00b1\r\u00b1\16\u00b1\u0fad")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\5\u00b3\u0fb9\n\u00b3\3\u00b3\7\u00b3")
        buf.write("\u0fbc\n\u00b3\f\u00b3\16\u00b3\u0fbf\13\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0fc3\n\u00b3\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\5\u00b4\u0fc8\n\u00b4\5\u00b4\u0fca\n\u00b4\3\u00b4\3")
        buf.write("\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0fd2\n")
        buf.write("\u00b4\f\u00b4\16\u00b4\u0fd5\13\u00b4\3\u00b4\3\u00b4")
        buf.write("\5\u00b4\u0fd9\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\7\u00b4\u0fe1\n\u00b4\f\u00b4\16\u00b4")
        buf.write("\u0fe4\13\u00b4\3\u00b4\5\u00b4\u0fe7\n\u00b4\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0feb\n\u00b4\3\u00b4\7\u00b4\u0fee\n")
        buf.write("\u00b4\f\u00b4\16\u00b4\u0ff1\13\u00b4\3\u00b4\3\u00b4")
        buf.write("\5\u00b4\u0ff5\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u0ffa\n\u00b4\3\u00b5\3\u00b5\5\u00b5\u0ffe\n\u00b5\3")
        buf.write("\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u100a\n\u00b6\f\u00b6")
        buf.write("\16\u00b6\u100d\13\u00b6\3\u00b6\3\u00b6\5\u00b6\u1011")
        buf.write("\n\u00b6\3\u00b6\5\u00b6\u1014\n\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b7\3\u00b7\5\u00b7\u101a\n\u00b7\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u1021\n\u00b8\f\u00b8")
        buf.write("\16\u00b8\u1024\13\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u102f")
        buf.write("\n\u00b9\f\u00b9\16\u00b9\u1032\13\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1039\n\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u1042\n\u00bb\3\u00bb\5\u00bb\u1045\n\u00bb\3\u00bb\7")
        buf.write("\u00bb\u1048\n\u00bb\f\u00bb\16\u00bb\u104b\13\u00bb\3")
        buf.write("\u00bb\3\u00bb\5\u00bb\u104f\n\u00bb\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\5\u00bc\u1054\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5")
        buf.write("\u00bc\u1059\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7")
        buf.write("\u00bd\u105f\n\u00bd\f\u00bd\16\u00bd\u1062\13\u00bd\3")
        buf.write("\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u1068\n\u00bd\5")
        buf.write("\u00bd\u106a\n\u00bd\3\u00be\3\u00be\5\u00be\u106e\n\u00be")
        buf.write("\3\u00be\3\u00be\7\u00be\u1072\n\u00be\f\u00be\16\u00be")
        buf.write("\u1075\13\u00be\3\u00be\3\u00be\5\u00be\u1079\n\u00be")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\5\u00bf\u1084\n\u00bf\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u108c\n\u00c0")
        buf.write("\f\u00c0\16\u00c0\u108f\13\u00c0\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u1093\n\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u109d\n\u00c1\f\u00c1")
        buf.write("\16\u00c1\u10a0\13\u00c1\3\u00c1\3\u00c1\5\u00c1\u10a4")
        buf.write("\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u10a9\n\u00c1")
        buf.write("\3\u00c1\5\u00c1\u10ac\n\u00c1\3\u00c1\3\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u10ba\n\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u10c5\n\u00c4\3\u00c4\7\u00c4\u10c8\n\u00c4\f")
        buf.write("\u00c4\16\u00c4\u10cb\13\u00c4\3\u00c4\3\u00c4\5\u00c4")
        buf.write("\u10cf\n\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u10d4\n")
        buf.write("\u00c5\5\u00c5\u10d6\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3")
        buf.write("\u00c5\3\u00c5\3\u00c5\7\u00c5\u10de\n\u00c5\f\u00c5\16")
        buf.write("\u00c5\u10e1\13\u00c5\3\u00c5\3\u00c5\5\u00c5\u10e5\n")
        buf.write("\u00c5\3\u00c5\5\u00c5\u10e8\n\u00c5\3\u00c5\3\u00c5\5")
        buf.write("\u00c5\u10ec\n\u00c5\3\u00c5\7\u00c5\u10ef\n\u00c5\f\u00c5")
        buf.write("\16\u00c5\u10f2\13\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u10f7\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u1106\n\u00c7\3\u00c7\7\u00c7\u1109\n")
        buf.write("\u00c7\f\u00c7\16\u00c7\u110c\13\u00c7\3\u00c7\3\u00c7")
        buf.write("\5\u00c7\u1110\n\u00c7\5\u00c7\u1112\n\u00c7\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\5\u00c8\u1117\n\u00c8\3\u00c8\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\3\u00c8\5\u00c8\u111e\n\u00c8\3\u00c8\5")
        buf.write("\u00c8\u1121\n\u00c8\3\u00c8\5\u00c8\u1124\n\u00c8\3\u00c8")
        buf.write("\5\u00c8\u1127\n\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\7\u00c9\u112f\n\u00c9\f\u00c9\16\u00c9")
        buf.write("\u1132\13\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u113d\n\u00cb")
        buf.write("\3\u00cb\3\u00cb\5\u00cb\u1141\n\u00cb\3\u00cb\5\u00cb")
        buf.write("\u1144\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\5\u00cd\u114d\n\u00cd\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\7\u00ce\u1153\n\u00ce\f\u00ce\16\u00ce")
        buf.write("\u1156\13\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\5\u00ce\u115d\n\u00ce\3\u00ce\5\u00ce\u1160\n\u00ce\3")
        buf.write("\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1167\n")
        buf.write("\u00cf\3\u00d0\3\u00d0\5\u00d0\u116b\n\u00d0\3\u00d1\3")
        buf.write("\u00d1\3\u00d1\7\u00d1\u1170\n\u00d1\f\u00d1\16\u00d1")
        buf.write("\u1173\13\u00d1\3\u00d1\6\u00d1\u1176\n\u00d1\r\u00d1")
        buf.write("\16\u00d1\u1177\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2")
        buf.write("\u11a1\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\5\u00d3\u11bd\n\u00d3\3\u00d4\3\u00d4\3\u00d4\7\u00d4")
        buf.write("\u11c2\n\u00d4\f\u00d4\16\u00d4\u11c5\13\u00d4\3\u00d4")
        buf.write("\3\u00d4\5\u00d4\u11c9\n\u00d4\3\u00d4\3\u00d4\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u11d2\n\u00d5")
        buf.write("\f\u00d5\16\u00d5\u11d5\13\u00d5\5\u00d5\u11d7\n\u00d5")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7")
        buf.write("\6\u00d7\u11e0\n\u00d7\r\u00d7\16\u00d7\u11e1\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u11ea")
        buf.write("\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u11ee\n\u00d9\3\u00da")
        buf.write("\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\5\u00da\u11f8\n\u00da\3\u00da\5\u00da\u11fb\n\u00da\3")
        buf.write("\u00db\3\u00db\5\u00db\u11ff\n\u00db\3\u00db\5\u00db\u1202")
        buf.write("\n\u00db\3\u00db\7\u00db\u1205\n\u00db\f\u00db\16\u00db")
        buf.write("\u1208\13\u00db\3\u00db\3\u00db\5\u00db\u120c\n\u00db")
        buf.write("\3\u00dc\3\u00dc\5\u00dc\u1210\n\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u1218\n\u00dc")
        buf.write("\f\u00dc\16\u00dc\u121b\13\u00dc\3\u00dc\3\u00dc\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\7\u00dd\u1222\n\u00dd\f\u00dd\16\u00dd")
        buf.write("\u1225\13\u00dd\3\u00de\3\u00de\3\u00de\5\u00de\u122a")
        buf.write("\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\7\u00df\u1233\n\u00df\f\u00df\16\u00df\u1236")
        buf.write("\13\u00df\3\u00df\3\u00df\5\u00df\u123a\n\u00df\3\u00e0")
        buf.write("\3\u00e0\5\u00e0\u123e\n\u00e0\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1246\n\u00e1\3\u00e2")
        buf.write("\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u124e")
        buf.write("\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1253\n\u00e2")
        buf.write("\3\u00e2\5\u00e2\u1256\n\u00e2\5\u00e2\u1258\n\u00e2\3")
        buf.write("\u00e3\5\u00e3\u125b\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1264\n\u00e4\3")
        buf.write("\u00e4\3\u00e4\3\u00e4\5\u00e4\u1269\n\u00e4\3\u00e5\3")
        buf.write("\u00e5\3\u00e5\5\u00e5\u126e\n\u00e5\3\u00e5\5\u00e5\u1271")
        buf.write("\n\u00e5\3\u00e6\5\u00e6\u1274\n\u00e6\3\u00e6\3\u00e6")
        buf.write("\5\u00e6\u1278\n\u00e6\3\u00e6\5\u00e6\u127b\n\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u1281\n\u00e6\f")
        buf.write("\u00e6\16\u00e6\u1284\13\u00e6\3\u00e6\3\u00e6\5\u00e6")
        buf.write("\u1288\n\u00e6\3\u00e6\7\u00e6\u128b\n\u00e6\f\u00e6\16")
        buf.write("\u00e6\u128e\13\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\5\u00e7\u1294\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u129e\n\u00e9")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\6\u00eb\u12ac")
        buf.write("\n\u00eb\r\u00eb\16\u00eb\u12ad\3\u00eb\3\u00eb\3\u00ec")
        buf.write("\3\u00ec\5\u00ec\u12b4\n\u00ec\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u12be")
        buf.write("\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\7\u00ef\u12c6\n\u00ef\f\u00ef\16\u00ef\u12c9\13\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u12cf\n\u00ef")
        buf.write("\3\u00ef\7\u00ef\u12d2\n\u00ef\f\u00ef\16\u00ef\u12d5")
        buf.write("\13\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u12da\n\u00ef")
        buf.write("\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0")
        buf.write("\u12e2\n\u00f0\f\u00f0\16\u00f0\u12e5\13\u00f0\3\u00f0")
        buf.write("\3\u00f0\5\u00f0\u12e9\n\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f0\5\u00f0\u12f0\n\u00f0\3\u00f0\7\u00f0")
        buf.write("\u12f3\n\u00f0\f\u00f0\16\u00f0\u12f6\13\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f0\5\u00f0\u12fb\n\u00f0\3\u00f1\5\u00f1")
        buf.write("\u12fe\n\u00f1\3\u00f1\5\u00f1\u1301\n\u00f1\3\u00f1\3")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u1310")
        buf.write("\n\u00f1\f\u00f1\16\u00f1\u1313\13\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u1317\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1320\n\u00f1\3\u00f1")
        buf.write("\7\u00f1\u1323\n\u00f1\f\u00f1\16\u00f1\u1326\13\u00f1")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u132b\n\u00f1\3\u00f2")
        buf.write("\5\u00f2\u132e\n\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u1335\n\u00f3\3\u00f3\5\u00f3\u1338\n")
        buf.write("\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\5\u00f5")
        buf.write("\u133f\n\u00f5\3\u00f5\6\u00f5\u1342\n\u00f5\r\u00f5\16")
        buf.write("\u00f5\u1343\3\u00f5\3\u00f5\5\u00f5\u1348\n\u00f5\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\5\u00f6\u134d\n\u00f6\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\5\u00f7\u1352\n\u00f7\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u135a\n\u00f8\f\u00f8")
        buf.write("\16\u00f8\u135d\13\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write("\u1362\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\7\u00f9\u136a\n\u00f9\f\u00f9\16\u00f9\u136d")
        buf.write("\13\u00f9\3\u00f9\3\u00f9\5\u00f9\u1371\n\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1378\n\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u137e\n\u00f9")
        buf.write("\3\u00f9\3\u00f9\5\u00f9\u1382\n\u00f9\3\u00fa\5\u00fa")
        buf.write("\u1385\n\u00fa\3\u00fa\5\u00fa\u1388\n\u00fa\3\u00fa\3")
        buf.write("\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u1397")
        buf.write("\n\u00fa\f\u00fa\16\u00fa\u139a\13\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u139e\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\5\u00fa\u13a6\n\u00fa\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\7\u00fc\u13b2\n\u00fc\f\u00fc\16\u00fc\u13b5")
        buf.write("\13\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u13bb")
        buf.write("\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\6\u0100\u13c8")
        buf.write("\n\u0100\r\u0100\16\u0100\u13c9\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\7\u0101\u13d1\n\u0101\f\u0101\16\u0101")
        buf.write("\u13d4\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u13e6\n\u0102")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0105\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106")
        buf.write("\5\u0106\u13f6\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0108\3\u0108\3\u0108\5\u0108\u13ff\n\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\5\u0108\u1404\n\u0108\3\u0108\3\u0108")
        buf.write("\5\u0108\u1408\n\u0108\3\u0108\5\u0108\u140b\n\u0108\3")
        buf.write("\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\7\u0109")
        buf.write("\u1413\n\u0109\f\u0109\16\u0109\u1416\13\u0109\3\u0109")
        buf.write("\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a")
        buf.write("\u141f\n\u010a\f\u010a\16\u010a\u1422\13\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\5\u010a\u1427\n\u010a\3\u010a\3\u010a")
        buf.write("\3\u010b\3\u010b\7\u010b\u142d\n\u010b\f\u010b\16\u010b")
        buf.write("\u1430\13\u010b\3\u010b\5\u010b\u1433\n\u010b\3\u010b")
        buf.write("\5\u010b\u1436\n\u010b\3\u010c\3\u010c\3\u010c\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\5\u010d\u1444\n\u010d\3\u010e\3\u010e\5\u010e")
        buf.write("\u1448\n\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u144d\n")
        buf.write("\u010e\3\u010e\5\u010e\u1450\n\u010e\3\u010e\3\u010e\3")
        buf.write("\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f")
        buf.write("\3\u010f\3\u010f\5\u010f\u145d\n\u010f\3\u010f\3\u010f")
        buf.write("\5\u010f\u1461\n\u010f\3\u010f\3\u010f\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u146b\n\u0110")
        buf.write("\f\u0110\16\u0110\u146e\13\u0110\3\u0110\3\u0110\5\u0110")
        buf.write("\u1472\n\u0110\3\u0110\3\u0110\5\u0110\u1476\n\u0110\3")
        buf.write("\u0110\3\u0110\5\u0110\u147a\n\u0110\3\u0110\3\u0110\3")
        buf.write("\u0111\3\u0111\5\u0111\u1480\n\u0111\3\u0111\5\u0111\u1483")
        buf.write("\n\u0111\3\u0111\5\u0111\u1486\n\u0111\3\u0112\3\u0112")
        buf.write("\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\5\u0113\u14a1\n\u0113\3\u0113\3\u0113")
        buf.write("\6\u0113\u14a5\n\u0113\r\u0113\16\u0113\u14a6\3\u0113")
        buf.write("\3\u0113\5\u0113\u14ab\n\u0113\3\u0113\3\u0113\3\u0114")
        buf.write("\3\u0114\5\u0114\u14b1\n\u0114\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u14bb")
        buf.write("\n\u0115\f\u0115\16\u0115\u14be\13\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u14c6\n\u0115")
        buf.write("\5\u0115\u14c8\n\u0115\3\u0115\3\u0115\3\u0116\3\u0116")
        buf.write("\5\u0116\u14ce\n\u0116\3\u0116\3\u0116\5\u0116\u14d2\n")
        buf.write("\u0116\3\u0116\5\u0116\u14d5\n\u0116\3\u0117\3\u0117\3")
        buf.write("\u0117\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118\u14de\n")
        buf.write("\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\5\u0119\u14e9\n\u0119\3\u0119")
        buf.write("\3\u0119\5\u0119\u14ed\n\u0119\3\u0119\5\u0119\u14f0\n")
        buf.write("\u0119\3\u011a\3\u011a\5\u011a\u14f4\n\u011a\3\u011a\3")
        buf.write("\u011a\3\u011a\3\u011b\3\u011b\3\u011b\5\u011b\u14fc\n")
        buf.write("\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b")
        buf.write("\3\u011b\5\u011b\u1505\n\u011b\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\6\u011d\u150e\n\u011d")
        buf.write("\r\u011d\16\u011d\u150f\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\5\u011f\u151e\n\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\5\u011f\u1532\n\u011f\3\u0120\3\u0120\5\u0120")
        buf.write("\u1536\n\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121")
        buf.write("\5\u0121\u153d\n\u0121\3\u0121\3\u0121\5\u0121\u1541\n")
        buf.write("\u0121\3\u0122\3\u0122\5\u0122\u1545\n\u0122\3\u0122\3")
        buf.write("\u0122\5\u0122\u1549\n\u0122\3\u0123\3\u0123\3\u0123\3")
        buf.write("\u0124\3\u0124\3\u0124\3\u0124\3\u0124\7\u0124\u1553\n")
        buf.write("\u0124\f\u0124\16\u0124\u1556\13\u0124\3\u0124\5\u0124")
        buf.write("\u1559\n\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0127")
        buf.write("\5\u0127\u1567\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\5\u0127\u156d\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\3\u0127\5\u0127\u1574\n\u0127\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u1579\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1583\n\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1589\n\u0128")
        buf.write("\5\u0128\u158b\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\3\u0129\3\u0129\5\u0129\u1594\n\u0129\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\5\u012a\u159e\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a")
        buf.write("\u15a3\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012c\3\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f")
        buf.write("\3\u012f\5\u012f\u15b2\n\u012f\3\u0130\3\u0130\5\u0130")
        buf.write("\u15b6\n\u0130\3\u0131\5\u0131\u15b9\n\u0131\3\u0131\3")
        buf.write("\u0131\5\u0131\u15bd\n\u0131\3\u0132\3\u0132\3\u0132\3")
        buf.write("\u0132\6\u0132\u15c3\n\u0132\r\u0132\16\u0132\u15c4\5")
        buf.write("\u0132\u15c7\n\u0132\3\u0132\3\u0132\5\u0132\u15cb\n\u0132")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u15d1\n\u0133")
        buf.write("\f\u0133\16\u0133\u15d4\13\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0134\5\u0134\u15da\n\u0134\3\u0134\6\u0134\u15dd\n")
        buf.write("\u0134\r\u0134\16\u0134\u15de\5\u0134\u15e1\n\u0134\3")
        buf.write("\u0134\3\u0134\3\u0135\5\u0135\u15e6\n\u0135\3\u0135\6")
        buf.write("\u0135\u15e9\n\u0135\r\u0135\16\u0135\u15ea\3\u0135\3")
        buf.write("\u0135\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u15f3\n")
        buf.write("\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137")
        buf.write("\u15fa\n\u0137\3\u0137\3\u0137\5\u0137\u15fe\n\u0137\3")
        buf.write("\u0137\5\u0137\u1601\n\u0137\3\u0138\3\u0138\3\u0138\3")
        buf.write("\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\5\u0139\u160d\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\5\u013a\u1613\n\u013a\3\u013b\3\u013b\3\u013b\3\u013c")
        buf.write("\3\u013c\3\u013c\5\u013c\u161b\n\u013c\3\u013d\3\u013d")
        buf.write("\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u1623\n\u013d")
        buf.write("\f\u013d\16\u013d\u1626\13\u013d\3\u013d\3\u013d\3\u013d")
        buf.write("\3\u013d\3\u013d\3\u013d\7\u013d\u162e\n\u013d\f\u013d")
        buf.write("\16\u013d\u1631\13\u013d\5\u013d\u1633\n\u013d\3\u013e")
        buf.write("\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u163a\n\u013e")
        buf.write("\3\u013e\5\u013e\u163d\n\u013e\3\u013f\3\u013f\3\u013f")
        buf.write("\3\u013f\3\u013f\5\u013f\u1644\n\u013f\3\u0140\3\u0140")
        buf.write("\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write("\5\u0140\u164f\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write("\5\u0140\u1655\n\u0140\3\u0140\3\u0140\5\u0140\u1659\n")
        buf.write("\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\7\u0141\u1661\n\u0141\f\u0141\16\u0141\u1664\13\u0141")
        buf.write("\5\u0141\u1666\n\u0141\3\u0141\3\u0141\3\u0142\3\u0142")
        buf.write("\5\u0142\u166c\n\u0142\3\u0142\3\u0142\3\u0142\3\u0142")
        buf.write("\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1677")
        buf.write("\n\u0142\5\u0142\u1679\n\u0142\5\u0142\u167b\n\u0142\3")
        buf.write("\u0142\5\u0142\u167e\n\u0142\3\u0143\3\u0143\5\u0143\u1682")
        buf.write("\n\u0143\3\u0143\5\u0143\u1685\n\u0143\3\u0144\3\u0144")
        buf.write("\5\u0144\u1689\n\u0144\3\u0144\3\u0144\5\u0144\u168d\n")
        buf.write("\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1692\n\u0144\3")
        buf.write("\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\3\u0146")
        buf.write("\3\u0146\3\u0146\5\u0146\u169d\n\u0146\3\u0146\3\u0146")
        buf.write("\5\u0146\u16a1\n\u0146\3\u0146\3\u0146\3\u0146\3\u0146")
        buf.write("\3\u0146\3\u0146\5\u0146\u16a9\n\u0146\3\u0147\5\u0147")
        buf.write("\u16ac\n\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\7\u0148\u16b4\n\u0148\f\u0148\16\u0148\u16b7")
        buf.write("\13\u0148\3\u0149\3\u0149\5\u0149\u16bb\n\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\5\u0149\u16c1\n\u0149\3\u0149")
        buf.write("\3\u0149\5\u0149\u16c5\n\u0149\3\u0149\5\u0149\u16c8\n")
        buf.write("\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write("\5\u014a\u16d0\n\u014a\3\u014a\5\u014a\u16d3\n\u014a\3")
        buf.write("\u014a\3\u014a\5\u014a\u16d7\n\u014a\3\u014a\3\u014a\5")
        buf.write("\u014a\u16db\n\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u16e0")
        buf.write("\n\u014a\3\u014a\5\u014a\u16e3\n\u014a\3\u014a\3\u014a")
        buf.write("\5\u014a\u16e7\n\u014a\3\u014a\3\u014a\5\u014a\u16eb\n")
        buf.write("\u014a\7\u014a\u16ed\n\u014a\f\u014a\16\u014a\u16f0\13")
        buf.write("\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\7\u014b\u16f9\n\u014b\f\u014b\16\u014b\u16fc")
        buf.write("\13\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\5\u014c\u170b\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\5\u014c\u1711\n\u014c\7\u014c\u1713\n\u014c\f\u014c\16")
        buf.write("\u014c\u1716\13\u014c\3\u014d\3\u014d\5\u014d\u171a\n")
        buf.write("\u014d\3\u014e\3\u014e\5\u014e\u171e\n\u014e\3\u014e\3")
        buf.write("\u014e\3\u014e\7\u014e\u1723\n\u014e\f\u014e\16\u014e")
        buf.write("\u1726\13\u014e\3\u014e\5\u014e\u1729\n\u014e\3\u014e")
        buf.write("\5\u014e\u172c\n\u014e\3\u014e\5\u014e\u172f\n\u014e\3")
        buf.write("\u014e\5\u014e\u1732\n\u014e\3\u014e\3\u014e\7\u014e\u1736")
        buf.write("\n\u014e\f\u014e\16\u014e\u1739\13\u014e\3\u014e\5\u014e")
        buf.write("\u173c\n\u014e\3\u014e\3\u014e\3\u014e\7\u014e\u1741\n")
        buf.write("\u014e\f\u014e\16\u014e\u1744\13\u014e\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f")
        buf.write("\u174e\n\u014f\5\u014f\u1750\n\u014f\3\u0150\3\u0150\3")
        buf.write("\u0150\3\u0150\7\u0150\u1756\n\u0150\f\u0150\16\u0150")
        buf.write("\u1759\13\u0150\3\u0151\3\u0151\3\u0151\5\u0151\u175e")
        buf.write("\n\u0151\3\u0152\3\u0152\3\u0152\7\u0152\u1763\n\u0152")
        buf.write("\f\u0152\16\u0152\u1766\13\u0152\3\u0152\3\u0152\7\u0152")
        buf.write("\u176a\n\u0152\f\u0152\16\u0152\u176d\13\u0152\3\u0152")
        buf.write("\5\u0152\u1770\n\u0152\5\u0152\u1772\n\u0152\3\u0152\3")
        buf.write("\u0152\7\u0152\u1776\n\u0152\f\u0152\16\u0152\u1779\13")
        buf.write("\u0152\3\u0153\3\u0153\3\u0153\5\u0153\u177e\n\u0153\3")
        buf.write("\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1785\n")
        buf.write("\u0153\3\u0154\5\u0154\u1788\n\u0154\3\u0154\5\u0154\u178b")
        buf.write("\n\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1790\n\u0154")
        buf.write("\3\u0154\3\u0154\5\u0154\u1794\n\u0154\3\u0155\3\u0155")
        buf.write("\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156")
        buf.write("\u179e\n\u0156\f\u0156\16\u0156\u17a1\13\u0156\3\u0156")
        buf.write("\3\u0156\3\u0157\3\u0157\5\u0157\u17a7\n\u0157\3\u0157")
        buf.write("\3\u0157\3\u0157\5\u0157\u17ac\n\u0157\5\u0157\u17ae\n")
        buf.write("\u0157\5\u0157\u17b0\n\u0157\3\u0158\3\u0158\3\u0158\3")
        buf.write("\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158")
        buf.write("\7\u0158\u17bc\n\u0158\f\u0158\16\u0158\u17bf\13\u0158")
        buf.write("\5\u0158\u17c1\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u17cb\n\u0159")
        buf.write("\3\u015a\3\u015a\5\u015a\u17cf\n\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\7\u015a\u17d5\n\u015a\f\u015a\16\u015a")
        buf.write("\u17d8\13\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u17e3\n\u015b")
        buf.write("\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\7\u015c")
        buf.write("\u17eb\n\u015c\f\u015c\16\u015c\u17ee\13\u015c\3\u015c")
        buf.write("\3\u015c\5\u015c\u17f2\n\u015c\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\7\u015d\u17fa\n\u015d\f\u015d")
        buf.write("\16\u015d\u17fd\13\u015d\3\u015d\3\u015d\3\u015d\7\u015d")
        buf.write("\u1802\n\u015d\f\u015d\16\u015d\u1805\13\u015d\5\u015d")
        buf.write("\u1807\n\u015d\3\u015d\3\u015d\3\u015e\3\u015e\5\u015e")
        buf.write("\u180d\n\u015e\3\u015f\3\u015f\5\u015f\u1811\n\u015f\3")
        buf.write("\u0160\3\u0160\3\u0160\5\u0160\u1816\n\u0160\3\u0160\3")
        buf.write("\u0160\3\u0160\3\u0160\3\u0160\3\u0160\7\u0160\u181e\n")
        buf.write("\u0160\f\u0160\16\u0160\u1821\13\u0160\3\u0160\3\u0160")
        buf.write("\5\u0160\u1825\n\u0160\3\u0160\3\u0160\3\u0160\3\u0160")
        buf.write("\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\7\u0161\u1830")
        buf.write("\n\u0161\f\u0161\16\u0161\u1833\13\u0161\3\u0161\3\u0161")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\7\u0162\u183c")
        buf.write("\n\u0162\f\u0162\16\u0162\u183f\13\u0162\3\u0162\3\u0162")
        buf.write("\5\u0162\u1843\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\7\u0162\u184b\n\u0162\f\u0162\16\u0162")
        buf.write("\u184e\13\u0162\3\u0162\3\u0162\5\u0162\u1852\n\u0162")
        buf.write("\5\u0162\u1854\n\u0162\3\u0163\3\u0163\3\u0163\5\u0163")
        buf.write("\u1859\n\u0163\3\u0163\3\u0163\5\u0163\u185d\n\u0163\3")
        buf.write("\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1863\n\u0163\3")
        buf.write("\u0163\3\u0163\5\u0163\u1867\n\u0163\3\u0164\3\u0164\3")
        buf.write("\u0164\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\7\u0165\u1872\n\u0165\f\u0165\16\u0165\u1875\13\u0165")
        buf.write("\3\u0166\3\u0166\3\u0166\5\u0166\u187a\n\u0166\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\3\u0167\7\u0167\u1881\n\u0167")
        buf.write("\f\u0167\16\u0167\u1884\13\u0167\3\u0167\3\u0167\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\7\u0168\u188e")
        buf.write("\n\u0168\f\u0168\16\u0168\u1891\13\u0168\3\u0168\3\u0168")
        buf.write("\3\u0169\3\u0169\3\u0169\5\u0169\u1898\n\u0169\3\u016a")
        buf.write("\3\u016a\3\u016a\3\u016b\3\u016b\7\u016b\u189f\n\u016b")
        buf.write("\f\u016b\16\u016b\u18a2\13\u016b\3\u016b\5\u016b\u18a5")
        buf.write("\n\u016b\3\u016b\7\u016b\u18a8\n\u016b\f\u016b\16\u016b")
        buf.write("\u18ab\13\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\5\u016c\u18b5\n\u016c\5\u016c")
        buf.write("\u18b7\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write("\7\u016e\u18c5\n\u016e\f\u016e\16\u016e\u18c8\13\u016e")
        buf.write("\3\u016f\3\u016f\5\u016f\u18cc\n\u016f\3\u016f\3\u016f")
        buf.write("\7\u016f\u18d0\n\u016f\f\u016f\16\u016f\u18d3\13\u016f")
        buf.write("\3\u016f\3\u016f\3\u0170\5\u0170\u18d8\n\u0170\3\u0170")
        buf.write("\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171")
        buf.write("\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\7\u0172")
        buf.write("\u18e8\n\u0172\f\u0172\16\u0172\u18eb\13\u0172\3\u0172")
        buf.write("\3\u0172\3\u0173\3\u0173\5\u0173\u18f1\n\u0173\3\u0174")
        buf.write("\5\u0174\u18f4\n\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\7\u0174\u18fa\n\u0174\f\u0174\16\u0174\u18fd\13\u0174")
        buf.write("\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175")
        buf.write("\u1905\n\u0175\5\u0175\u1907\n\u0175\3\u0175\3\u0175\5")
        buf.write("\u0175\u190b\n\u0175\3\u0175\5\u0175\u190e\n\u0175\3\u0176")
        buf.write("\3\u0176\3\u0176\5\u0176\u1913\n\u0176\5\u0176\u1915\n")
        buf.write("\u0176\3\u0176\3\u0176\5\u0176\u1919\n\u0176\3\u0176\3")
        buf.write("\u0176\3\u0176\3\u0177\3\u0177\3\u0178\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0178\5\u0178\u1925\n\u0178\3\u0179\3\u0179")
        buf.write("\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\5\u017a\u192e")
        buf.write("\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\7\u017a\u1934")
        buf.write("\n\u017a\f\u017a\16\u017a\u1937\13\u017a\3\u017b\3\u017b")
        buf.write("\5\u017b\u193b\n\u017b\3\u017b\3\u017b\5\u017b\u193f\n")
        buf.write("\u017b\3\u017c\3\u017c\3\u017c\5\u017c\u1944\n\u017c\3")
        buf.write("\u017c\5\u017c\u1947\n\u017c\3\u017d\3\u017d\3\u017d\3")
        buf.write("\u017d\7\u017d\u194d\n\u017d\f\u017d\16\u017d\u1950\13")
        buf.write("\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e")
        buf.write("\u1957\n\u017e\3\u017f\3\u017f\3\u017f\3\u0180\3\u0180")
        buf.write("\3\u0180\3\u0180\5\u0180\u1960\n\u0180\3\u0180\5\u0180")
        buf.write("\u1963\n\u0180\3\u0180\5\u0180\u1966\n\u0180\3\u0180\5")
        buf.write("\u0180\u1969\n\u0180\3\u0181\3\u0181\3\u0181\3\u0181\7")
        buf.write("\u0181\u196f\n\u0181\f\u0181\16\u0181\u1972\13\u0181\3")
        buf.write("\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181")
        buf.write("\5\u0181\u197b\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u1985\n\u0182")
        buf.write("\3\u0183\3\u0183\5\u0183\u1989\n\u0183\3\u0183\3\u0183")
        buf.write("\5\u0183\u198d\n\u0183\3\u0183\5\u0183\u1990\n\u0183\3")
        buf.write("\u0183\5\u0183\u1993\n\u0183\3\u0184\3\u0184\3\u0184\5")
        buf.write("\u0184\u1998\n\u0184\3\u0185\3\u0185\3\u0185\5\u0185\u199d")
        buf.write("\n\u0185\3\u0185\5\u0185\u19a0\n\u0185\3\u0185\5\u0185")
        buf.write("\u19a3\n\u0185\3\u0186\3\u0186\6\u0186\u19a7\n\u0186\r")
        buf.write("\u0186\16\u0186\u19a8\3\u0186\5\u0186\u19ac\n\u0186\3")
        buf.write("\u0186\3\u0186\3\u0187\3\u0187\5\u0187\u19b2\n\u0187\3")
        buf.write("\u0187\5\u0187\u19b5\n\u0187\3\u0188\5\u0188\u19b8\n\u0188")
        buf.write("\3\u0188\6\u0188\u19bb\n\u0188\r\u0188\16\u0188\u19bc")
        buf.write("\3\u0188\5\u0188\u19c0\n\u0188\3\u0189\3\u0189\3\u0189")
        buf.write("\3\u0189\6\u0189\u19c6\n\u0189\r\u0189\16\u0189\u19c7")
        buf.write("\3\u018a\3\u018a\6\u018a\u19cc\n\u018a\r\u018a\16\u018a")
        buf.write("\u19cd\3\u018b\3\u018b\3\u018b\5\u018b\u19d3\n\u018b\3")
        buf.write("\u018c\3\u018c\3\u018c\3\u018c\7\u018c\u19d9\n\u018c\f")
        buf.write("\u018c\16\u018c\u19dc\13\u018c\3\u018d\3\u018d\3\u018d")
        buf.write("\3\u018d\5\u018d\u19e2\n\u018d\3\u018d\3\u018d\3\u018d")
        buf.write("\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19ec")
        buf.write("\n\u018d\3\u018d\3\u018d\5\u018d\u19f0\n\u018d\5\u018d")
        buf.write("\u19f2\n\u018d\3\u018d\5\u018d\u19f5\n\u018d\3\u018e\3")
        buf.write("\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e")
        buf.write("\7\u018e\u19ff\n\u018e\f\u018e\16\u018e\u1a02\13\u018e")
        buf.write("\3\u018e\5\u018e\u1a05\n\u018e\3\u018e\5\u018e\u1a08\n")
        buf.write("\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190")
        buf.write("\3\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191")
        buf.write("\5\u0191\u1a17\n\u0191\3\u0191\3\u0191\3\u0191\5\u0191")
        buf.write("\u1a1c\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write("\5\u0192\u1a23\n\u0192\3\u0192\5\u0192\u1a26\n\u0192\3")
        buf.write("\u0193\3\u0193\3\u0193\3\u0193\3\u0193\7\u0193\u1a2d\n")
        buf.write("\u0193\f\u0193\16\u0193\u1a30\13\u0193\3\u0193\3\u0193")
        buf.write("\3\u0193\3\u0193\5\u0193\u1a36\n\u0193\3\u0194\3\u0194")
        buf.write("\3\u0194\5\u0194\u1a3b\n\u0194\3\u0195\3\u0195\5\u0195")
        buf.write("\u1a3f\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196")
        buf.write("\3\u0196\5\u0196\u1a47\n\u0196\3\u0196\3\u0196\3\u0196")
        buf.write("\3\u0196\5\u0196\u1a4d\n\u0196\3\u0197\3\u0197\3\u0197")
        buf.write("\3\u0197\3\u0197\3\u0197\5\u0197\u1a55\n\u0197\3\u0197")
        buf.write("\5\u0197\u1a58\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198")
        buf.write("\7\u0198\u1a5e\n\u0198\f\u0198\16\u0198\u1a61\13\u0198")
        buf.write("\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\5\u0199\u1a68")
        buf.write("\n\u0199\3\u0199\5\u0199\u1a6b\n\u0199\3\u0199\5\u0199")
        buf.write("\u1a6e\n\u0199\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\5\u019b\u1a77\n\u019b\3\u019c\3\u019c")
        buf.write("\3\u019c\3\u019c\5\u019c\u1a7d\n\u019c\3\u019c\3\u019c")
        buf.write("\3\u019c\3\u019c\5\u019c\u1a83\n\u019c\5\u019c\u1a85\n")
        buf.write("\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1a92")
        buf.write("\n\u019d\5\u019d\u1a94\n\u019d\3\u019e\3\u019e\3\u019e")
        buf.write("\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1a9d\n\u019e")
        buf.write("\5\u019e\u1a9f\n\u019e\3\u019f\3\u019f\5\u019f\u1aa3\n")
        buf.write("\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u1aa9\n")
        buf.write("\u019f\3\u019f\3\u019f\5\u019f\u1aad\n\u019f\3\u01a0\3")
        buf.write("\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a1")
        buf.write("\3\u01a1\3\u01a1\3\u01a2\3\u01a2\5\u01a2\u1abb\n\u01a2")
        buf.write("\3\u01a2\3\u01a2\7\u01a2\u1abf\n\u01a2\f\u01a2\16\u01a2")
        buf.write("\u1ac2\13\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\5\u01a4\u1ad2\n\u01a4\3\u01a4\3\u01a4")
        buf.write("\5\u01a4\u1ad6\n\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\5\u01a4\u1aec\n\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1af4\n\u01a4")
        buf.write("\3\u01a4\3\u01a4\5\u01a4\u1af8\n\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\5\u01a4\u1afe\n\u01a4\3\u01a4\3\u01a4")
        buf.write("\3\u01a4\5\u01a4\u1b03\n\u01a4\3\u01a4\7\u01a4\u1b06\n")
        buf.write("\u01a4\f\u01a4\16\u01a4\u1b09\13\u01a4\3\u01a5\5\u01a5")
        buf.write("\u1b0c\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5")
        buf.write("\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b17\n\u01a5")
        buf.write("\3\u01a5\3\u01a5\5\u01a5\u1b1b\n\u01a5\3\u01a5\3\u01a5")
        buf.write("\3\u01a5\7\u01a5\u1b20\n\u01a5\f\u01a5\16\u01a5\u1b23")
        buf.write("\13\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b27\n\u01a5\3\u01a6")
        buf.write("\3\u01a6\3\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a8\3\u01a8")
        buf.write("\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1b35\n\u01a8")
        buf.write("\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab")
        buf.write("\3\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ad")
        buf.write("\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b48\n\u01ad\3\u01ad")
        buf.write("\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad")
        buf.write("\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad")
        buf.write("\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b5c\n\u01ad\3\u01ad")
        buf.write("\5\u01ad\u1b5f\n\u01ad\7\u01ad\u1b61\n\u01ad\f\u01ad\16")
        buf.write("\u01ad\u1b64\13\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae")
        buf.write("\3\u01ae\5\u01ae\u1b6b\n\u01ae\3\u01ae\3\u01ae\3\u01ae")
        buf.write("\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1b73\n\u01ae\3\u01ae")
        buf.write("\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1b7a\n\u01ae")
        buf.write("\3\u01ae\3\u01ae\5\u01ae\u1b7e\n\u01ae\3\u01af\3\u01af")
        buf.write("\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0\5\u01b0\u1b87")
        buf.write("\n\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1b8c\n\u01b0")
        buf.write("\7\u01b0\u1b8e\n\u01b0\f\u01b0\16\u01b0\u1b91\13\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\7\u01b0\u1b96\n\u01b0\f\u01b0")
        buf.write("\16\u01b0\u1b99\13\u01b0\3\u01b0\5\u01b0\u1b9c\n\u01b0")
        buf.write("\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1ba3")
        buf.write("\n\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\5\u01b1\u1bac\n\u01b1\3\u01b2\3\u01b2\3\u01b2")
        buf.write("\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4")
        buf.write("\7\u01b4\u1bb8\n\u01b4\f\u01b4\16\u01b4\u1bbb\13\u01b4")
        buf.write("\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4")
        buf.write("\3\u01b4\7\u01b4\u1bc5\n\u01b4\f\u01b4\16\u01b4\u1bc8")
        buf.write("\13\u01b4\3\u01b4\3\u01b4\5\u01b4\u1bcc\n\u01b4\3\u01b4")
        buf.write("\3\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1be1\n\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\7\u01b5\u1be8")
        buf.write("\n\u01b5\f\u01b5\16\u01b5\u1beb\13\u01b5\3\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1bef\n\u01b6\3\u01b7\5\u01b7\u1bf2\n\u01b7\3")
        buf.write("\u01b7\3\u01b7\3\u01b7\6\u01b7\u1bf7\n\u01b7\r\u01b7\16")
        buf.write("\u01b7\u1bf8\3\u01b7\5\u01b7\u1bfc\n\u01b7\3\u01b7\3\u01b7")
        buf.write("\5\u01b7\u1c00\n\u01b7\3\u01b7\5\u01b7\u1c03\n\u01b7\3")
        buf.write("\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1c0a\n")
        buf.write("\u01b8\3\u01b9\5\u01b9\u1c0d\n\u01b9\3\u01b9\3\u01b9\6")
        buf.write("\u01b9\u1c11\n\u01b9\r\u01b9\16\u01b9\u1c12\3\u01b9\5")
        buf.write("\u01b9\u1c16\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u1c1a\n\u01b9")
        buf.write("\3\u01b9\5\u01b9\u1c1d\n\u01b9\3\u01ba\3\u01ba\3\u01ba")
        buf.write("\3\u01ba\3\u01ba\5\u01ba\u1c24\n\u01ba\3\u01bb\3\u01bb")
        buf.write("\3\u01bb\5\u01bb\u1c29\n\u01bb\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1c3b\n\u01bc\5\u01bc\u1c3d\n\u01bc\3\u01bd\3\u01bd\5")
        buf.write("\u01bd\u1c41\n\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\7")
        buf.write("\u01be\u1c47\n\u01be\f\u01be\16\u01be\u1c4a\13\u01be\3")
        buf.write("\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf")
        buf.write("\3\u01bf\3\u01bf\5\u01bf\u1c55\n\u01bf\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c5c\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1c67\n\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c6f\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c7e")
        buf.write("\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c82\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\6\u01c0\u1c89\n\u01c0")
        buf.write("\r\u01c0\16\u01c0\u1c8a\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\5\u01c0\u1c91\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1c99\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1ca2")
        buf.write("\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\7\u01c0\u1cab\n\u01c0\f\u01c0\16\u01c0\u1cae")
        buf.write("\13\u01c0\3\u01c0\5\u01c0\u1cb1\n\u01c0\3\u01c0\5\u01c0")
        buf.write("\u1cb4\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1cc4\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\7\u01c0\u1cc8\n\u01c0\f\u01c0\16\u01c0\u1ccb\13\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\5\u01c0\u1cd4\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1cdc\n\u01c0\3\u01c0\5\u01c0")
        buf.write("\u1cdf\n\u01c0\3\u01c0\5\u01c0\u1ce2\n\u01c0\3\u01c0\3")
        buf.write("\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0")
        buf.write("\u1ceb\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1cf0\n")
        buf.write("\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\7\u01c0")
        buf.write("\u1cf7\n\u01c0\f\u01c0\16\u01c0\u1cfa\13\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1cff\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1d04\n\u01c0\3\u01c0\5\u01c0\u1d07\n")
        buf.write("\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d0c\n\u01c0\3")
        buf.write("\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d11\n\u01c0\7\u01c0\u1d13")
        buf.write("\n\u01c0\f\u01c0\16\u01c0\u1d16\13\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1d1b\n\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1d21\n\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d2a\n\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d2f\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d37")
        buf.write("\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d3b\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1d40\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1d46\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d4d\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1d52\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d59\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1d5d\n\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\5\u01c0\u1d62\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1d6a\n\u01c0\3\u01c0\5\u01c0")
        buf.write("\u1d6d\n\u01c0\3\u01c0\5\u01c0\u1d70\n\u01c0\3\u01c0\5")
        buf.write("\u01c0\u1d73\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d77\n\u01c0")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d7c\n\u01c0\3\u01c0")
        buf.write("\3\u01c0\3\u01c0\5\u01c0\u1d81\n\u01c0\3\u01c0\3\u01c0")
        buf.write("\5\u01c0\u1d85\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1d8c\n\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write("\5\u01c0\u1d91\n\u01c0\5\u01c0\u1d93\n\u01c0\3\u01c0\3")
        buf.write("\u01c0\3\u01c0\7\u01c0\u1d98\n\u01c0\f\u01c0\16\u01c0")
        buf.write("\u1d9b\13\u01c0\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1da0")
        buf.write("\n\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1da6")
        buf.write("\n\u01c1\3\u01c1\5\u01c1\u1da9\n\u01c1\3\u01c1\3\u01c1")
        buf.write("\5\u01c1\u1dad\n\u01c1\5\u01c1\u1daf\n\u01c1\3\u01c2\3")
        buf.write("\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c5\3\u01c5")
        buf.write("\3\u01c5\5\u01c5\u1dba\n\u01c5\3\u01c5\3\u01c5\5\u01c5")
        buf.write("\u1dbe\n\u01c5\5\u01c5\u1dc0\n\u01c5\3\u01c5\3\u01c5\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6")
        buf.write("\5\u01c6\u1dcb\n\u01c6\3\u01c7\3\u01c7\3\u01c8\3\u01c8")
        buf.write("\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1dd6")
        buf.write("\n\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\7\u01c9")
        buf.write("\u1ddd\n\u01c9\f\u01c9\16\u01c9\u1de0\13\u01c9\5\u01c9")
        buf.write("\u1de2\n\u01c9\3\u01ca\3\u01ca\5\u01ca\u1de6\n\u01ca\3")
        buf.write("\u01ca\5\u01ca\u1de9\n\u01ca\3\u01ca\3\u01ca\5\u01ca\u1ded")
        buf.write("\n\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc")
        buf.write("\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1dfa")
        buf.write("\n\u01cc\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1dff\n\u01cd")
        buf.write("\3\u01cd\3\u01cd\3\u01cd\3\u01cd\7\u01cd\u1e05\n\u01cd")
        buf.write("\f\u01cd\16\u01cd\u1e08\13\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write("\3\u01cd\5\u01cd\u1e0e\n\u01cd\3\u01ce\3\u01ce\3\u01ce")
        buf.write("\5\u01ce\u1e13\n\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e17\n")
        buf.write("\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e1c\n\u01ce\3")
        buf.write("\u01cf\3\u01cf\3\u01cf\5\u01cf\u1e21\n\u01cf\3\u01cf\5")
        buf.write("\u01cf\u1e24\n\u01cf\3\u01cf\3\u01cf\3\u01cf\7\u01cf\u1e29")
        buf.write("\n\u01cf\f\u01cf\16\u01cf\u1e2c\13\u01cf\3\u01cf\3\u01cf")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1e35")
        buf.write("\n\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\7\u01d0\u1e3b")
        buf.write("\n\u01d0\f\u01d0\16\u01d0\u1e3e\13\u01d0\3\u01d0\5\u01d0")
        buf.write("\u1e41\n\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1")
        buf.write("\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1e4b\n\u01d1\3\u01d1")
        buf.write("\5\u01d1\u1e4e\n\u01d1\5\u01d1\u1e50\n\u01d1\3\u01d2\3")
        buf.write("\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write("\5\u01d3\u1e5a\n\u01d3\5\u01d3\u1e5c\n\u01d3\3\u01d4\3")
        buf.write("\u01d4\3\u01d4\3\u01d4\5\u01d4\u1e62\n\u01d4\3\u01d5\3")
        buf.write("\u01d5\3\u01d5\3\u01d5\5\u01d5\u1e68\n\u01d5\5\u01d5\u1e6a")
        buf.write("\n\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d7\3\u01d7\3\u01d7")
        buf.write("\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8")
        buf.write("\u1e78\n\u01d8\5\u01d8\u1e7a\n\u01d8\3\u01d9\3\u01d9\3")
        buf.write("\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u1e82\n\u01d9\3")
        buf.write("\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da")
        buf.write("\5\u01da\u1e8b\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write("\3\u01db\3\u01db\3\u01db\5\u01db\u1e94\n\u01db\3\u01dc")
        buf.write("\3\u01dc\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01de\3\u01de")
        buf.write("\5\u01de\u1e9e\n\u01de\3\u01df\3\u01df\5\u01df\u1ea2\n")
        buf.write("\u01df\3\u01df\3\u01df\3\u01e0\5\u01e0\u1ea7\n\u01e0\3")
        buf.write("\u01e0\3\u01e0\5\u01e0\u1eab\n\u01e0\3\u01e0\5\u01e0\u1eae")
        buf.write("\n\u01e0\3\u01e1\5\u01e1\u1eb1\n\u01e1\3\u01e1\3\u01e1")
        buf.write("\5\u01e1\u1eb5\n\u01e1\3\u01e2\3\u01e2\3\u01e3\3\u01e3")
        buf.write("\3\u01e3\5\u01e3\u1ebc\n\u01e3\3\u01e4\3\u01e4\3\u01e4")
        buf.write("\3\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\7\u01e5\u1ec6")
        buf.write("\n\u01e5\f\u01e5\16\u01e5\u1ec9\13\u01e5\3\u01e5\3\u01e5")
        buf.write("\3\u01e5\3\u01e5\3\u01e5\3\u01e5\7\u01e5\u1ed1\n\u01e5")
        buf.write("\f\u01e5\16\u01e5\u1ed4\13\u01e5\5\u01e5\u1ed6\n\u01e5")
        buf.write("\3\u01e6\3\u01e6\5\u01e6\u1eda\n\u01e6\3\u01e7\3\u01e7")
        buf.write("\3\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01eb")
        buf.write("\3\u01eb\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ed\7\u01ed")
        buf.write("\u1eeb\n\u01ed\f\u01ed\16\u01ed\u1eee\13\u01ed\3\u01ed")
        buf.write("\3\u01ed\5\u01ed\u1ef2\n\u01ed\3\u01ee\3\u01ee\3\u01ef")
        buf.write("\3\u01ef\3\u01ef\5\u01ef\u1ef9\n\u01ef\3\u01f0\3\u01f0")
        buf.write("\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3")
        buf.write("\7\u01f3\u1f04\n\u01f3\f\u01f3\16\u01f3\u1f07\13\u01f3")
        buf.write("\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5\7\u01f5\u1f0e")
        buf.write("\n\u01f5\f\u01f5\16\u01f5\u1f11\13\u01f5\3\u01f5\3\u01f5")
        buf.write("\5\u01f5\u1f15\n\u01f5\3\u01f6\3\u01f6\3\u01f7\3\u01f7")
        buf.write("\3\u01f7\7\u01f7\u1f1c\n\u01f7\f\u01f7\16\u01f7\u1f1f")
        buf.write("\13\u01f7\3\u01f8\3\u01f8\3\u01f8\7\u01f8\u1f24\n\u01f8")
        buf.write("\f\u01f8\16\u01f8\u1f27\13\u01f8\3\u01f9\3\u01f9\3\u01f9")
        buf.write("\7\u01f9\u1f2c\n\u01f9\f\u01f9\16\u01f9\u1f2f\13\u01f9")
        buf.write("\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1f34\n\u01fa\3\u01fb")
        buf.write("\3\u01fb\3\u01fb\5\u01fb\u1f39\n\u01fb\3\u01fc\3\u01fc")
        buf.write("\3\u01fc\5\u01fc\u1f3e\n\u01fc\3\u01fd\3\u01fd\5\u01fd")
        buf.write("\u1f42\n\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff\5\u01ff")
        buf.write("\u1f48\n\u01ff\3\u0200\3\u0200\5\u0200\u1f4c\n\u0200\3")
        buf.write("\u0201\3\u0201\3\u0201\5\u0201\u1f51\n\u0201\3\u0202\3")
        buf.write("\u0202\3\u0203\3\u0203\3\u0203\7\u0203\u1f58\n\u0203\f")
        buf.write("\u0203\16\u0203\u1f5b\13\u0203\3\u0204\3\u0204\3\u0205")
        buf.write("\3\u0205\3\u0205\3\u0205\5\u0205\u1f63\n\u0205\3\u0206")
        buf.write("\3\u0206\3\u0206\7\u0206\u1f68\n\u0206\f\u0206\16\u0206")
        buf.write("\u1f6b\13\u0206\3\u0207\3\u0207\3\u0208\3\u0208\3\u0208")
        buf.write("\3\u0208\3\u0208\3\u0208\3\u0208\5\u0208\u1f76\n\u0208")
        buf.write("\3\u0209\3\u0209\5\u0209\u1f7a\n\u0209\3\u0209\3\u0209")
        buf.write("\7\u0209\u1f7e\n\u0209\f\u0209\16\u0209\u1f81\13\u0209")
        buf.write("\3\u0209\3\u0209\5\u0209\u1f85\n\u0209\3\u020a\3\u020a")
        buf.write("\3\u020a\5\u020a\u1f8a\n\u020a\5\u020a\u1f8c\n\u020a\3")
        buf.write("\u020a\3\u020a\3\u020a\5\u020a\u1f91\n\u020a\7\u020a\u1f93")
        buf.write("\n\u020a\f\u020a\16\u020a\u1f96\13\u020a\3\u020a\3\u020a")
        buf.write("\5\u020a\u1f9a\n\u020a\3\u020b\3\u020b\3\u020b\3\u020b")
        buf.write("\3\u020b\5\u020b\u1fa1\n\u020b\3\u020b\3\u020b\3\u020b")
        buf.write("\5\u020b\u1fa6\n\u020b\5\u020b\u1fa8\n\u020b\5\u020b\u1faa")
        buf.write("\n\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b")
        buf.write("\3\u020b\3\u020b\5\u020b\u1fb4\n\u020b\3\u020b\3\u020b")
        buf.write("\3\u020b\5\u020b\u1fb9\n\u020b\7\u020b\u1fbb\n\u020b\f")
        buf.write("\u020b\16\u020b\u1fbe\13\u020b\5\u020b\u1fc0\n\u020b\3")
        buf.write("\u020b\3\u020b\5\u020b\u1fc4\n\u020b\3\u020c\3\u020c\3")
        buf.write("\u020c\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1fcd\n")
        buf.write("\u020d\3\u020d\3\u020d\3\u020e\3\u020e\5\u020e\u1fd3\n")
        buf.write("\u020e\3\u020e\3\u020e\5\u020e\u1fd7\n\u020e\5\u020e\u1fd9")
        buf.write("\n\u020e\3\u020f\3\u020f\5\u020f\u1fdd\n\u020f\3\u020f")
        buf.write("\3\u020f\5\u020f\u1fe1\n\u020f\3\u020f\3\u020f\5\u020f")
        buf.write("\u1fe5\n\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\5\u020f\u1fed\n\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\5\u020f\u1ff5\n\u020f\5\u020f")
        buf.write("\u1ff7\n\u020f\3\u0210\3\u0210\3\u0210\3\u0210\5\u0210")
        buf.write("\u1ffd\n\u0210\3\u0210\5\u0210\u2000\n\u0210\3\u0210\3")
        buf.write("\u0210\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\5\u0211\u2018\n\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\5\u0211\u201f\n\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211")
        buf.write("\5\u0211\u2040\n\u0211\3\u0212\3\u0212\3\u0212\5\u0212")
        buf.write("\u2045\n\u0212\3\u0212\5\u0212\u2048\n\u0212\3\u0212\3")
        buf.write("\u0212\3\u0212\5\u0212\u204d\n\u0212\5\u0212\u204f\n\u0212")
        buf.write("\3\u0212\3\u0212\7\u0212\u2053\n\u0212\f\u0212\16\u0212")
        buf.write("\u2056\13\u0212\3\u0213\3\u0213\3\u0213\3\u0213\5\u0213")
        buf.write("\u205c\n\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u2063\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u2069\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u206f\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u2075\n\u0215\3\u0215\3\u0215\3\u0215\5\u0215")
        buf.write("\u207a\n\u0215\5\u0215\u207c\n\u0215\3\u0215\5\u0215\u207f")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u2089\n\u0215\3\u0215\5\u0215")
        buf.write("\u208c\n\u0215\5\u0215\u208e\n\u0215\5\u0215\u2090\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u209e")
        buf.write("\n\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0217\3\u0218")
        buf.write("\3\u0218\3\u0219\3\u0219\3\u021a\3\u021a\5\u021a\u20ab")
        buf.write("\n\u021a\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b")
        buf.write("\3\u021b\5\u021b\u20b4\n\u021b\3\u021c\3\u021c\3\u021c")
        buf.write("\5\u021c\u20b9\n\u021c\3\u021d\3\u021d\3\u021d\5\u021d")
        buf.write("\u20be\n\u021d\3\u021e\3\u021e\3\u021e\5\u021e\u20c3\n")
        buf.write("\u021e\3\u021f\3\u021f\3\u021f\3\u021f\3\u0220\3\u0220")
        buf.write("\3\u0220\2\b\u0296\u02a2\u0346\u0358\u0368\u037e\u0221")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write("\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4")
        buf.write("\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6")
        buf.write("\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8")
        buf.write("\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea")
        buf.write("\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc")
        buf.write("\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e")
        buf.write("\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220")
        buf.write("\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232")
        buf.write("\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244")
        buf.write("\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256")
        buf.write("\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268")
        buf.write("\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a")
        buf.write("\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c")
        buf.write("\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e")
        buf.write("\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0")
        buf.write("\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2")
        buf.write("\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4")
        buf.write("\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6")
        buf.write("\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8")
        buf.write("\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a")
        buf.write("\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c")
        buf.write("\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e")
        buf.write("\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340")
        buf.write("\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352")
        buf.write("\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364")
        buf.write("\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376")
        buf.write("\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388")
        buf.write("\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a")
        buf.write("\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac")
        buf.write("\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be")
        buf.write("\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0")
        buf.write("\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2")
        buf.write("\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4")
        buf.write("\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406")
        buf.write("\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418")
        buf.write("\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a")
        buf.write("\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c")
        buf.write("\u043e\2s\3\2\u0293\u0293\4\2fg\u0117\u0117\3\2\u0243")
        buf.write("\u0244\4\288\u0141\u0141\4\2\u008d\u008d\u009b\u009b\5")
        buf.write("\2SS\u00b4\u00b4\u00c1\u00c1\4\2NN\u0088\u0088\4\2\u010e")
        buf.write("\u010e\u011f\u011f\4\2\u009f\u009f\u021b\u021b\4\2\u0085")
        buf.write("\u0085\u00da\u00da\t\2\u0087\u0087\u00ec\u00ec\u01a3\u01a3")
        buf.write("\u01ce\u01ce\u0217\u0217\u021a\u021a\u0226\u0226\4\2+")
        buf.write("+\u0220\u0220\4\2\u0152\u0152\u01e6\u01e6\4\2\u00f6\u00f6")
        buf.write("\u023b\u023b\4\2\27\27\u008a\u008a\5\2\62\62\u0102\u0102")
        buf.write("\u0213\u0213\4\2!!\u01cb\u01cb\4\2\24\24\u0195\u0195\4")
        buf.write("\2\u00d3\u00d3\u011b\u011b\4\2\u0087\u0087\u018f\u018f")
        buf.write("\4\2\u0082\u0082\u00c1\u00c1\4\2\u0150\u0150\u01bd\u01bd")
        buf.write("\4\2\u0221\u0221\u0281\u0281\5\2\u0082\u0082\u00fc\u00fc")
        buf.write("\u019f\u019f\5\2\u0082\u0082\u00fc\u00fc\u014b\u014b\5")
        buf.write("\2\u00b6\u00b6\u0115\u0115\u0146\u0146\4\2\u00ca\u00ca")
        buf.write("\u010e\u010e\4\2\u0111\u0111\u022e\u022e\4\2\u014f\u014f")
        buf.write("\u01aa\u01aa\4\2\u0154\u0154\u022d\u022d\4\2\u0081\u0081")
        buf.write("\u00fd\u00fd\5\2\u00d3\u00d3\u011b\u011b\u0124\u0124\4")
        buf.write("\2\u0110\u0110\u0200\u0200\4\2\r\r\u008e\u008e\4\2\u0093")
        buf.write("\u0093\u00fc\u00fc\4\2\u0128\u0128\u0149\u0149\4\2\u0093")
        buf.write("\u0093\u01d6\u01d6\4\2\u00c5\u00c5\u017f\u017f\4\2\26")
        buf.write("\26\u00f7\u00f7\4\2\n\n\u0182\u0182\4\2\u00d0\u00d0\u0197")
        buf.write("\u0197\4\2GG\u016b\u016b\5\2\60\60\u0173\u0173\u01e8\u01e8")
        buf.write("\4\2\b\b##\5\2\u0087\u0087\u00ec\u00ec\u0226\u0226\5\2")
        buf.write("\u013d\u013d\u0162\u0162\u0177\u0177\4\2\u00c1\u00c1\u022d")
        buf.write("\u022d\4\2\60\60\u01e8\u01e8\4\2\7\7\u0093\u0093\5\2\7")
        buf.write("\7\u0093\u0093\u012f\u012f\5\2nn\u016a\u016a\u01e9\u01e9")
        buf.write("\4\2\u011d\u011d\u016b\u016b\4\2\u0125\u0125\u01f0\u01f0")
        buf.write("\5\2\u00b7\u00b7\u00ee\u00ee\u0172\u0172\4\2ll\u0086\u0086")
        buf.write("\6\2\u00db\u00db\u00eb\u00eb\u0143\u0143\u016e\u016e\4")
        buf.write("\2\u0082\u0082\u0290\u0290\3\2\u0180\u0181\3\3\u0293\u0293")
        buf.write("\3\2\u01b2\u01b3\4\2\u0165\u0165\u0247\u0247\3\2Z[\4\2")
        buf.write("\u0155\u0155\u023c\u023c\4\2\"\"\u00da\u00da\4\2\63\63")
        buf.write("\u0089\u0089\6\2\u00a5\u00a5\u00f2\u00f2\u0129\u0129\u021f")
        buf.write("\u021f\5\2\13\13\u0090\u0090\u0220\u0220\5\2\u00c7\u00c7")
        buf.write("\u0103\u0103\u01b8\u01b8\4\2\u01c7\u01c7\u0208\u0208\5")
        buf.write("\2\u01c7\u01c7\u01e4\u01e4\u0208\u0208\4\2\u00a9\u00a9")
        buf.write("\u00dc\u00dc\4\2jj\u01bb\u01bb\4\2\u00d8\u00d8\u00fc\u00fc")
        buf.write("\4\2\13\13\u0227\u0227\4\2\36\36\u01d1\u01d1\4\2\u00b8")
        buf.write("\u00b8\u0100\u0100\4\2\13\13\u00b8\u00b8\4\2\u01ff\u01ff")
        buf.write("\u0205\u0205\4\2\u0125\u0125\u01f5\u01f5\4\2\u00d9\u00d9")
        buf.write("\u0108\u010b\5\2\u0285\u0285\u028a\u028a\u028e\u028e\3")
        buf.write("\2\u028b\u028c\4\2\177\177\u00de\u00de\6\2\13\13\22\22")
        buf.write("\u00ac\u00ac\u01e5\u01e5\4\2==\u024c\u024c\4\2\u0090\u0090")
        buf.write("\u0220\u0220\4\2::QQ\4\2\u00b9\u00b9\u0101\u0101\4\2?")
        buf.write("?\u0139\u0139\4\2\u024d\u024d\u0250\u0250\4\2\u00a0\u00a0")
        buf.write("\u0145\u0145\4\2\u00a4\u00a4\u0133\u0133\4\2]]\u0091\u0091")
        buf.write("\4\2\u00d2\u00d2\u01da\u01da\3\2\u026c\u027b\3\2\u0265")
        buf.write("\u026b\3\2\u025f\u0264\4\2\u0197\u0197\u01bf\u01bf\4\2")
        buf.write("\u00bd\u00bd\u018c\u018c\4\2\u0151\u0151\u01c6\u01c6\4")
        buf.write("\2\u016d\u016d\u01ea\u01ea\5\2\u00b2\u00b2\u01fb\u01fb")
        buf.write("\u023d\u023d\4\2NN\u01ba\u01ba\5\2NN\u014b\u014b\u01ba")
        buf.write("\u01ba\4\2\u0178\u0178\u01f6\u01f6\4\2\u00d8\u00d8\u01ad")
        buf.write("\u01ad\4\2tt\u025b\u025b\4\2\u0130\u0130\u01ca\u01ca\4")
        buf.write("\2\66\66>>\6\2tt\u00d4\u00d4\u012a\u012a\u01ca\u01ca\3")
        buf.write("\2\u0281\u0282\4\2\u027c\u027c\u0283\u0283\u0082\2\6\n")
        buf.write("\20\20\25\25\30\37\"#&&(*-\62\64\64\66\679;=@CCEIKKMO")
        buf.write("QTVVYdijlqsxz{}\177\u0083\u0083\u0085\u0086\u0088\u0088")
        buf.write("\u008b\u008d\u008f\u008f\u0091\u0092\u0094\u0097\u009a")
        buf.write("\u009c\u009f\u00a4\u00a6\u00a9\u00ab\u00ab\u00ad\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b4\u00b7\u00b9\u00bc\u00be\u00c0")
        buf.write("\u00c1\u00c7\u00c8\u00cf\u00d0\u00d2\u00d2\u00d4\u00d4")
        buf.write("\u00d8\u00d8\u00da\u00da\u00dc\u00df\u00e1\u00e1\u00e3")
        buf.write("\u00e5\u00e9\u00eb\u00ee\u00f1\u00f3\u00f3\u00f5\u00f5")
        buf.write("\u00f8\u00fc\u00ff\u0103\u0105\u0105\u0107\u0107\u0109")
        buf.write("\u010e\u0113\u0114\u0116\u0116\u0118\u011a\u011c\u011d")
        buf.write("\u011f\u0120\u0122\u0123\u0125\u0126\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u013d\u013f\u0140\u0143\u0145\u014b\u014b")
        buf.write("\u0151\u0151\u0156\u0156\u0158\u015d\u015f\u0160\u0162")
        buf.write("\u0162\u0165\u0166\u016a\u016a\u016c\u0170\u0172\u0173")
        buf.write("\u0175\u017a\u0182\u0182\u0184\u0185\u0188\u018e\u0193")
        buf.write("\u0193\u0196\u0199\u019b\u019b\u019d\u019d\u01a0\u01a2")
        buf.write("\u01a4\u01a6\u01a9\u01a9\u01ab\u01b0\u01b2\u01b5\u01b7")
        buf.write("\u01bc\u01be\u01c0\u01c2\u01c7\u01ca\u01ca\u01cc\u01cd")
        buf.write("\u01cf\u01cf\u01d1\u01d8\u01da\u01da\u01dc\u01e5\u01e8")
        buf.write("\u01eb\u01ed\u01f1\u01f4\u01f6\u01f8\u01fb\u01fd\u01fd")
        buf.write("\u0200\u0200\u0207\u020f\u0211\u0218\u021a\u021e\u0221")
        buf.write("\u0221\u0223\u0223\u0227\u0227\u0229\u022b\u022d\u022e")
        buf.write("\u0230\u0233\u0235\u0239\u023c\u023e\u0240\u0240\u0242")
        buf.write("\u0242\u0244\u0247\u0249\u0250\u0252\u0256\u0258\u0259")
        buf.write("\u025b\u027b\u02a6\u02a6\2\u253d\2\u0441\3\2\2\2\4\u0448")
        buf.write("\3\2\2\2\6\u045e\3\2\2\2\b\u0462\3\2\2\2\n\u046a\3\2\2")
        buf.write("\2\f\u048a\3\2\2\2\16\u048c\3\2\2\2\20\u0499\3\2\2\2\22")
        buf.write("\u049b\3\2\2\2\24\u04a0\3\2\2\2\26\u0507\3\2\2\2\30\u0509")
        buf.write("\3\2\2\2\32\u054e\3\2\2\2\34\u0554\3\2\2\2\36\u0558\3")
        buf.write("\2\2\2 \u0570\3\2\2\2\"\u0572\3\2\2\2$\u0586\3\2\2\2&")
        buf.write("\u0595\3\2\2\2(\u059d\3\2\2\2*\u05ad\3\2\2\2,\u05b1\3")
        buf.write("\2\2\2.\u05b6\3\2\2\2\60\u05b8\3\2\2\2\62\u05ba\3\2\2")
        buf.write("\2\64\u05c1\3\2\2\2\66\u05c3\3\2\2\28\u05d9\3\2\2\2:\u05e8")
        buf.write("\3\2\2\2<\u05ea\3\2\2\2>\u05fb\3\2\2\2@\u060f\3\2\2\2")
        buf.write("B\u0615\3\2\2\2D\u067c\3\2\2\2F\u067e\3\2\2\2H\u0686\3")
        buf.write("\2\2\2J\u06ab\3\2\2\2L\u06bc\3\2\2\2N\u06be\3\2\2\2P\u06d6")
        buf.write("\3\2\2\2R\u06d8\3\2\2\2T\u06dd\3\2\2\2V\u06e6\3\2\2\2")
        buf.write("X\u070b\3\2\2\2Z\u070d\3\2\2\2\\\u0714\3\2\2\2^\u072d")
        buf.write("\3\2\2\2`\u076a\3\2\2\2b\u0779\3\2\2\2d\u07b9\3\2\2\2")
        buf.write("f\u07bb\3\2\2\2h\u07bd\3\2\2\2j\u07ce\3\2\2\2l\u07d2\3")
        buf.write("\2\2\2n\u07d4\3\2\2\2p\u07ec\3\2\2\2r\u07f5\3\2\2\2t\u0804")
        buf.write("\3\2\2\2v\u0828\3\2\2\2x\u0854\3\2\2\2z\u088c\3\2\2\2")
        buf.write("|\u0890\3\2\2\2~\u08cb\3\2\2\2\u0080\u08cd\3\2\2\2\u0082")
        buf.write("\u08e4\3\2\2\2\u0084\u08f6\3\2\2\2\u0086\u08fd\3\2\2\2")
        buf.write("\u0088\u0927\3\2\2\2\u008a\u0929\3\2\2\2\u008c\u092f\3")
        buf.write("\2\2\2\u008e\u0942\3\2\2\2\u0090\u0944\3\2\2\2\u0092\u0959")
        buf.write("\3\2\2\2\u0094\u095f\3\2\2\2\u0096\u0967\3\2\2\2\u0098")
        buf.write("\u0972\3\2\2\2\u009a\u0976\3\2\2\2\u009c\u0997\3\2\2\2")
        buf.write("\u009e\u099b\3\2\2\2\u00a0\u09a4\3\2\2\2\u00a2\u09a6\3")
        buf.write("\2\2\2\u00a4\u09bd\3\2\2\2\u00a6\u09bf\3\2\2\2\u00a8\u09e4")
        buf.write("\3\2\2\2\u00aa\u09fc\3\2\2\2\u00ac\u0a00\3\2\2\2\u00ae")
        buf.write("\u0a10\3\2\2\2\u00b0\u0a14\3\2\2\2\u00b2\u0a1c\3\2\2\2")
        buf.write("\u00b4\u0a20\3\2\2\2\u00b6\u0a31\3\2\2\2\u00b8\u0a35\3")
        buf.write("\2\2\2\u00ba\u0a3f\3\2\2\2\u00bc\u0a48\3\2\2\2\u00be\u0a5f")
        buf.write("\3\2\2\2\u00c0\u0a7a\3\2\2\2\u00c2\u0a7e\3\2\2\2\u00c4")
        buf.write("\u0a86\3\2\2\2\u00c6\u0a8d\3\2\2\2\u00c8\u0a91\3\2\2\2")
        buf.write("\u00ca\u0aa1\3\2\2\2\u00cc\u0ac8\3\2\2\2\u00ce\u0af2\3")
        buf.write("\2\2\2\u00d0\u0af6\3\2\2\2\u00d2\u0b04\3\2\2\2\u00d4\u0b0e")
        buf.write("\3\2\2\2\u00d6\u0b10\3\2\2\2\u00d8\u0b3a\3\2\2\2\u00da")
        buf.write("\u0b49\3\2\2\2\u00dc\u0b5d\3\2\2\2\u00de\u0b76\3\2\2\2")
        buf.write("\u00e0\u0b85\3\2\2\2\u00e2\u0b8d\3\2\2\2\u00e4\u0bb6\3")
        buf.write("\2\2\2\u00e6\u0bbd\3\2\2\2\u00e8\u0bc6\3\2\2\2\u00ea\u0be8")
        buf.write("\3\2\2\2\u00ec\u0bf0\3\2\2\2\u00ee\u0bf8\3\2\2\2\u00f0")
        buf.write("\u0bff\3\2\2\2\u00f2\u0c01\3\2\2\2\u00f4\u0c19\3\2\2\2")
        buf.write("\u00f6\u0c41\3\2\2\2\u00f8\u0c52\3\2\2\2\u00fa\u0c68\3")
        buf.write("\2\2\2\u00fc\u0c90\3\2\2\2\u00fe\u0ca4\3\2\2\2\u0100\u0cb7")
        buf.write("\3\2\2\2\u0102\u0cbd\3\2\2\2\u0104\u0ccc\3\2\2\2\u0106")
        buf.write("\u0ce5\3\2\2\2\u0108\u0cea\3\2\2\2\u010a\u0cf5\3\2\2\2")
        buf.write("\u010c\u0cf7\3\2\2\2\u010e\u0d3c\3\2\2\2\u0110\u0d43\3")
        buf.write("\2\2\2\u0112\u0d4c\3\2\2\2\u0114\u0d5a\3\2\2\2\u0116\u0d9e")
        buf.write("\3\2\2\2\u0118\u0db0\3\2\2\2\u011a\u0dba\3\2\2\2\u011c")
        buf.write("\u0dce\3\2\2\2\u011e\u0de1\3\2\2\2\u0120\u0e07\3\2\2\2")
        buf.write("\u0122\u0e09\3\2\2\2\u0124\u0e19\3\2\2\2\u0126\u0e1f\3")
        buf.write("\2\2\2\u0128\u0e29\3\2\2\2\u012a\u0e31\3\2\2\2\u012c\u0e37")
        buf.write("\3\2\2\2\u012e\u0e3f\3\2\2\2\u0130\u0e43\3\2\2\2\u0132")
        buf.write("\u0e53\3\2\2\2\u0134\u0e55\3\2\2\2\u0136\u0e69\3\2\2\2")
        buf.write("\u0138\u0e71\3\2\2\2\u013a\u0ea5\3\2\2\2\u013c\u0ea7\3")
        buf.write("\2\2\2\u013e\u0ea9\3\2\2\2\u0140\u0eab\3\2\2\2\u0142\u0ebf")
        buf.write("\3\2\2\2\u0144\u0ec5\3\2\2\2\u0146\u0ed2\3\2\2\2\u0148")
        buf.write("\u0ed6\3\2\2\2\u014a\u0ef2\3\2\2\2\u014c\u0f02\3\2\2\2")
        buf.write("\u014e\u0f12\3\2\2\2\u0150\u0f28\3\2\2\2\u0152\u0f72\3")
        buf.write("\2\2\2\u0154\u0f74\3\2\2\2\u0156\u0f7c\3\2\2\2\u0158\u0f7e")
        buf.write("\3\2\2\2\u015a\u0f80\3\2\2\2\u015c\u0f88\3\2\2\2\u015e")
        buf.write("\u0f8a\3\2\2\2\u0160\u0fab\3\2\2\2\u0162\u0faf\3\2\2\2")
        buf.write("\u0164\u0fb3\3\2\2\2\u0166\u0fc9\3\2\2\2\u0168\u0ffb\3")
        buf.write("\2\2\2\u016a\u0fff\3\2\2\2\u016c\u1017\3\2\2\2\u016e\u101b")
        buf.write("\3\2\2\2\u0170\u1027\3\2\2\2\u0172\u1035\3\2\2\2\u0174")
        buf.write("\u103c\3\2\2\2\u0176\u1050\3\2\2\2\u0178\u105a\3\2\2\2")
        buf.write("\u017a\u106b\3\2\2\2\u017c\u1083\3\2\2\2\u017e\u1085\3")
        buf.write("\2\2\2\u0180\u1096\3\2\2\2\u0182\u10b9\3\2\2\2\u0184\u10bb")
        buf.write("\3\2\2\2\u0186\u10bf\3\2\2\2\u0188\u10d5\3\2\2\2\u018a")
        buf.write("\u10f8\3\2\2\2\u018c\u10fc\3\2\2\2\u018e\u1113\3\2\2\2")
        buf.write("\u0190\u112a\3\2\2\2\u0192\u1133\3\2\2\2\u0194\u113c\3")
        buf.write("\2\2\2\u0196\u1145\3\2\2\2\u0198\u1149\3\2\2\2\u019a\u114e")
        buf.write("\3\2\2\2\u019c\u1166\3\2\2\2\u019e\u1168\3\2\2\2\u01a0")
        buf.write("\u116c\3\2\2\2\u01a2\u11a0\3\2\2\2\u01a4\u11bc\3\2\2\2")
        buf.write("\u01a6\u11be\3\2\2\2\u01a8\u11cc\3\2\2\2\u01aa\u11d8\3")
        buf.write("\2\2\2\u01ac\u11dd\3\2\2\2\u01ae\u11e3\3\2\2\2\u01b0\u11e6")
        buf.write("\3\2\2\2\u01b2\u11ef\3\2\2\2\u01b4\u11fc\3\2\2\2\u01b6")
        buf.write("\u120d\3\2\2\2\u01b8\u121e\3\2\2\2\u01ba\u1226\3\2\2\2")
        buf.write("\u01bc\u122b\3\2\2\2\u01be\u123b\3\2\2\2\u01c0\u123f\3")
        buf.write("\2\2\2\u01c2\u1257\3\2\2\2\u01c4\u125a\3\2\2\2\u01c6\u1260")
        buf.write("\3\2\2\2\u01c8\u126a\3\2\2\2\u01ca\u1273\3\2\2\2\u01cc")
        buf.write("\u128f\3\2\2\2\u01ce\u1295\3\2\2\2\u01d0\u1298\3\2\2\2")
        buf.write("\u01d2\u129f\3\2\2\2\u01d4\u12a7\3\2\2\2\u01d6\u12b3\3")
        buf.write("\2\2\2\u01d8\u12b5\3\2\2\2\u01da\u12b9\3\2\2\2\u01dc\u12bf")
        buf.write("\3\2\2\2\u01de\u12db\3\2\2\2\u01e0\u12fd\3\2\2\2\u01e2")
        buf.write("\u132d\3\2\2\2\u01e4\u1337\3\2\2\2\u01e6\u1339\3\2\2\2")
        buf.write("\u01e8\u133e\3\2\2\2\u01ea\u134c\3\2\2\2\u01ec\u134e\3")
        buf.write("\2\2\2\u01ee\u1353\3\2\2\2\u01f0\u1363\3\2\2\2\u01f2\u1384")
        buf.write("\3\2\2\2\u01f4\u13a7\3\2\2\2\u01f6\u13ab\3\2\2\2\u01f8")
        buf.write("\u13ba\3\2\2\2\u01fa\u13bc\3\2\2\2\u01fc\u13bf\3\2\2\2")
        buf.write("\u01fe\u13c3\3\2\2\2\u0200\u13cb\3\2\2\2\u0202\u13e5\3")
        buf.write("\2\2\2\u0204\u13e7\3\2\2\2\u0206\u13eb\3\2\2\2\u0208\u13ee")
        buf.write("\3\2\2\2\u020a\u13f2\3\2\2\2\u020c\u13f7\3\2\2\2\u020e")
        buf.write("\u13fb\3\2\2\2\u0210\u140c\3\2\2\2\u0212\u1419\3\2\2\2")
        buf.write("\u0214\u142a\3\2\2\2\u0216\u1437\3\2\2\2\u0218\u1443\3")
        buf.write("\2\2\2\u021a\u1445\3\2\2\2\u021c\u1453\3\2\2\2\u021e\u1464")
        buf.write("\3\2\2\2\u0220\u147d\3\2\2\2\u0222\u1487\3\2\2\2\u0224")
        buf.write("\u148b\3\2\2\2\u0226\u14b0\3\2\2\2\u0228\u14b2\3\2\2\2")
        buf.write("\u022a\u14cb\3\2\2\2\u022c\u14d6\3\2\2\2\u022e\u14dd\3")
        buf.write("\2\2\2\u0230\u14e1\3\2\2\2\u0232\u14f3\3\2\2\2\u0234\u14fb")
        buf.write("\3\2\2\2\u0236\u1506\3\2\2\2\u0238\u150d\3\2\2\2\u023a")
        buf.write("\u1511\3\2\2\2\u023c\u1531\3\2\2\2\u023e\u1535\3\2\2\2")
        buf.write("\u0240\u153a\3\2\2\2\u0242\u1542\3\2\2\2\u0244\u154a\3")
        buf.write("\2\2\2\u0246\u154d\3\2\2\2\u0248\u155d\3\2\2\2\u024a\u1562")
        buf.write("\3\2\2\2\u024c\u1566\3\2\2\2\u024e\u158a\3\2\2\2\u0250")
        buf.write("\u158c\3\2\2\2\u0252\u15a2\3\2\2\2\u0254\u15a4\3\2\2\2")
        buf.write("\u0256\u15a9\3\2\2\2\u0258\u15ab\3\2\2\2\u025a\u15ad\3")
        buf.write("\2\2\2\u025c\u15af\3\2\2\2\u025e\u15b3\3\2\2\2\u0260\u15b8")
        buf.write("\3\2\2\2\u0262\u15be\3\2\2\2\u0264\u15cc\3\2\2\2\u0266")
        buf.write("\u15e0\3\2\2\2\u0268\u15e5\3\2\2\2\u026a\u15f2\3\2\2\2")
        buf.write("\u026c\u15f4\3\2\2\2\u026e\u1602\3\2\2\2\u0270\u160c\3")
        buf.write("\2\2\2\u0272\u1612\3\2\2\2\u0274\u1614\3\2\2\2\u0276\u1617")
        buf.write("\3\2\2\2\u0278\u161c\3\2\2\2\u027a\u1634\3\2\2\2\u027c")
        buf.write("\u1643\3\2\2\2\u027e\u1645\3\2\2\2\u0280\u165a\3\2\2\2")
        buf.write("\u0282\u1669\3\2\2\2\u0284\u167f\3\2\2\2\u0286\u1686\3")
        buf.write("\2\2\2\u0288\u1693\3\2\2\2\u028a\u1696\3\2\2\2\u028c\u16ab")
        buf.write("\3\2\2\2\u028e\u16af\3\2\2\2\u0290\u16b8\3\2\2\2\u0292")
        buf.write("\u16c9\3\2\2\2\u0294\u16f4\3\2\2\2\u0296\u170a\3\2\2\2")
        buf.write("\u0298\u1717\3\2\2\2\u029a\u171b\3\2\2\2\u029c\u174f\3")
        buf.write("\2\2\2\u029e\u1751\3\2\2\2\u02a0\u175a\3\2\2\2\u02a2\u1771")
        buf.write("\3\2\2\2\u02a4\u1784\3\2\2\2\u02a6\u1787\3\2\2\2\u02a8")
        buf.write("\u1795\3\2\2\2\u02aa\u1798\3\2\2\2\u02ac\u17af\3\2\2\2")
        buf.write("\u02ae\u17b1\3\2\2\2\u02b0\u17ca\3\2\2\2\u02b2\u17cc\3")
        buf.write("\2\2\2\u02b4\u17dd\3\2\2\2\u02b6\u17e4\3\2\2\2\u02b8\u17f3")
        buf.write("\3\2\2\2\u02ba\u180a\3\2\2\2\u02bc\u1810\3\2\2\2\u02be")
        buf.write("\u1812\3\2\2\2\u02c0\u182a\3\2\2\2\u02c2\u1842\3\2\2\2")
        buf.write("\u02c4\u1866\3\2\2\2\u02c6\u1868\3\2\2\2\u02c8\u186c\3")
        buf.write("\2\2\2\u02ca\u1879\3\2\2\2\u02cc\u187b\3\2\2\2\u02ce\u1887")
        buf.write("\3\2\2\2\u02d0\u1897\3\2\2\2\u02d2\u1899\3\2\2\2\u02d4")
        buf.write("\u189c\3\2\2\2\u02d6\u18b6\3\2\2\2\u02d8\u18b8\3\2\2\2")
        buf.write("\u02da\u18bc\3\2\2\2\u02dc\u18cb\3\2\2\2\u02de\u18d7\3")
        buf.write("\2\2\2\u02e0\u18df\3\2\2\2\u02e2\u18e3\3\2\2\2\u02e4\u18ee")
        buf.write("\3\2\2\2\u02e6\u18f3\3\2\2\2\u02e8\u1900\3\2\2\2\u02ea")
        buf.write("\u1914\3\2\2\2\u02ec\u191d\3\2\2\2\u02ee\u191f\3\2\2\2")
        buf.write("\u02f0\u1926\3\2\2\2\u02f2\u192b\3\2\2\2\u02f4\u1938\3")
        buf.write("\2\2\2\u02f6\u1940\3\2\2\2\u02f8\u1948\3\2\2\2\u02fa\u1956")
        buf.write("\3\2\2\2\u02fc\u1958\3\2\2\2\u02fe\u195b\3\2\2\2\u0300")
        buf.write("\u196a\3\2\2\2\u0302\u1984\3\2\2\2\u0304\u1986\3\2\2\2")
        buf.write("\u0306\u1994\3\2\2\2\u0308\u1999\3\2\2\2\u030a\u19ab\3")
        buf.write("\2\2\2\u030c\u19af\3\2\2\2\u030e\u19b7\3\2\2\2\u0310\u19c1")
        buf.write("\3\2\2\2\u0312\u19c9\3\2\2\2\u0314\u19cf\3\2\2\2\u0316")
        buf.write("\u19d4\3\2\2\2\u0318\u19dd\3\2\2\2\u031a\u19f6\3\2\2\2")
        buf.write("\u031c\u1a09\3\2\2\2\u031e\u1a0d\3\2\2\2\u0320\u1a10\3")
        buf.write("\2\2\2\u0322\u1a22\3\2\2\2\u0324\u1a27\3\2\2\2\u0326\u1a3a")
        buf.write("\3\2\2\2\u0328\u1a3c\3\2\2\2\u032a\u1a4c\3\2\2\2\u032c")
        buf.write("\u1a54\3\2\2\2\u032e\u1a59\3\2\2\2\u0330\u1a64\3\2\2\2")
        buf.write("\u0332\u1a6f\3\2\2\2\u0334\u1a72\3\2\2\2\u0336\u1a84\3")
        buf.write("\2\2\2\u0338\u1a86\3\2\2\2\u033a\u1a95\3\2\2\2\u033c\u1aa0")
        buf.write("\3\2\2\2\u033e\u1aae\3\2\2\2\u0340\u1ab3\3\2\2\2\u0342")
        buf.write("\u1ab8\3\2\2\2\u0344\u1ac5\3\2\2\2\u0346\u1ad1\3\2\2\2")
        buf.write("\u0348\u1b0b\3\2\2\2\u034a\u1b28\3\2\2\2\u034c\u1b2c\3")
        buf.write("\2\2\2\u034e\u1b34\3\2\2\2\u0350\u1b36\3\2\2\2\u0352\u1b38")
        buf.write("\3\2\2\2\u0354\u1b3b\3\2\2\2\u0356\u1b3f\3\2\2\2\u0358")
        buf.write("\u1b47\3\2\2\2\u035a\u1b7d\3\2\2\2\u035c\u1b7f\3\2\2\2")
        buf.write("\u035e\u1b9b\3\2\2\2\u0360\u1b9d\3\2\2\2\u0362\u1bad\3")
        buf.write("\2\2\2\u0364\u1bb0\3\2\2\2\u0366\u1bb2\3\2\2\2\u0368\u1be0")
        buf.write("\3\2\2\2\u036a\u1bee\3\2\2\2\u036c\u1bf1\3\2\2\2\u036e")
        buf.write("\u1c04\3\2\2\2\u0370\u1c0c\3\2\2\2\u0372\u1c1e\3\2\2\2")
        buf.write("\u0374\u1c25\3\2\2\2\u0376\u1c3c\3\2\2\2\u0378\u1c3e\3")
        buf.write("\2\2\2\u037a\u1c42\3\2\2\2\u037c\u1c4b\3\2\2\2\u037e\u1d92")
        buf.write("\3\2\2\2\u0380\u1dae\3\2\2\2\u0382\u1db0\3\2\2\2\u0384")
        buf.write("\u1db2\3\2\2\2\u0386\u1db4\3\2\2\2\u0388\u1db6\3\2\2\2")
        buf.write("\u038a\u1dc3\3\2\2\2\u038c\u1dcc\3\2\2\2\u038e\u1dd5\3")
        buf.write("\2\2\2\u0390\u1dd7\3\2\2\2\u0392\u1de8\3\2\2\2\u0394\u1dee")
        buf.write("\3\2\2\2\u0396\u1df9\3\2\2\2\u0398\u1dfb\3\2\2\2\u039a")
        buf.write("\u1e0f\3\2\2\2\u039c\u1e1d\3\2\2\2\u039e\u1e2f\3\2\2\2")
        buf.write("\u03a0\u1e44\3\2\2\2\u03a2\u1e51\3\2\2\2\u03a4\u1e54\3")
        buf.write("\2\2\2\u03a6\u1e5d\3\2\2\2\u03a8\u1e63\3\2\2\2\u03aa\u1e6b")
        buf.write("\3\2\2\2\u03ac\u1e6e\3\2\2\2\u03ae\u1e79\3\2\2\2\u03b0")
        buf.write("\u1e81\3\2\2\2\u03b2\u1e83\3\2\2\2\u03b4\u1e8c\3\2\2\2")
        buf.write("\u03b6\u1e95\3\2\2\2\u03b8\u1e97\3\2\2\2\u03ba\u1e9d\3")
        buf.write("\2\2\2\u03bc\u1e9f\3\2\2\2\u03be\u1ead\3\2\2\2\u03c0\u1eb0")
        buf.write("\3\2\2\2\u03c2\u1eb6\3\2\2\2\u03c4\u1eb8\3\2\2\2\u03c6")
        buf.write("\u1ebd\3\2\2\2\u03c8\u1ed5\3\2\2\2\u03ca\u1ed9\3\2\2\2")
        buf.write("\u03cc\u1edb\3\2\2\2\u03ce\u1edd\3\2\2\2\u03d0\u1edf\3")
        buf.write("\2\2\2\u03d2\u1ee1\3\2\2\2\u03d4\u1ee3\3\2\2\2\u03d6\u1ee5")
        buf.write("\3\2\2\2\u03d8\u1ee7\3\2\2\2\u03da\u1ef3\3\2\2\2\u03dc")
        buf.write("\u1ef5\3\2\2\2\u03de\u1efa\3\2\2\2\u03e0\u1efc\3\2\2\2")
        buf.write("\u03e2\u1efe\3\2\2\2\u03e4\u1f00\3\2\2\2\u03e6\u1f08\3")
        buf.write("\2\2\2\u03e8\u1f0a\3\2\2\2\u03ea\u1f16\3\2\2\2\u03ec\u1f18")
        buf.write("\3\2\2\2\u03ee\u1f20\3\2\2\2\u03f0\u1f28\3\2\2\2\u03f2")
        buf.write("\u1f30\3\2\2\2\u03f4\u1f35\3\2\2\2\u03f6\u1f3a\3\2\2\2")
        buf.write("\u03f8\u1f41\3\2\2\2\u03fa\u1f43\3\2\2\2\u03fc\u1f47\3")
        buf.write("\2\2\2\u03fe\u1f4b\3\2\2\2\u0400\u1f4d\3\2\2\2\u0402\u1f52")
        buf.write("\3\2\2\2\u0404\u1f54\3\2\2\2\u0406\u1f5c\3\2\2\2\u0408")
        buf.write("\u1f5e\3\2\2\2\u040a\u1f64\3\2\2\2\u040c\u1f6c\3\2\2\2")
        buf.write("\u040e\u1f6e\3\2\2\2\u0410\u1f77\3\2\2\2\u0412\u1f86\3")
        buf.write("\2\2\2\u0414\u1f9b\3\2\2\2\u0416\u1fc5\3\2\2\2\u0418\u1fcc")
        buf.write("\3\2\2\2\u041a\u1fd8\3\2\2\2\u041c\u1ff6\3\2\2\2\u041e")
        buf.write("\u1ff8\3\2\2\2\u0420\u203f\3\2\2\2\u0422\u2044\3\2\2\2")
        buf.write("\u0424\u205b\3\2\2\2\u0426\u205d\3\2\2\2\u0428\u209d\3")
        buf.write("\2\2\2\u042a\u209f\3\2\2\2\u042c\u20a1\3\2\2\2\u042e\u20a4")
        buf.write("\3\2\2\2\u0430\u20a6\3\2\2\2\u0432\u20aa\3\2\2\2\u0434")
        buf.write("\u20b3\3\2\2\2\u0436\u20b8\3\2\2\2\u0438\u20bd\3\2\2\2")
        buf.write("\u043a\u20c2\3\2\2\2\u043c\u20c4\3\2\2\2\u043e\u20c8\3")
        buf.write("\2\2\2\u0440\u0442\n\2\2\2\u0441\u0440\3\2\2\2\u0442\u0443")
        buf.write("\3\2\2\2\u0443\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444")
        buf.write("\3\3\2\2\2\u0445\u0447\5\n\6\2\u0446\u0445\3\2\2\2\u0447")
        buf.write("\u044a\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2")
        buf.write("\u0449\u044b\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u044c\7")
        buf.write("\2\2\3\u044c\5\3\2\2\2\u044d\u0450\5\n\6\2\u044e\u0450")
        buf.write("\5\u03b0\u01d9\2\u044f\u044d\3\2\2\2\u044f\u044e\3\2\2")
        buf.write("\2\u0450\u0458\3\2\2\2\u0451\u0454\7\u0293\2\2\u0452\u0455")
        buf.write("\5\n\6\2\u0453\u0455\5\u03b0\u01d9\2\u0454\u0452\3\2\2")
        buf.write("\2\u0454\u0453\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0451")
        buf.write("\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2\u0458")
        buf.write("\u0459\3\2\2\2\u0459\u045c\3\2\2\2\u045a\u0458\3\2\2\2")
        buf.write("\u045b\u045d\7\u0293\2\2\u045c\u045b\3\2\2\2\u045c\u045d")
        buf.write("\3\2\2\2\u045d\u045f\3\2\2\2\u045e\u044f\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0461\7\2\2\3")
        buf.write("\u0461\7\3\2\2\2\u0462\u0464\7\u00ae\2\2\u0463\u0465\7")
        buf.write("\20\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write("\u0467\3\2\2\2\u0466\u0468\7\u0236\2\2\u0467\u0466\3\2")
        buf.write("\2\2\u0467\u0468\3\2\2\2\u0468\t\3\2\2\2\u0469\u046b\5")
        buf.write("\b\5\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\u046d\5\f\7\2\u046d\13\3\2\2\2\u046e\u048b")
        buf.write("\5\u0164\u00b3\2\u046f\u048b\5\u0174\u00bb\2\u0470\u048b")
        buf.write("\5\u0186\u00c4\2\u0471\u048b\5\u01fe\u0100\2\u0472\u048b")
        buf.write("\5\u018c\u00c7\2\u0473\u048b\5\u01b2\u00da\2\u0474\u048b")
        buf.write("\5\u011a\u008e\2\u0475\u048b\5\32\16\2\u0476\u048b\5\u0166")
        buf.write("\u00b4\2\u0477\u048b\5\u0188\u00c5\2\u0478\u048b\5\u0176")
        buf.write("\u00bc\2\u0479\u048b\5$\23\2\u047a\u048b\5v<\2\u047b\u048b")
        buf.write("\5\36\20\2\u047c\u048b\5\24\13\2\u047d\u048b\5\22\n\2")
        buf.write("\u047e\u048b\5\u0200\u0101\2\u047f\u048b\5\u018e\u00c8")
        buf.write("\2\u0480\u048b\5\u01c6\u00e4\2\u0481\u048b\5\16\b\2\u0482")
        buf.write("\u048b\5\u0162\u00b2\2\u0483\u048b\5\u0172\u00ba\2\u0484")
        buf.write("\u048b\5\u0184\u00c3\2\u0485\u048b\5\u01fc\u00ff\2\u0486")
        buf.write("\u048b\5\u018a\u00c6\2\u0487\u048b\5\u01b0\u00d9\2\u0488")
        buf.write("\u048b\5\u0270\u0139\2\u0489\u048b\5\u0118\u008d\2\u048a")
        buf.write("\u046e\3\2\2\2\u048a\u046f\3\2\2\2\u048a\u0470\3\2\2\2")
        buf.write("\u048a\u0471\3\2\2\2\u048a\u0472\3\2\2\2\u048a\u0473\3")
        buf.write("\2\2\2\u048a\u0474\3\2\2\2\u048a\u0475\3\2\2\2\u048a\u0476")
        buf.write("\3\2\2\2\u048a\u0477\3\2\2\2\u048a\u0478\3\2\2\2\u048a")
        buf.write("\u0479\3\2\2\2\u048a\u047a\3\2\2\2\u048a\u047b\3\2\2\2")
        buf.write("\u048a\u047c\3\2\2\2\u048a\u047d\3\2\2\2\u048a\u047e\3")
        buf.write("\2\2\2\u048a\u047f\3\2\2\2\u048a\u0480\3\2\2\2\u048a\u0481")
        buf.write("\3\2\2\2\u048a\u0482\3\2\2\2\u048a\u0483\3\2\2\2\u048a")
        buf.write("\u0484\3\2\2\2\u048a\u0485\3\2\2\2\u048a\u0486\3\2\2\2")
        buf.write("\u048a\u0487\3\2\2\2\u048a\u0488\3\2\2\2\u048a\u0489\3")
        buf.write("\2\2\2\u048b\r\3\2\2\2\u048c\u048d\7e\2\2\u048d\u048e")
        buf.write("\7\u01b9\2\2\u048e\u0497\5\u0406\u0204\2\u048f\u0491\7")
        buf.write("\u0243\2\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0493\3\2\2\2\u0492\u0494\5\20\t\2\u0493\u0492\3\2\2")
        buf.write("\2\u0494\u0495\3\2\2\2\u0495\u0493\3\2\2\2\u0495\u0496")
        buf.write("\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0490\3\2\2\2\u0497")
        buf.write("\u0498\3\2\2\2\u0498\17\3\2\2\2\u0499\u049a\t\3\2\2\u049a")
        buf.write("\21\3\2\2\2\u049b\u049c\7\u01a5\2\2\u049c\u049d\7\u015c")
        buf.write("\2\2\u049d\u049e\7\u0239\2\2\u049e\u049f\5\u0408\u0205")
        buf.write("\2\u049f\23\3\2\2\2\u04a0\u04a1\7e\2\2\u04a1\u04a2\7\u015c")
        buf.write("\2\2\u04a2\u04a3\7\u0239\2\2\u04a3\u04a6\5\u0408\u0205")
        buf.write("\2\u04a4\u04a5\7\u015e\2\2\u04a5\u04a7\5\u03ec\u01f7\2")
        buf.write("\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04bc\3")
        buf.write("\2\2\2\u04a8\u04a9\7\u0164\2\2\u04a9\u04aa\7\u018b\2\2")
        buf.write("\u04aa\u04ae\7\u01ff\2\2\u04ab\u04ac\t\4\2\2\u04ac\u04ad")
        buf.write("\7\u01a0\2\2\u04ad\u04af\7\u018d\2\2\u04ae\u04ab\3\2\2")
        buf.write("\2\u04ae\u04af\3\2\2\2\u04af\u04bd\3\2\2\2\u04b0\u04b2")
        buf.write("\5\u0092J\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2")
        buf.write("\u04b4\3\2\2\2\u04b3\u04b5\t\5\2\2\u04b4\u04b3\3\2\2\2")
        buf.write("\u04b4\u04b5\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b8\5")
        buf.write("\64\33\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8")
        buf.write("\u04ba\3\2\2\2\u04b9\u04bb\5\30\r\2\u04ba\u04b9\3\2\2")
        buf.write("\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04a8")
        buf.write("\3\2\2\2\u04bc\u04b1\3\2\2\2\u04bd\u04cf\3\2\2\2\u04be")
        buf.write("\u04bf\7\u022c\2\2\u04bf\u04c9\7\u00e0\2\2\u04c0\u04c4")
        buf.write("\5\u0098M\2\u04c1\u04c2\7\u0201\2\2\u04c2\u04c4\5\u0432")
        buf.write("\u021a\2\u04c3\u04c0\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4")
        buf.write("\u04c5\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2")
        buf.write("\u04c6\u04c8\3\2\2\2\u04c7\u04c3\3\2\2\2\u04c8\u04cb\3")
        buf.write("\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04d0")
        buf.write("\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04cd\7\u022c\2\2\u04cd")
        buf.write("\u04ce\7\u013f\2\2\u04ce\u04d0\7\u00e0\2\2\u04cf\u04be")
        buf.write("\3\2\2\2\u04cf\u04cc\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0")
        buf.write("\u04d2\3\2\2\2\u04d1\u04d3\5\26\f\2\u04d2\u04d1\3\2\2")
        buf.write("\2\u04d2\u04d3\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d5")
        buf.write("\7\u00bf\2\2\u04d5\u04d7\7\u0226\2\2\u04d6\u04d4\3\2\2")
        buf.write("\2\u04d6\u04d7\3\2\2\2\u04d7\u04db\3\2\2\2\u04d8\u04d9")
        buf.write("\t\6\2\2\u04d9\u04da\7\u0195\2\2\u04da\u04dc\7\u01b7\2")
        buf.write("\2\u04db\u04d8\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\7\26\2\2\u04de\u04df\5\u0296\u014c")
        buf.write("\2\u04df\25\3\2\2\2\u04e0\u04e1\7\u013c\2\2\u04e1\u0508")
        buf.write("\7\u01a5\2\2\u04e2\u0503\7\u01a5\2\2\u04e3\u0504\t\7\2")
        buf.write("\2\u04e4\u04e5\7\u0164\2\2\u04e5\u0504\t\b\2\2\u04e6\u04e7")
        buf.write("\7\u01ec\2\2\u04e7\u04ea\7\u0243\2\2\u04e8\u04ea\7\u013e")
        buf.write("\2\2\u04e9\u04e6\3\2\2\2\u04e9\u04e8\3\2\2\2\u04ea\u0504")
        buf.write("\3\2\2\2\u04eb\u04ef\7\u0243\2\2\u04ec\u04ed\7\u0190\2")
        buf.write("\2\u04ed\u04f0\7\u00fe\2\2\u04ee\u04f0\7\u01be\2\2\u04ef")
        buf.write("\u04ec\3\2\2\2\u04ef\u04ee\3\2\2\2\u04f0\u0504\3\2\2\2")
        buf.write("\u04f1\u04fe\7\u022c\2\2\u04f2\u04f4\7\u0082\2\2\u04f3")
        buf.write("\u04f5\t\t\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2")
        buf.write("\u04f5\u04f6\3\2\2\2\u04f6\u04f7\7\u01ba\2\2\u04f7\u04ff")
        buf.write("\7\u01cd\2\2\u04f8\u04fa\t\t\2\2\u04f9\u04f8\3\2\2\2\u04f9")
        buf.write("\u04fa\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fc\7\u01ba")
        buf.write("\2\2\u04fc\u04fd\7\u01cd\2\2\u04fd\u04ff\7\u02a6\2\2\u04fe")
        buf.write("\u04f2\3\2\2\2\u04fe\u04f9\3\2\2\2\u04ff\u0504\3\2\2\2")
        buf.write("\u0500\u0501\7\u022c\2\2\u0501\u0502\t\n\2\2\u0502\u0504")
        buf.write("\7[\2\2\u0503\u04e3\3\2\2\2\u0503\u04e4\3\2\2\2\u0503")
        buf.write("\u04e9\3\2\2\2\u0503\u04eb\3\2\2\2\u0503\u04f1\3\2\2\2")
        buf.write("\u0503\u0500\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0503\3")
        buf.write("\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508\3\2\2\2\u0507\u04e0")
        buf.write("\3\2\2\2\u0507\u04e2\3\2\2\2\u0508\27\3\2\2\2\u0509\u050a")
        buf.write("\7-\2\2\u050a\u050b\t\13\2\2\u050b\31\3\2\2\2\u050c\u050d")
        buf.write("\7\u01b6\2\2\u050d\u050e\5\34\17\2\u050e\u0510\7\u0164")
        buf.write("\2\2\u050f\u0511\7\u01ff\2\2\u0510\u050f\3\2\2\2\u0510")
        buf.write("\u0511\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513\5\u0408")
        buf.write("\u0205\2\u0513\u0515\7\u00c6\2\2\u0514\u0516\7\u00cd\2")
        buf.write("\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0519")
        buf.write("\3\2\2\2\u0517\u051a\7\u0193\2\2\u0518\u051a\5\u0406\u0204")
        buf.write("\2\u0519\u0517\3\2\2\2\u0519\u0518\3\2\2\2\u051a\u054f")
        buf.write("\3\2\2\2\u051b\u051c\7\u00cc\2\2\u051c\u051d\5\34\17\2")
        buf.write("\u051d\u051f\7\u0164\2\2\u051e\u0520\7\u01ff\2\2\u051f")
        buf.write("\u051e\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\3\2\2\2")
        buf.write("\u0521\u0522\5\u0408\u0205\2\u0522\u0524\7\u0210\2\2\u0523")
        buf.write("\u0525\7\u00cd\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2")
        buf.write("\2\2\u0525\u0528\3\2\2\2\u0526\u0529\7\u0193\2\2\u0527")
        buf.write("\u0529\5\u0406\u0204\2\u0528\u0526\3\2\2\2\u0528\u0527")
        buf.write("\3\2\2\2\u0529\u054f\3\2\2\2\u052a\u052b\7\u00cc\2\2\u052b")
        buf.write("\u0530\5\u0406\u0204\2\u052c\u052d\7\u028d\2\2\u052d\u052f")
        buf.write("\5\u0406\u0204\2\u052e\u052c\3\2\2\2\u052f\u0532\3\2\2")
        buf.write("\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533")
        buf.write("\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0534\7\u0210\2\2\u0534")
        buf.write("\u0539\5\u0406\u0204\2\u0535\u0536\7\u028d\2\2\u0536\u0538")
        buf.write("\5\u0406\u0204\2\u0537\u0535\3\2\2\2\u0538\u053b\3\2\2")
        buf.write("\2\u0539\u0537\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u054f")
        buf.write("\3\2\2\2\u053b\u0539\3\2\2\2\u053c\u053d\7\u01b6\2\2\u053d")
        buf.write("\u0542\5\u0406\u0204\2\u053e\u053f\7\u028d\2\2\u053f\u0541")
        buf.write("\5\u0406\u0204\2\u0540\u053e\3\2\2\2\u0541\u0544\3\2\2")
        buf.write("\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0545")
        buf.write("\3\2\2\2\u0544\u0542\3\2\2\2\u0545\u0546\7\u00c6\2\2\u0546")
        buf.write("\u054b\5\u0406\u0204\2\u0547\u0548\7\u028d\2\2\u0548\u054a")
        buf.write("\5\u0406\u0204\2\u0549\u0547\3\2\2\2\u054a\u054d\3\2\2")
        buf.write("\2\u054b\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054f")
        buf.write("\3\2\2\2\u054d\u054b\3\2\2\2\u054e\u050c\3\2\2\2\u054e")
        buf.write("\u051b\3\2\2\2\u054e\u052a\3\2\2\2\u054e\u053c\3\2\2\2")
        buf.write("\u054f\33\3\2\2\2\u0550\u0552\7\u028d\2\2\u0551\u0550")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u0555\t\f\2\2\u0554\u0551\3\2\2\2\u0555\u0556\3\2\2\2")
        buf.write("\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557\35\3\2")
        buf.write("\2\2\u0558\u055b\7e\2\2\u0559\u055a\7\u0169\2\2\u055a")
        buf.write("\u055c\7\u01ac\2\2\u055b\u0559\3\2\2\2\u055b\u055c\3\2")
        buf.write("\2\2\u055c\u0561\3\2\2\2\u055d\u055f\7\u0169\2\2\u055e")
        buf.write("\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560\3\2\2\2")
        buf.write("\u0560\u0562\7\u00c1\2\2\u0561\u055e\3\2\2\2\u0561\u0562")
        buf.write("\3\2\2\2\u0562\u0564\3\2\2\2\u0563\u0565\7\u0096\2\2\u0564")
        buf.write("\u0563\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566\3\2\2\2")
        buf.write("\u0566\u0567\7\u0239\2\2\u0567\u0569\5\u0408\u0205\2\u0568")
        buf.write("\u056a\5 \21\2\u0569\u0568\3\2\2\2\u0569\u056a\3\2\2\2")
        buf.write("\u056a\u056b\3\2\2\2\u056b\u056c\7\26\2\2\u056c\u056e")
        buf.write("\5\u0296\u014c\2\u056d\u056f\5\u033a\u019e\2\u056e\u056d")
        buf.write("\3\2\2\2\u056e\u056f\3\2\2\2\u056f\37\3\2\2\2\u0570\u0571")
        buf.write("\5\"\22\2\u0571!\3\2\2\2\u0572\u0580\7\u0287\2\2\u0573")
        buf.write("\u0575\7\u028d\2\2\u0574\u0573\3\2\2\2\u0574\u0575\3\2")
        buf.write("\2\2\u0575\u057e\3\2\2\2\u0576\u057a\5\u03c0\u01e1\2\u0577")
        buf.write("\u0579\5\u00acW\2\u0578\u0577\3\2\2\2\u0579\u057c\3\2")
        buf.write("\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u057f")
        buf.write("\3\2\2\2\u057c\u057a\3\2\2\2\u057d\u057f\5\u0082B\2\u057e")
        buf.write("\u0576\3\2\2\2\u057e\u057d\3\2\2\2\u057f\u0581\3\2\2\2")
        buf.write("\u0580\u0574\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0580\3")
        buf.write("\2\2\2\u0582\u0583\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585")
        buf.write("\7\u0288\2\2\u0585#\3\2\2\2\u0586\u0588\7e\2\2\u0587\u0589")
        buf.write("\t\r\2\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u058b\7\u00e0\2\2\u058b\u058c\5\u03fa")
        buf.write("\u01fe\2\u058c\u0590\7\u0164\2\2\u058d\u0591\5&\24\2\u058e")
        buf.write("\u0591\5\66\34\2\u058f\u0591\5t;\2\u0590\u058d\3\2\2\2")
        buf.write("\u0590\u058e\3\2\2\2\u0590\u058f\3\2\2\2\u0591\u0593\3")
        buf.write("\2\2\2\u0592\u0594\7\u0224\2\2\u0593\u0592\3\2\2\2\u0593")
        buf.write("\u0594\3\2\2\2\u0594%\3\2\2\2\u0595\u0596\7G\2\2\u0596")
        buf.write("\u0598\5(\25\2\u0597\u0599\5*\26\2\u0598\u0597\3\2\2\2")
        buf.write("\u0598\u0599\3\2\2\2\u0599\'\3\2\2\2\u059a\u059b\5\u0432")
        buf.write("\u021a\2\u059b\u059c\7\u0280\2\2\u059c\u059e\3\2\2\2\u059d")
        buf.write("\u059a\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2")
        buf.write("\u059f\u05a0\5\u0432\u021a\2\u05a0)\3\2\2\2\u05a1\u05ae")
        buf.write("\5\u0098M\2\u05a2\u05ae\5\u009eP\2\u05a3\u05a6\7\u0201")
        buf.write("\2\2\u05a4\u05a7\5,\27\2\u05a5\u05a7\7\u0082\2\2\u05a6")
        buf.write("\u05a4\3\2\2\2\u05a6\u05a5\3\2\2\2\u05a7\u05ae\3\2\2\2")
        buf.write("\u05a8\u05ae\5.\30\2\u05a9\u05ae\5\60\31\2\u05aa\u05ae")
        buf.write("\7\u01b5\2\2\u05ab\u05ae\5\62\32\2\u05ac\u05ae\5\64\33")
        buf.write("\2\u05ad\u05a1\3\2\2\2\u05ad\u05a2\3\2\2\2\u05ad\u05a3")
        buf.write("\3\2\2\2\u05ad\u05a8\3\2\2\2\u05ad\u05a9\3\2\2\2\u05ad")
        buf.write("\u05aa\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ac\3\2\2\2")
        buf.write("\u05ae\u05af\3\2\2\2\u05af\u05ad\3\2\2\2\u05af\u05b0\3")
        buf.write("\2\2\2\u05b0+\3\2\2\2\u05b1\u05b2\5\u043e\u0220\2\u05b2")
        buf.write("-\3\2\2\2\u05b3\u05b7\7\u0142\2\2\u05b4\u05b5\7U\2\2\u05b5")
        buf.write("\u05b7\7\u0281\2\2\u05b6\u05b3\3\2\2\2\u05b6\u05b4\3\2")
        buf.write("\2\2\u05b7/\3\2\2\2\u05b8\u05b9\t\16\2\2\u05b9\61\3\2")
        buf.write("\2\2\u05ba\u05bb\t\17\2\2\u05bb\63\3\2\2\2\u05bc\u05c2")
        buf.write("\7\u014e\2\2\u05bd\u05bf\7\u0174\2\2\u05be\u05c0\7\u0281")
        buf.write("\2\2\u05bf\u05be\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c2")
        buf.write("\3\2\2\2\u05c1\u05bc\3\2\2\2\u05c1\u05bd\3\2\2\2\u05c2")
        buf.write("\65\3\2\2\2\u05c3\u05c5\5\u0408\u0205\2\u05c4\u05c6\5")
        buf.write("\u03c0\u01e1\2\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2")
        buf.write("\u05c6\u05c7\3\2\2\2\u05c7\u05cf\7\u0287\2\2\u05c8\u05ca")
        buf.write("\7\u028d\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u05cb\3\2\2\2\u05cb\u05cd\58\35\2\u05cc\u05ce\t\20\2")
        buf.write("\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05d0")
        buf.write("\3\2\2\2\u05cf\u05c9\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1")
        buf.write("\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2")
        buf.write("\u05d3\u05d5\7\u0288\2\2\u05d4\u05d6\5:\36\2\u05d5\u05d4")
        buf.write("\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\67\3\2\2\2\u05d7\u05da")
        buf.write("\5\u0404\u0203\2\u05d8\u05da\5\u0346\u01a4\2\u05d9\u05d7")
        buf.write("\3\2\2\2\u05d9\u05d8\3\2\2\2\u05da9\3\2\2\2\u05db\u05df")
        buf.write("\5<\37\2\u05dc\u05df\5Z.\2\u05dd\u05df\5*\26\2\u05de\u05db")
        buf.write("\3\2\2\2\u05de\u05dc\3\2\2\2\u05de\u05dd\3\2\2\2\u05df")
        buf.write("\u05e0\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2\2\2")
        buf.write("\u05e1\u05e9\3\2\2\2\u05e2\u05e3\7\u00e2\2\2\u05e3\u05e6")
        buf.write("\7\u00f7\2\2\u05e4\u05e7\5h\65\2\u05e5\u05e7\5p9\2\u05e6")
        buf.write("\u05e4\3\2\2\2\u05e6\u05e5\3\2\2\2\u05e7\u05e9\3\2\2\2")
        buf.write("\u05e8\u05de\3\2\2\2\u05e8\u05e2\3\2\2\2\u05e9;\3\2\2")
        buf.write("\2\u05ea\u05eb\7\u00ca\2\2\u05eb\u05ec\7\u0178\2\2\u05ec")
        buf.write("\u05f9\7\65\2\2\u05ed\u05ee\7\u0197\2\2\u05ee\u05ef\5")
        buf.write("\u00b0Y\2\u05ef\u05f0\7\u0287\2\2\u05f0\u05f1\5> \2\u05f1")
        buf.write("\u05f2\7\u0288\2\2\u05f2\u05fa\3\2\2\2\u05f3\u05f4\7\u00d0")
        buf.write("\2\2\u05f4\u05f7\5\u00b0Y\2\u05f5\u05f8\5H%\2\u05f6\u05f8")
        buf.write("\5V,\2\u05f7\u05f5\3\2\2\2\u05f7\u05f6\3\2\2\2\u05f8\u05fa")
        buf.write("\3\2\2\2\u05f9\u05ed\3\2\2\2\u05f9\u05f3\3\2\2\2\u05fa")
        buf.write("=\3\2\2\2\u05fb\u05fd\7\u0178\2\2\u05fc\u05fe\5@!\2\u05fd")
        buf.write("\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u05ff\3\2\2\2")
        buf.write("\u05ff\u0600\7\u022f\2\2\u0600\u0601\7\u0104\2\2\u0601")
        buf.write("\u0602\7\u0204\2\2\u0602\u0607\7\u0287\2\2\u0603\u0605")
        buf.write("\7\u028d\2\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605")
        buf.write("\u0606\3\2\2\2\u0606\u0608\5B\"\2\u0607\u0604\3\2\2\2")
        buf.write("\u0608\u0609\3\2\2\2\u0609\u0607\3\2\2\2\u0609\u060a\3")
        buf.write("\2\2\2\u060a\u060b\3\2\2\2\u060b\u060d\7\u0288\2\2\u060c")
        buf.write("\u060e\5\u0096L\2\u060d\u060c\3\2\2\2\u060d\u060e\3\2")
        buf.write("\2\2\u060e?\3\2\2\2\u060f\u0610\5\u043e\u0220\2\u0610")
        buf.write("A\3\2\2\2\u0611\u0616\7\u0283\2\2\u0612\u0616\5D#\2\u0613")
        buf.write("\u0616\5\u042a\u0216\2\u0614\u0616\7\u0122\2\2\u0615\u0611")
        buf.write("\3\2\2\2\u0615\u0612\3\2\2\2\u0615\u0613\3\2\2\2\u0615")
        buf.write("\u0614\3\2\2\2\u0616C\3\2\2\2\u0617\u0618\7\u01f9\2\2")
        buf.write("\u0618\u0619\7\u0287\2\2\u0619\u061a\5\u0346\u01a4\2\u061a")
        buf.write("\u061b\7\u028d\2\2\u061b\u061e\5\u0346\u01a4\2\u061c\u061d")
        buf.write("\7\u028d\2\2\u061d\u061f\5\u0346\u01a4\2\u061e\u061c\3")
        buf.write("\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0621")
        buf.write("\7\u0288\2\2\u0621\u067d\3\2\2\2\u0622\u0623\7\u01f9\2")
        buf.write("\2\u0623\u0624\7\u0287\2\2\u0624\u0627\5\u0346\u01a4\2")
        buf.write("\u0625\u0626\7\u00c6\2\2\u0626\u0628\5\u0376\u01bc\2\u0627")
        buf.write("\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062b\3\2\2\2")
        buf.write("\u0629\u062a\7\u00bf\2\2\u062a\u062c\5\u0376\u01bc\2\u062b")
        buf.write("\u0629\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2")
        buf.write("\u062d\u062e\7\u0288\2\2\u062e\u067d\3\2\2\2\u062f\u0630")
        buf.write("\7\u0211\2\2\u0630\u0634\7\u0287\2\2\u0631\u0635\5\u0426")
        buf.write("\u0214\2\u0632\u0635\5\u037e\u01c0\2\u0633\u0635\5\u0346")
        buf.write("\u01a4\2\u0634\u0631\3\2\2\2\u0634\u0632\3\2\2\2\u0634")
        buf.write("\u0633\3\2\2\2\u0635\u0638\3\2\2\2\u0636\u0637\7\u028d")
        buf.write("\2\2\u0637\u0639\5\u042e\u0218\2\u0638\u0636\3\2\2\2\u0638")
        buf.write("\u0639\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u063b\7\u028d")
        buf.write("\2\2\u063b\u063d\5\u042e\u0218\2\u063c\u063a\3\2\2\2\u063c")
        buf.write("\u063d\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\7\u0288")
        buf.write("\2\2\u063f\u067d\3\2\2\2\u0640\u0641\7}\2\2\u0641\u0642")
        buf.write("\7\u0287\2\2\u0642\u0643\5F$\2\u0643\u0644\7\u0288\2\2")
        buf.write("\u0644\u067d\3\2\2\2\u0645\u0646\7C\2\2\u0646\u0647\7")
        buf.write("\u0287\2\2\u0647\u0648\5\u0356\u01ac\2\u0648\u0649\7\u022c")
        buf.write("\2\2\u0649\u064a\7\u0139\2\2\u064a\u064b\7\u0288\2\2\u064b")
        buf.write("\u067d\3\2\2\2\u064c\u064d\7\u0156\2\2\u064d\u064e\7\u0287")
        buf.write("\2\2\u064e\u064f\5\u0346\u01a4\2\u064f\u0650\7\u028d\2")
        buf.write("\2\u0650\u0651\5\u0346\u01a4\2\u0651\u0652\7\u0288\2\2")
        buf.write("\u0652\u067d\3\2\2\2\u0653\u0654\7\u0218\2\2\u0654\u065c")
        buf.write("\7\u0287\2\2\u0655\u0657\t\21\2\2\u0656\u0655\3\2\2\2")
        buf.write("\u0656\u0657\3\2\2\2\u0657\u0659\3\2\2\2\u0658\u065a\5")
        buf.write("\u042e\u0218\2\u0659\u0658\3\2\2\2\u0659\u065a\3\2\2\2")
        buf.write("\u065a\u065b\3\2\2\2\u065b\u065d\7\u00c6\2\2\u065c\u0656")
        buf.write("\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e\3\2\2\2\u065e")
        buf.write("\u065f\5\u0356\u01ac\2\u065f\u0660\7\u0288\2\2\u0660\u067d")
        buf.write("\3\2\2\2\u0661\u0662\7\u0212\2\2\u0662\u0663\7\u0287\2")
        buf.write("\2\u0663\u0666\5\u0346\u01a4\2\u0664\u0665\7\u028d\2\2")
        buf.write("\u0665\u0667\5\u042e\u0218\2\u0666\u0664\3\2\2\2\u0666")
        buf.write("\u0667\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\7\u0288")
        buf.write("\2\2\u0669\u067d\3\2\2\2\u066a\u066b\7V\2\2\u066b\u0672")
        buf.write("\7\u0287\2\2\u066c\u066f\5\u042e\u0218\2\u066d\u066f\5")
        buf.write("\u0346\u01a4\2\u066e\u066c\3\2\2\2\u066e\u066d\3\2\2\2")
        buf.write("\u066f\u0670\3\2\2\2\u0670\u0671\7\u028d\2\2\u0671\u0673")
        buf.write("\3\2\2\2\u0672\u066e\3\2\2\2\u0673\u0674\3\2\2\2\u0674")
        buf.write("\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0678\3\2\2\2")
        buf.write("\u0676\u0679\5\u042e\u0218\2\u0677\u0679\5\u0346\u01a4")
        buf.write("\2\u0678\u0676\3\2\2\2\u0678\u0677\3\2\2\2\u0679\u067a")
        buf.write("\3\2\2\2\u067a\u067b\7\u0288\2\2\u067b\u067d\3\2\2\2\u067c")
        buf.write("\u0617\3\2\2\2\u067c\u0622\3\2\2\2\u067c\u062f\3\2\2\2")
        buf.write("\u067c\u0640\3\2\2\2\u067c\u0645\3\2\2\2\u067c\u064c\3")
        buf.write("\2\2\2\u067c\u0653\3\2\2\2\u067c\u0661\3\2\2\2\u067c\u066a")
        buf.write("\3\2\2\2\u067dE\3\2\2\2\u067e\u0683\5\u0346\u01a4\2\u067f")
        buf.write("\u0680\7\u028d\2\2\u0680\u0682\5\u0346\u01a4\2\u0681\u067f")
        buf.write("\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3\2\2\2\u0683")
        buf.write("\u0684\3\2\2\2\u0684G\3\2\2\2\u0685\u0683\3\2\2\2\u0686")
        buf.write("\u0691\7\u0287\2\2\u0687\u0689\7\u028d\2\2\u0688\u0687")
        buf.write("\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a\3\2\2\2\u068a")
        buf.write("\u068c\7\u0178\2\2\u068b\u068d\5@!\2\u068c\u068b\3\2\2")
        buf.write("\2\u068c\u068d\3\2\2\2\u068d\u068f\3\2\2\2\u068e\u0690")
        buf.write("\5J&\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0692")
        buf.write("\3\2\2\2\u0691\u0688\3\2\2\2\u0692\u0693\3\2\2\2\u0693")
        buf.write("\u0691\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695\3\2\2\2")
        buf.write("\u0695\u0696\7\u0288\2\2\u0696I\3\2\2\2\u0697\u0698\7")
        buf.write("\u0201\2\2\u0698\u06ac\5,\27\2\u0699\u069c\7\u0171\2\2")
        buf.write("\u069a\u069b\7\u0201\2\2\u069b\u069d\5,\27\2\u069c\u069a")
        buf.write("\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u06ac\3\2\2\2\u069e")
        buf.write("\u06ac\5L\'\2\u069f\u06ac\5.\30\2\u06a0\u06ac\5N(\2\u06a1")
        buf.write("\u06a2\7\u0233\2\2\u06a2\u06a3\5T+\2\u06a3\u06a4\7\u01f3")
        buf.write("\2\2\u06a4\u06a6\7\26\2\2\u06a5\u06a7\t\22\2\2\u06a6\u06a5")
        buf.write("\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write("\u06a9\7\u010f\2\2\u06a9\u06aa\5R*\2\u06aa\u06ac\3\2\2")
        buf.write("\2\u06ab\u0697\3\2\2\2\u06ab\u0699\3\2\2\2\u06ab\u069e")
        buf.write("\3\2\2\2\u06ab\u069f\3\2\2\2\u06ab\u06a0\3\2\2\2\u06ab")
        buf.write("\u06a1\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06ab\3\2\2\2")
        buf.write("\u06ad\u06ae\3\2\2\2\u06aeK\3\2\2\2\u06af\u06b9\7U\2\2")
        buf.write("\u06b0\u06ba\7 \2\2\u06b1\u06b7\7\u00bf\2\2\u06b2\u06b8")
        buf.write("\7\u0163\2\2\u06b3\u06b5\t\23\2\2\u06b4\u06b6\t\24\2\2")
        buf.write("\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b8\3")
        buf.write("\2\2\2\u06b7\u06b2\3\2\2\2\u06b7\u06b3\3\2\2\2\u06b8\u06ba")
        buf.write("\3\2\2\2\u06b9\u06b0\3\2\2\2\u06b9\u06b1\3\2\2\2\u06b9")
        buf.write("\u06ba\3\2\2\2\u06ba\u06bd\3\2\2\2\u06bb\u06bd\7\u0142")
        buf.write("\2\2\u06bc\u06af\3\2\2\2\u06bc\u06bb\3\2\2\2\u06bdM\3")
        buf.write("\2\2\2\u06be\u06bf\7\u010f\2\2\u06bf\u06c0\7\u0287\2\2")
        buf.write("\u06c0\u06c1\5P)\2\u06c1\u06c2\7\u0288\2\2\u06c2\u06c3")
        buf.write("\7\u01f3\2\2\u06c3\u06c5\7\26\2\2\u06c4\u06c6\t\22\2\2")
        buf.write("\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06d4\3")
        buf.write("\2\2\2\u06c7\u06cd\5R*\2\u06c8\u06c9\7\u0287\2\2\u06c9")
        buf.write("\u06ca\7\u0201\2\2\u06ca\u06cb\5,\27\2\u06cb\u06cc\7\u0288")
        buf.write("\2\2\u06cc\u06ce\3\2\2\2\u06cd\u06c8\3\2\2\2\u06cd\u06ce")
        buf.write("\3\2\2\2\u06ce\u06d5\3\2\2\2\u06cf\u06d0\7\u0287\2\2\u06d0")
        buf.write("\u06d1\7\u0201\2\2\u06d1\u06d2\5,\27\2\u06d2\u06d3\7\u0288")
        buf.write("\2\2\u06d3\u06d5\3\2\2\2\u06d4\u06c7\3\2\2\2\u06d4\u06cf")
        buf.write("\3\2\2\2\u06d5O\3\2\2\2\u06d6\u06d7\5\u043e\u0220\2\u06d7")
        buf.write("Q\3\2\2\2\u06d8\u06d9\5\u043e\u0220\2\u06d9S\3\2\2\2\u06da")
        buf.write("\u06db\5\u0432\u021a\2\u06db\u06dc\7\u0280\2\2\u06dc\u06de")
        buf.write("\3\2\2\2\u06dd\u06da\3\2\2\2\u06dd\u06de\3\2\2\2\u06de")
        buf.write("\u06e2\3\2\2\2\u06df\u06e0\5\u0432\u021a\2\u06e0\u06e1")
        buf.write("\7\u0280\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06df\3\2\2\2\u06e2")
        buf.write("\u06e3\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\5\u0432")
        buf.write("\u021a\2\u06e5U\3\2\2\2\u06e6\u06e7\7\u0186\2\2\u06e7")
        buf.write("\u06f5\5X-\2\u06e8\u06e9\7\u01f3\2\2\u06e9\u06ea\7\u00db")
        buf.write("\2\2\u06ea\u06ef\7\u0287\2\2\u06eb\u06ed\7\u028d\2\2\u06ec")
        buf.write("\u06eb\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\3\2\2\2")
        buf.write("\u06ee\u06f0\5,\27\2\u06ef\u06ec\3\2\2\2\u06f0\u06f1\3")
        buf.write("\2\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3")
        buf.write("\3\2\2\2\u06f3\u06f4\7\u0288\2\2\u06f4\u06f6\3\2\2\2\u06f5")
        buf.write("\u06e8\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f9\3\2\2\2")
        buf.write("\u06f7\u06fa\5L\'\2\u06f8\u06fa\5.\30\2\u06f9\u06f7\3")
        buf.write("\2\2\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u0709")
        buf.write("\3\2\2\2\u06fb\u06fc\7\u0171\2\2\u06fc\u06fd\7\u01f3\2")
        buf.write("\2\u06fd\u06fe\7\u00db\2\2\u06fe\u0703\7\u0287\2\2\u06ff")
        buf.write("\u0701\7\u028d\2\2\u0700\u06ff\3\2\2\2\u0700\u0701\3\2")
        buf.write("\2\2\u0701\u0702\3\2\2\2\u0702\u0704\5,\27\2\u0703\u0700")
        buf.write("\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0703\3\2\2\2\u0705")
        buf.write("\u0706\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708\7\u0288")
        buf.write("\2\2\u0708\u070a\3\2\2\2\u0709\u06fb\3\2\2\2\u0709\u070a")
        buf.write("\3\2\2\2\u070aW\3\2\2\2\u070b\u070c\7\u0281\2\2\u070c")
        buf.write("Y\3\2\2\2\u070d\u0712\7\u010e\2\2\u070e\u0713\5\\/\2\u070f")
        buf.write("\u0713\5^\60\2\u0710\u0713\5`\61\2\u0711\u0713\5b\62\2")
        buf.write("\u0712\u070e\3\2\2\2\u0712\u070f\3\2\2\2\u0712\u0710\3")
        buf.write("\2\2\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713[")
        buf.write("\3\2\2\2\u0714\u0727\7\u0287\2\2\u0715\u0717\7\u028d\2")
        buf.write("\2\u0716\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718")
        buf.write("\3\2\2\2\u0718\u071a\7\u0178\2\2\u0719\u071b\5@!\2\u071a")
        buf.write("\u0719\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u0722\3\2\2\2")
        buf.write("\u071c\u071f\5\u0096L\2\u071d\u071f\5.\30\2\u071e\u071c")
        buf.write("\3\2\2\2\u071e\u071d\3\2\2\2\u071f\u0720\3\2\2\2\u0720")
        buf.write("\u071e\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0723\3\2\2\2")
        buf.write("\u0722\u071e\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725\3")
        buf.write("\2\2\2\u0724\u0726\7\u0224\2\2\u0725\u0724\3\2\2\2\u0725")
        buf.write("\u0726\3\2\2\2\u0726\u0728\3\2\2\2\u0727\u0716\3\2\2\2")
        buf.write("\u0728\u0729\3\2\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3")
        buf.write("\2\2\2\u072a\u072b\3\2\2\2\u072b\u072c\7\u0288\2\2\u072c")
        buf.write("]\3\2\2\2\u072d\u0740\7\u0287\2\2\u072e\u0730\7\u028d")
        buf.write("\2\2\u072f\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731")
        buf.write("\3\2\2\2\u0731\u0733\7\u0178\2\2\u0732\u0734\5@!\2\u0733")
        buf.write("\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u073b\3\2\2\2")
        buf.write("\u0735\u0738\5\u0096L\2\u0736\u0738\5.\30\2\u0737\u0735")
        buf.write("\3\2\2\2\u0737\u0736\3\2\2\2\u0738\u0739\3\2\2\2\u0739")
        buf.write("\u0737\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c\3\2\2\2")
        buf.write("\u073b\u0737\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073e\3")
        buf.write("\2\2\2\u073d\u073f\7\u0224\2\2\u073e\u073d\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0741\3\2\2\2\u0740\u072f\3\2\2\2")
        buf.write("\u0741\u0742\3\2\2\2\u0742\u0740\3\2\2\2\u0742\u0743\3")
        buf.write("\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\7\u0288\2\2\u0745")
        buf.write("_\3\2\2\2\u0746\u0747\7\u01f3\2\2\u0747\u0748\7\u00db")
        buf.write("\2\2\u0748\u074d\7\u0287\2\2\u0749\u074b\7\u028d\2\2\u074a")
        buf.write("\u0749\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u074c\3\2\2\2")
        buf.write("\u074c\u074e\5,\27\2\u074d\u074a\3\2\2\2\u074e\u074f\3")
        buf.write("\2\2\2\u074f\u074d\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751")
        buf.write("\3\2\2\2\u0751\u0752\7\u0288\2\2\u0752\u076b\3\2\2\2\u0753")
        buf.write("\u0765\7\u0287\2\2\u0754\u0756\7\u028d\2\2\u0755\u0754")
        buf.write("\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\3\2\2\2\u0757")
        buf.write("\u0759\7\u0178\2\2\u0758\u075a\5@!\2\u0759\u0758\3\2\2")
        buf.write("\2\u0759\u075a\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u075c")
        buf.write("\7\u0201\2\2\u075c\u075e\5,\27\2\u075d\u075b\3\2\2\2\u075d")
        buf.write("\u075e\3\2\2\2\u075e\u0760\3\2\2\2\u075f\u0761\5.\30\2")
        buf.write("\u0760\u075f\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0763\3")
        buf.write("\2\2\2\u0762\u0764\7\u0224\2\2\u0763\u0762\3\2\2\2\u0763")
        buf.write("\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0755\3\2\2\2")
        buf.write("\u0766\u0767\3\2\2\2\u0767\u0765\3\2\2\2\u0767\u0768\3")
        buf.write("\2\2\2\u0768\u0769\3\2\2\2\u0769\u076b\7\u0288\2\2\u076a")
        buf.write("\u0746\3\2\2\2\u076a\u0753\3\2\2\2\u076ba\3\2\2\2\u076c")
        buf.write("\u076d\7\u01f3\2\2\u076d\u076e\7\u00db\2\2\u076e\u0773")
        buf.write("\7\u0287\2\2\u076f\u0771\7\u028d\2\2\u0770\u076f\3\2\2")
        buf.write("\2\u0770\u0771\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0774")
        buf.write("\5,\27\2\u0773\u0770\3\2\2\2\u0774\u0775\3\2\2\2\u0775")
        buf.write("\u0773\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write("\u0777\u0778\7\u0288\2\2\u0778\u077a\3\2\2\2\u0779\u076c")
        buf.write("\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077b\3\2\2\2\u077b")
        buf.write("\u078f\7\u0287\2\2\u077c\u077e\7\u028d\2\2\u077d\u077c")
        buf.write("\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f\3\2\2\2\u077f")
        buf.write("\u0781\7\u0178\2\2\u0780\u0782\5@!\2\u0781\u0780\3\2\2")
        buf.write("\2\u0781\u0782\3\2\2\2\u0782\u0789\3\2\2\2\u0783\u0786")
        buf.write("\5\u0096L\2\u0784\u0786\5.\30\2\u0785\u0783\3\2\2\2\u0785")
        buf.write("\u0784\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0785\3\2\2\2")
        buf.write("\u0787\u0788\3\2\2\2\u0788\u078a\3\2\2\2\u0789\u0785\3")
        buf.write("\2\2\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d")
        buf.write("\7\u0224\2\2\u078c\u078e\5d\63\2\u078d\u078c\3\2\2\2\u078d")
        buf.write("\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f\u077d\3\2\2\2")
        buf.write("\u0790\u0791\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792\3")
        buf.write("\2\2\2\u0792\u0793\3\2\2\2\u0793\u0794\7\u0288\2\2\u0794")
        buf.write("c\3\2\2\2\u0795\u0796\7\u01f3\2\2\u0796\u0797\7\u00db")
        buf.write("\2\2\u0797\u079c\7\u0287\2\2\u0798\u079a\7\u028d\2\2\u0799")
        buf.write("\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2")
        buf.write("\u079b\u079d\5,\27\2\u079c\u0799\3\2\2\2\u079d\u079e\3")
        buf.write("\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a0")
        buf.write("\3\2\2\2\u07a0\u07a1\7\u0288\2\2\u07a1\u07ba\3\2\2\2\u07a2")
        buf.write("\u07b4\7\u0287\2\2\u07a3\u07a5\7\u028d\2\2\u07a4\u07a3")
        buf.write("\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6")
        buf.write("\u07a8\7\u01f6\2\2\u07a7\u07a9\5f\64\2\u07a8\u07a7\3\2")
        buf.write("\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07ab")
        buf.write("\7\u0201\2\2\u07ab\u07ad\5,\27\2\u07ac\u07aa\3\2\2\2\u07ac")
        buf.write("\u07ad\3\2\2\2\u07ad\u07af\3\2\2\2\u07ae\u07b0\5.\30\2")
        buf.write("\u07af\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b2\3")
        buf.write("\2\2\2\u07b1\u07b3\7\u0224\2\2\u07b2\u07b1\3\2\2\2\u07b2")
        buf.write("\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4\u07a4\3\2\2\2")
        buf.write("\u07b5\u07b6\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6\u07b7\3")
        buf.write("\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07ba\7\u0288\2\2\u07b9")
        buf.write("\u0795\3\2\2\2\u07b9\u07a2\3\2\2\2\u07bae\3\2\2\2\u07bb")
        buf.write("\u07bc\5@!\2\u07bcg\3\2\2\2\u07bd\u07bf\5j\66\2\u07be")
        buf.write("\u07c0\5n8\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0")
        buf.write("\u07c2\3\2\2\2\u07c1\u07c3\5\64\33\2\u07c2\u07c1\3\2\2")
        buf.write("\2\u07c2\u07c3\3\2\2\2\u07c3\u07c9\3\2\2\2\u07c4\u07c5")
        buf.write("\7\u0176\2\2\u07c5\u07c6\7\u0287\2\2\u07c6\u07c7\5l\67")
        buf.write("\2\u07c7\u07c8\7\u0288\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07c4")
        buf.write("\3\2\2\2\u07c9\u07ca\3\2\2\2\u07cai\3\2\2\2\u07cb\u07cc")
        buf.write("\5\u0432\u021a\2\u07cc\u07cd\7\u0280\2\2\u07cd\u07cf\3")
        buf.write("\2\2\2\u07ce\u07cb\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0")
        buf.write("\3\2\2\2\u07d0\u07d1\5\u0432\u021a\2\u07d1k\3\2\2\2\u07d2")
        buf.write("\u07d3\7\u0283\2\2\u07d3m\3\2\2\2\u07d4\u07e8\7\u010e")
        buf.write("\2\2\u07d5\u07e2\7\u0287\2\2\u07d6\u07d8\7\u028d\2\2\u07d7")
        buf.write("\u07d6\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\3\2\2\2")
        buf.write("\u07d9\u07da\7\u0178\2\2\u07da\u07e0\5@!\2\u07db\u07dc")
        buf.write("\7\u0176\2\2\u07dc\u07dd\7\u0287\2\2\u07dd\u07de\5l\67")
        buf.write("\2\u07de\u07df\7\u0288\2\2\u07df\u07e1\3\2\2\2\u07e0\u07db")
        buf.write("\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e3\3\2\2\2\u07e2")
        buf.write("\u07d7\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e2\3\2\2\2")
        buf.write("\u07e4\u07e5\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7\7")
        buf.write("\u0288\2\2\u07e7\u07e9\3\2\2\2\u07e8\u07d5\3\2\2\2\u07e8")
        buf.write("\u07e9\3\2\2\2\u07e9o\3\2\2\2\u07ea\u07eb\7\u0248\2\2")
        buf.write("\u07eb\u07ed\7\u0280\2\2\u07ec\u07ea\3\2\2\2\u07ec\u07ed")
        buf.write("\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f0\7\u0251\2\2\u07ef")
        buf.write("\u07f1\5r:\2\u07f0\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1")
        buf.write("\u07f3\3\2\2\2\u07f2\u07f4\5\64\33\2\u07f3\u07f2\3\2\2")
        buf.write("\2\u07f3\u07f4\3\2\2\2\u07f4q\3\2\2\2\u07f5\u0802\7\u010e")
        buf.write("\2\2\u07f6\u07fc\7\u0287\2\2\u07f7\u07f9\7\u028d\2\2\u07f8")
        buf.write("\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa\3\2\2\2")
        buf.write("\u07fa\u07fb\7\u0178\2\2\u07fb\u07fd\5@!\2\u07fc\u07f8")
        buf.write("\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe")
        buf.write("\u07ff\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0801\7\u0288")
        buf.write("\2\2\u0801\u0803\3\2\2\2\u0802\u07f6\3\2\2\2\u0802\u0803")
        buf.write("\3\2\2\2\u0803s\3\2\2\2\u0804\u0805\5\u0408\u0205\2\u0805")
        buf.write("\u0811\7\u0287\2\2\u0806\u0808\7\u028d\2\2\u0807\u0806")
        buf.write("\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080b\3\2\2\2\u0809")
        buf.write("\u080c\5\u0408\u0205\2\u080a\u080c\5\u03c0\u01e1\2\u080b")
        buf.write("\u0809\3\2\2\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2")
        buf.write("\u080c\u080d\3\2\2\2\u080d\u080f\5\u0404\u0203\2\u080e")
        buf.write("\u0810\t\20\2\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2")
        buf.write("\2\u0810\u0812\3\2\2\2\u0811\u0807\3\2\2\2\u0812\u0813")
        buf.write("\3\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814")
        buf.write("\u0815\3\2\2\2\u0815\u0816\7\u0288\2\2\u0816\u081d\7\u00c6")
        buf.write("\2\2\u0817\u0819\7\u028d\2\2\u0818\u0817\3\2\2\2\u0818")
        buf.write("\u0819\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b\5\u0408")
        buf.write("\u0205\2\u081b\u081c\5\u03c0\u01e1\2\u081c\u081e\3\2\2")
        buf.write("\2\u081d\u0818\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u081d")
        buf.write("\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0821\3\2\2\2\u0821")
        buf.write("\u0823\5\u03c4\u01e3\2\u0822\u0824\5Z.\2\u0823\u0822\3")
        buf.write("\2\2\2\u0823\u0824\3\2\2\2\u0824\u0826\3\2\2\2\u0825\u0827")
        buf.write("\5*\26\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827")
        buf.write("u\3\2\2\2\u0828\u082d\7e\2\2\u0829\u082b\7\u00ca\2\2\u082a")
        buf.write("\u0829\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082c\3\2\2\2")
        buf.write("\u082c\u082e\7\u0203\2\2\u082d\u082a\3\2\2\2\u082d\u082e")
        buf.write("\3\2\2\2\u082e\u082f\3\2\2\2\u082f\u0830\7\u01ff\2\2\u0830")
        buf.write("\u0834\5\u0408\u0205\2\u0831\u0835\5x=\2\u0832\u0835\5")
        buf.write("\u010c\u0087\2\u0833\u0835\5\u0114\u008b\2\u0834\u0831")
        buf.write("\3\2\2\2\u0834\u0832\3\2\2\2\u0834\u0833\3\2\2\2\u0835")
        buf.write("\u0838\3\2\2\2\u0836\u0837\7\26\2\2\u0837\u0839\5\u028c")
        buf.write("\u0147\2\u0838\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839")
        buf.write("\u084e\3\2\2\2\u083a\u083b\7\u0178\2\2\u083b\u083c\7\u015e")
        buf.write("\2\2\u083c\u084c\5\u0408\u0205\2\u083d\u083e\7\u00bf\2")
        buf.write("\2\u083e\u083f\7\u022f\2\2\u083f\u0840\7\u00db\2\2\u0840")
        buf.write("\u0841\7\u0287\2\2\u0841\u0846\5\u0346\u01a4\2\u0842\u0843")
        buf.write("\7\u028d\2\2\u0843\u0845\5\u0346\u01a4\2\u0844\u0842\3")
        buf.write("\2\2\2\u0845\u0848\3\2\2\2\u0846\u0844\3\2\2\2\u0846\u0847")
        buf.write("\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u0846\3\2\2\2\u0849")
        buf.write("\u084a\7\u0288\2\2\u084a\u084d\3\2\2\2\u084b\u084d\7\u0082")
        buf.write("\2\2\u084c\u083d\3\2\2\2\u084c\u084b\3\2\2\2\u084d\u084f")
        buf.write("\3\2\2\2\u084e\u083a\3\2\2\2\u084e\u084f\3\2\2\2\u084f")
        buf.write("w\3\2\2\2\u0850\u0851\7\u0287\2\2\u0851\u0852\5z>\2\u0852")
        buf.write("\u0853\7\u0288\2\2\u0853\u0855\3\2\2\2\u0854\u0850\3\2")
        buf.write("\2\2\u0854\u0855\3\2\2\2\u0855\u085a\3\2\2\2\u0856\u0857")
        buf.write("\7\u0164\2\2\u0857\u0858\7N\2\2\u0858\u0859\t\25\2\2\u0859")
        buf.write("\u085b\7\u01bf\2\2\u085a\u0856\3\2\2\2\u085a\u085b\3\2")
        buf.write("\2\2\u085b\u085d\3\2\2\2\u085c\u085e\5\u0092J\2\u085d")
        buf.write("\u085c\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860\3\2\2\2")
        buf.write("\u085f\u0861\5\u00a0Q\2\u0860\u085f\3\2\2\2\u0860\u0861")
        buf.write("\3\2\2\2\u0861\u0863\3\2\2\2\u0862\u0864\5\u00d4k\2\u0863")
        buf.write("\u0862\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0866\3\2\2\2")
        buf.write("\u0865\u0867\t\5\2\2\u0866\u0865\3\2\2\2\u0866\u0867\3")
        buf.write("\2\2\2\u0867\u086d\3\2\2\2\u0868\u0869\7\u01b0\2\2\u0869")
        buf.write("\u086a\7\u0287\2\2\u086a\u086b\7\u012d\2\2\u086b\u086c")
        buf.write("\t\26\2\2\u086c\u086e\7\u0288\2\2\u086d\u0868\3\2\2\2")
        buf.write("\u086d\u086e\3\2\2\2\u086e\u0870\3\2\2\2\u086f\u0871\5")
        buf.write("\64\33\2\u0870\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871")
        buf.write("\u0873\3\2\2\2\u0872\u0874\t\27\2\2\u0873\u0872\3\2\2")
        buf.write("\2\u0873\u0874\3\2\2\2\u0874\u087a\3\2\2\2\u0875\u0877")
        buf.write("\5\u0104\u0083\2\u0876\u0875\3\2\2\2\u0877\u0878\3\2\2")
        buf.write("\2\u0878\u0876\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087b")
        buf.write("\3\2\2\2\u087a\u0876\3\2\2\2\u087a\u087b\3\2\2\2\u087b")
        buf.write("\u087d\3\2\2\2\u087c\u087e\5\u0108\u0085\2\u087d\u087c")
        buf.write("\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u0880\3\2\2\2\u087f")
        buf.write("\u0881\5\u010a\u0086\2\u0880\u087f\3\2\2\2\u0880\u0881")
        buf.write("\3\2\2\2\u0881y\3\2\2\2\u0882\u0884\7\u028d\2\2\u0883")
        buf.write("\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u088a\3\2\2\2")
        buf.write("\u0885\u088b\5|?\2\u0886\u088b\5\u0080A\2\u0887\u088b")
        buf.write("\5\u0082B\2\u0888\u088b\5\u0088E\2\u0889\u088b\5\u008a")
        buf.write("F\2\u088a\u0885\3\2\2\2\u088a\u0886\3\2\2\2\u088a\u0887")
        buf.write("\3\2\2\2\u088a\u0888\3\2\2\2\u088a\u0889\3\2\2\2\u088b")
        buf.write("\u088d\3\2\2\2\u088c\u0883\3\2\2\2\u088d\u088e\3\2\2\2")
        buf.write("\u088e\u088c\3\2\2\2\u088e\u088f\3\2\2\2\u088f{\3\2\2")
        buf.write("\2\u0890\u0893\5\u0404\u0203\2\u0891\u0894\5\u041c\u020f")
        buf.write("\2\u0892\u0894\5\u03ec\u01f7\2\u0893\u0891\3\2\2\2\u0893")
        buf.write("\u0892\3\2\2\2\u0894\u0896\3\2\2\2\u0895\u0897\7\u01e6")
        buf.write("\2\2\u0896\u0895\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u089a")
        buf.write("\3\2\2\2\u0898\u0899\7\u0082\2\2\u0899\u089b\5\u0346\u01a4")
        buf.write("\2\u089a\u0898\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u08af")
        buf.write("\3\2\2\2\u089c\u089f\7\u009d\2\2\u089d\u089e\7\u022c\2")
        buf.write("\2\u089e\u08a0\7\u0283\2\2\u089f\u089d\3\2\2\2\u089f\u08a0")
        buf.write("\3\2\2\2\u08a0\u08a4\3\2\2\2\u08a1\u08a2\7\u00d5\2\2\u08a2")
        buf.write("\u08a3\7\65\2\2\u08a3\u08a5\5\u043e\u0220\2\u08a4\u08a1")
        buf.write("\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\3\2\2\2\u08a6")
        buf.write("\u08a8\7\u0283\2\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2")
        buf.write("\2\2\u08a8\u08ad\3\2\2\2\u08a9\u08ab\7\u013f\2\2\u08aa")
        buf.write("\u08a9\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac\3\2\2\2")
        buf.write("\u08ac\u08ae\7\u01c1\2\2\u08ad\u08aa\3\2\2\2\u08ad\u08ae")
        buf.write("\3\2\2\2\u08ae\u08b0\3\2\2\2\u08af\u089c\3\2\2\2\u08af")
        buf.write("\u08b0\3\2\2\2\u08b0\u08b8\3\2\2\2\u08b1\u08b3\5\u00ac")
        buf.write("W\2\u08b2\u08b1\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4\u08b2")
        buf.write("\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b9\3\2\2\2\u08b6")
        buf.write("\u08b4\3\2\2\2\u08b7\u08b9\5~@\2\u08b8\u08b4\3\2\2\2\u08b8")
        buf.write("\u08b7\3\2\2\2\u08b9\u08bc\3\2\2\2\u08ba\u08bb\7\u0082")
        buf.write("\2\2\u08bb\u08bd\5\u0346\u01a4\2\u08bc\u08ba\3\2\2\2\u08bc")
        buf.write("\u08bd\3\2\2\2\u08bd}\3\2\2\2\u08be\u08bf\7\u01c8\2\2")
        buf.write("\u08bf\u08c0\7\u00f7\2\2\u08c0\u08cc\5\u0408\u0205\2\u08c1")
        buf.write("\u08c2\7\u0243\2\2\u08c2\u08cc\7\u01be\2\2\u08c3\u08c4")
        buf.write("\7Z\2\2\u08c4\u08c6\5\u03e8\u01f5\2\u08c5\u08c3\3\2\2")
        buf.write("\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c9")
        buf.write("\5\u00aeX\2\u08c8\u08ca\5\u00b6\\\2\u08c9\u08c8\3\2\2")
        buf.write("\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08be")
        buf.write("\3\2\2\2\u08cb\u08c1\3\2\2\2\u08cb\u08c5\3\2\2\2\u08cc")
        buf.write("\177\3\2\2\2\u08cd\u08cf\5\u0404\u0203\2\u08ce\u08d0\5")
        buf.write("\u041c\u020f\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2")
        buf.write("\u08d0\u08d3\3\2\2\2\u08d1\u08d2\7\u00c9\2\2\u08d2\u08d4")
        buf.write("\7\17\2\2\u08d3\u08d1\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4")
        buf.write("\u08d5\3\2\2\2\u08d5\u08d6\7\26\2\2\u08d6\u08d7\7\u0287")
        buf.write("\2\2\u08d7\u08d8\5\u0346\u01a4\2\u08d8\u08da\7\u0288\2")
        buf.write("\2\u08d9\u08db\7\u023a\2\2\u08da\u08d9\3\2\2\2\u08da\u08db")
        buf.write("\3\2\2\2\u08db\u08df\3\2\2\2\u08dc\u08de\5\u00acW\2\u08dd")
        buf.write("\u08dc\3\2\2\2\u08de\u08e1\3\2\2\2\u08df\u08dd\3\2\2\2")
        buf.write("\u08df\u08e0\3\2\2\2\u08e0\u0081\3\2\2\2\u08e1\u08df\3")
        buf.write("\2\2\2\u08e2\u08e3\7Z\2\2\u08e3\u08e5\5\u03e8\u01f5\2")
        buf.write("\u08e4\u08e2\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08f1\3")
        buf.write("\2\2\2\u08e6\u08e7\7\u0220\2\2\u08e7\u08f2\5\u00b0Y\2")
        buf.write("\u08e8\u08e9\7\u0190\2\2\u08e9\u08ea\7\u00fe\2\2\u08ea")
        buf.write("\u08f2\5\u00b0Y\2\u08eb\u08f2\5\u0084C\2\u08ec\u08ed\7")
        buf.write("A\2\2\u08ed\u08ee\7\u0287\2\2\u08ee\u08ef\5\u0346\u01a4")
        buf.write("\2\u08ef\u08f0\7\u0288\2\2\u08f0\u08f2\3\2\2\2\u08f1\u08e6")
        buf.write("\3\2\2\2\u08f1\u08e8\3\2\2\2\u08f1\u08eb\3\2\2\2\u08f1")
        buf.write("\u08ec\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3\u08f5\5\u00b6")
        buf.write("\\\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u0083")
        buf.write("\3\2\2\2\u08f6\u08f7\7\u00c2\2\2\u08f7\u08f8\7\u00fe\2")
        buf.write("\2\u08f8\u08f9\5\u00b0Y\2\u08f9\u08fb\5\u00aeX\2\u08fa")
        buf.write("\u08fc\5\u0086D\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2")
        buf.write("\2\2\u08fc\u0085\3\2\2\2\u08fd\u08fe\7\u0164\2\2\u08fe")
        buf.write("\u0902\7\u0087\2\2\u08ff\u0903\7;\2\2\u0900\u0901\7\u01d6")
        buf.write("\2\2\u0901\u0903\7\u0157\2\2\u0902\u08ff\3\2\2\2\u0902")
        buf.write("\u0900\3\2\2\2\u0903\u0087\3\2\2\2\u0904\u0905\7\u01c8")
        buf.write("\2\2\u0905\u0906\7\u00bf\2\2\u0906\u0907\7\u0287\2\2\u0907")
        buf.write("\u0908\5\u043e\u0220\2\u0908\u0909\7\u0288\2\2\u0909\u090a")
        buf.write("\7\u00f7\2\2\u090a\u090b\5\u0408\u0205\2\u090b\u0928\3")
        buf.write("\2\2\2\u090c\u090d\7\u01a1\2\2\u090d\u090e\7\u0287\2\2")
        buf.write("\u090e\u090f\5\u043e\u0220\2\u090f\u0910\7\u0288\2\2\u0910")
        buf.write("\u0911\7\u0243\2\2\u0911\u0912\7\u01be\2\2\u0912\u0928")
        buf.write("\3\2\2\2\u0913\u0914\7Z\2\2\u0914\u0916\5\u03e8\u01f5")
        buf.write("\2\u0915\u0913\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0917")
        buf.write("\3\2\2\2\u0917\u0918\7\u00c2\2\2\u0918\u0919\7\u00fe\2")
        buf.write("\2\u0919\u091e\7\u0287\2\2\u091a\u091c\7\u028d\2\2\u091b")
        buf.write("\u091a\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091d\3\2\2\2")
        buf.write("\u091d\u091f\5\u043e\u0220\2\u091e\u091b\3\2\2\2\u091f")
        buf.write("\u0920\3\2\2\2\u0920\u091e\3\2\2\2\u0920\u0921\3\2\2\2")
        buf.write("\u0921\u0922\3\2\2\2\u0922\u0923\7\u0288\2\2\u0923\u0925")
        buf.write("\5\u00aeX\2\u0924\u0926\5\u00b6\\\2\u0925\u0924\3\2\2")
        buf.write("\2\u0925\u0926\3\2\2\2\u0926\u0928\3\2\2\2\u0927\u0904")
        buf.write("\3\2\2\2\u0927\u090c\3\2\2\2\u0927\u0915\3\2\2\2\u0928")
        buf.write("\u0089\3\2\2\2\u0929\u092a\7\u01fc\2\2\u092a\u092d\7\u0114")
        buf.write("\2\2\u092b\u092e\5\u008cG\2\u092c\u092e\5\u0090I\2\u092d")
        buf.write("\u092b\3\2\2\2\u092d\u092c\3\2\2\2\u092e\u008b\3\2\2\2")
        buf.write("\u092f\u0930\7\u00cd\2\2\u0930\u0931\5\u008eH\2\u0931")
        buf.write("\u093a\7\u0287\2\2\u0932\u0934\7\u028d\2\2\u0933\u0932")
        buf.write("\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0935\3\2\2\2\u0935")
        buf.write("\u0938\5\u043e\u0220\2\u0936\u0937\7\u013f\2\2\u0937\u0939")
        buf.write("\7\u0114\2\2\u0938\u0936\3\2\2\2\u0938\u0939\3\2\2\2\u0939")
        buf.write("\u093b\3\2\2\2\u093a\u0933\3\2\2\2\u093b\u093c\3\2\2\2")
        buf.write("\u093c\u093a\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e\3")
        buf.write("\2\2\2\u093e\u0940\7\u0288\2\2\u093f\u0941\7\17\2\2\u0940")
        buf.write("\u093f\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u008d\3\2\2\2")
        buf.write("\u0942\u0943\7\u0281\2\2\u0943\u008f\3\2\2\2\u0944\u0945")
        buf.write("\7p\2\2\u0945\u0951\7\u0287\2\2\u0946\u0948\7\u028d\2")
        buf.write("\2\u0947\u0946\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u094f")
        buf.write("\3\2\2\2\u0949\u0950\7\13\2\2\u094a\u094b\7\u0190\2\2")
        buf.write("\u094b\u0950\7\u00fe\2\2\u094c\u0950\7\u0220\2\2\u094d")
        buf.write("\u094e\7\u00c2\2\2\u094e\u0950\7\u00fe\2\2\u094f\u0949")
        buf.write("\3\2\2\2\u094f\u094a\3\2\2\2\u094f\u094c\3\2\2\2\u094f")
        buf.write("\u094d\3\2\2\2\u0950\u0952\3\2\2\2\u0951\u0947\3\2\2\2")
        buf.write("\u0952\u0953\3\2\2\2\u0953\u0951\3\2\2\2\u0953\u0954\3")
        buf.write("\2\2\2\u0954\u0955\3\2\2\2\u0955\u0956\7\u0288\2\2\u0956")
        buf.write("\u0957\7K\2\2\u0957\u0091\3\2\2\2\u0958\u095a\5\u0094")
        buf.write("K\2\u0959\u0958\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u095b")
        buf.write("\3\2\2\2\u095b\u095d\5\u0096L\2\u095c\u095e\5L\'\2\u095d")
        buf.write("\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0093\3\2\2\2")
        buf.write("\u095f\u0960\7\u01cd\2\2\u0960\u0961\7h\2\2\u0961\u0962")
        buf.write("\t\13\2\2\u0962\u0095\3\2\2\2\u0963\u0968\5\u0098M\2\u0964")
        buf.write("\u0965\7\u0201\2\2\u0965\u0968\5\u0432\u021a\2\u0966\u0968")
        buf.write("\5\u009eP\2\u0967\u0963\3\2\2\2\u0967\u0964\3\2\2\2\u0967")
        buf.write("\u0966\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u0967\3\2\2\2")
        buf.write("\u0969\u096a\3\2\2\2\u096a\u0097\3\2\2\2\u096b\u096c\7")
        buf.write("\u017b\2\2\u096c\u0973\7\u0281\2\2\u096d\u096e\7\u017e")
        buf.write("\2\2\u096e\u0973\7\u0281\2\2\u096f\u0970\7\u00e8\2\2\u0970")
        buf.write("\u0973\7\u0281\2\2\u0971\u0973\5\u009aN\2\u0972\u096b")
        buf.write("\3\2\2\2\u0972\u096d\3\2\2\2\u0972\u096f\3\2\2\2\u0972")
        buf.write("\u0971\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0972\3\2\2\2")
        buf.write("\u0974\u0975\3\2\2\2\u0975\u0099\3\2\2\2\u0976\u0977\7")
        buf.write("\u01f2\2\2\u0977\u0991\7\u0287\2\2\u0978\u0979\7\u00e6")
        buf.write("\2\2\u0979\u0992\5\u009cO\2\u097a\u097b\7\u013e\2\2\u097b")
        buf.write("\u0992\5\u009cO\2\u097c\u097d\7\u0127\2\2\u097d\u0992")
        buf.write("\t\30\2\2\u097e\u097f\7\u0121\2\2\u097f\u0992\t\30\2\2")
        buf.write("\u0980\u0981\7\u017c\2\2\u0981\u0992\7\u0281\2\2\u0982")
        buf.write("\u0983\7\u00c4\2\2\u0983\u0992\7\u0281\2\2\u0984\u0985")
        buf.write("\7\u00c3\2\2\u0985\u0986\7\u00ce\2\2\u0986\u0992\7\u0281")
        buf.write("\2\2\u0987\u098a\7\u0167\2\2\u0988\u098b\5\u009cO\2\u0989")
        buf.write("\u098b\7\u0157\2\2\u098a\u0988\3\2\2\2\u098a\u0989\3\2")
        buf.write("\2\2\u098b\u0992\3\2\2\2\u098c\u098d\7,\2\2\u098d\u0992")
        buf.write("\t\31\2\2\u098e\u098f\7\u00bb\2\2\u098f\u0992\t\32\2\2")
        buf.write("\u0990\u0992\7\u009d\2\2\u0991\u0978\3\2\2\2\u0991\u097a")
        buf.write("\3\2\2\2\u0991\u097c\3\2\2\2\u0991\u097e\3\2\2\2\u0991")
        buf.write("\u0980\3\2\2\2\u0991\u0982\3\2\2\2\u0991\u0984\3\2\2\2")
        buf.write("\u0991\u0987\3\2\2\2\u0991\u098c\3\2\2\2\u0991\u098e\3")
        buf.write("\2\2\2\u0991\u0990\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u0991")
        buf.write("\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u0995\3\2\2\2\u0995")
        buf.write("\u0996\7\u0288\2\2\u0996\u009b\3\2\2\2\u0997\u0999\7\u0281")
        buf.write("\2\2\u0998\u099a\7\u02a6\2\2\u0999\u0998\3\2\2\2\u0999")
        buf.write("\u099a\3\2\2\2\u099a\u009d\3\2\2\2\u099b\u099c\t\33\2")
        buf.write("\2\u099c\u009f\3\2\2\2\u099d\u09a5\5\u00a2R\2\u099e\u09a5")
        buf.write("\5\u00a6T\2\u099f\u09a2\5\u00ba^\2\u09a0\u09a2\5\u00ca")
        buf.write("f\2\u09a1\u099f\3\2\2\2\u09a1\u09a0\3\2\2\2\u09a2\u09a5")
        buf.write("\3\2\2\2\u09a3\u09a5\5\u00ccg\2\u09a4\u099d\3\2\2\2\u09a4")
        buf.write("\u099e\3\2\2\2\u09a4\u09a1\3\2\2\2\u09a4\u09a3\3\2\2\2")
        buf.write("\u09a5\u00a1\3\2\2\2\u09a6\u09a7\7J\2\2\u09a7\u09a8\5")
        buf.write("\u043e\u0220\2\u09a8\u09a9\5\u00a4S\2\u09a9\u00a3\3\2")
        buf.write("\2\2\u09aa\u09ac\7\u0097\2\2\u09ab\u09aa\3\2\2\2\u09ab")
        buf.write("\u09ac\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ae\7\u00f7")
        buf.write("\2\2\u09ae\u09b0\7\u015e\2\2\u09af\u09b1\7\u021c\2\2\u09b0")
        buf.write("\u09af\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b2\3\2\2\2")
        buf.write("\u09b2\u09b3\7\u0287\2\2\u09b3\u09b4\5\u03ec\u01f7\2\u09b4")
        buf.write("\u09b5\7\u0288\2\2\u09b5\u09be\3\2\2\2\u09b6\u09b8\7\u0153")
        buf.write("\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09b9")
        buf.write("\3\2\2\2\u09b9\u09ba\7\u01f8\2\2\u09ba\u09bb\7\31\2\2")
        buf.write("\u09bb\u09bc\7\13\2\2\u09bc\u09be\7\u0106\2\2\u09bd\u09ab")
        buf.write("\3\2\2\2\u09bd\u09b7\3\2\2\2\u09be\u00a5\3\2\2\2\u09bf")
        buf.write("\u09c0\7\u013b\2\2\u09c0\u09c3\7\u01ff\2\2\u09c1\u09c4")
        buf.write("\5\u00a8U\2\u09c2\u09c4\7L\2\2\u09c3\u09c1\3\2\2\2\u09c3")
        buf.write("\u09c2\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u09c7\5\u00a4")
        buf.write("S\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c9")
        buf.write("\3\2\2\2\u09c8\u09ca\t\34\2\2\u09c9\u09c8\3\2\2\2\u09c9")
        buf.write("\u09ca\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cc\7\u01f3")
        buf.write("\2\2\u09cc\u09cd\7\26\2\2\u09cd\u09db\5\u0408\u0205\2")
        buf.write("\u09ce\u09d5\7\u0287\2\2\u09cf\u09d0\7\u0287\2\2\u09d0")
        buf.write("\u09d1\5\u00aaV\2\u09d1\u09d2\7\u0288\2\2\u09d2\u09d6")
        buf.write("\3\2\2\2\u09d3\u09d6\5\u0092J\2\u09d4\u09d6\5\u00a0Q\2")
        buf.write("\u09d5\u09cf\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d5\u09d4\3")
        buf.write("\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8")
        buf.write("\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\7\u0288\2\2\u09da")
        buf.write("\u09dc\3\2\2\2\u09db\u09ce\3\2\2\2\u09db\u09dc\3\2\2\2")
        buf.write("\u09dc\u09e2\3\2\2\2\u09dd\u09df\7\u01b2\2\2\u09de\u09e0")
        buf.write("\7\26\2\2\u09df\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0")
        buf.write("\u09e1\3\2\2\2\u09e1\u09e3\t\35\2\2\u09e2\u09dd\3\2\2")
        buf.write("\2\u09e2\u09e3\3\2\2\2\u09e3\u00a7\3\2\2\2\u09e4\u09e5")
        buf.write("\5\u043e\u0220\2\u09e5\u00a9\3\2\2\2\u09e6\u09e9\5\u0404")
        buf.write("\u0203\2\u09e7\u09e9\5\u03ce\u01e8\2\u09e8\u09e6\3\2\2")
        buf.write("\2\u09e8\u09e7\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09eb")
        buf.write("\7\u0082\2\2\u09eb\u09ed\5\u0346\u01a4\2\u09ec\u09ea\3")
        buf.write("\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09f7\3\2\2\2\u09ee\u09f0")
        buf.write("\7\u028d\2\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0")
        buf.write("\u09f1\3\2\2\2\u09f1\u09f3\5\u00acW\2\u09f2\u09ef\3\2")
        buf.write("\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f5")
        buf.write("\3\2\2\2\u09f5\u09f8\3\2\2\2\u09f6\u09f8\5~@\2\u09f7\u09f2")
        buf.write("\3\2\2\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8")
        buf.write("\u09fd\3\2\2\2\u09f9\u09fd\5\u0082B\2\u09fa\u09fd\5\u0088")
        buf.write("E\2\u09fb\u09fd\5\u008aF\2\u09fc\u09e8\3\2\2\2\u09fc\u09f9")
        buf.write("\3\2\2\2\u09fc\u09fa\3\2\2\2\u09fc\u09fb\3\2\2\2\u09fd")
        buf.write("\u00ab\3\2\2\2\u09fe\u09ff\7Z\2\2\u09ff\u0a01\5\u03e8")
        buf.write("\u01f5\2\u0a00\u09fe\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01")
        buf.write("\u0a0b\3\2\2\2\u0a02\u0a04\7\u0153\2\2\u0a03\u0a02\3\2")
        buf.write("\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u0a0c")
        buf.write("\7\u0157\2\2\u0a06\u0a0c\7\u0220\2\2\u0a07\u0a08\7\u0190")
        buf.write("\2\2\u0a08\u0a0c\7\u00fe\2\2\u0a09\u0a0c\5\u00aeX\2\u0a0a")
        buf.write("\u0a0c\5\u00b4[\2\u0a0b\u0a03\3\2\2\2\u0a0b\u0a06\3\2")
        buf.write("\2\2\u0a0b\u0a07\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0b\u0a0a")
        buf.write("\3\2\2\2\u0a0c\u0a0e\3\2\2\2\u0a0d\u0a0f\5\u00b6\\\2\u0a0e")
        buf.write("\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u00ad\3\2\2\2")
        buf.write("\u0a10\u0a11\7\u01a3\2\2\u0a11\u0a12\5\u0408\u0205\2\u0a12")
        buf.write("\u0a13\5\u00b0Y\2\u0a13\u00af\3\2\2\2\u0a14\u0a15\7\u0287")
        buf.write("\2\2\u0a15\u0a16\5\u00b2Z\2\u0a16\u0a17\7\u0288\2\2\u0a17")
        buf.write("\u00b1\3\2\2\2\u0a18\u0a1a\7\u028d\2\2\u0a19\u0a18\3\2")
        buf.write("\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a1d")
        buf.write("\5\u0404\u0203\2\u0a1c\u0a19\3\2\2\2\u0a1d\u0a1e\3\2\2")
        buf.write("\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u00b3")
        buf.write("\3\2\2\2\u0a20\u0a21\7A\2\2\u0a21\u0a22\7\u0287\2\2\u0a22")
        buf.write("\u0a23\5\u0344\u01a3\2\u0a23\u0a25\7\u0288\2\2\u0a24\u0a26")
        buf.write("\7\u008d\2\2\u0a25\u0a24\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26")
        buf.write("\u00b5\3\2\2\2\u0a27\u0a29\7\u0153\2\2\u0a28\u0a27\3\2")
        buf.write("\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a32")
        buf.write("\7\u0084\2\2\u0a2b\u0a2c\7\u00e7\2\2\u0a2c\u0a32\t\13")
        buf.write("\2\2\u0a2d\u0a32\t\36\2\2\u0a2e\u0a32\t\6\2\2\u0a2f\u0a32")
        buf.write("\t\37\2\2\u0a30\u0a32\5\u00b8]\2\u0a31\u0a28\3\2\2\2\u0a31")
        buf.write("\u0a2b\3\2\2\2\u0a31\u0a2d\3\2\2\2\u0a31\u0a2e\3\2\2\2")
        buf.write("\u0a31\u0a2f\3\2\2\2\u0a31\u0a30\3\2\2\2\u0a32\u0a33\3")
        buf.write("\2\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u00b7")
        buf.write("\3\2\2\2\u0a35\u0a36\7\u022c\2\2\u0a36\u0a3d\7\u00e0\2")
        buf.write("\2\u0a37\u0a3e\5\u03fa\u01fe\2\u0a38\u0a39\7\u0287\2\2")
        buf.write("\u0a39\u0a3a\5$\23\2\u0a3a\u0a3b\7\u0288\2\2\u0a3b\u0a3e")
        buf.write("\3\2\2\2\u0a3c\u0a3e\5*\26\2\u0a3d\u0a37\3\2\2\2\u0a3d")
        buf.write("\u0a38\3\2\2\2\u0a3d\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2")
        buf.write("\u0a3e\u00b9\3\2\2\2\u0a3f\u0a40\7\u0233\2\2\u0a40\u0a46")
        buf.write("\5T+\2\u0a41\u0a43\5\u00a4S\2\u0a42\u0a41\3\2\2\2\u0a42")
        buf.write("\u0a43\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a47\5\u00bc")
        buf.write("_\2\u0a45\u0a47\5\u00a4S\2\u0a46\u0a42\3\2\2\2\u0a46\u0a45")
        buf.write("\3\2\2\2\u0a47\u00bb\3\2\2\2\u0a48\u0a49\7\u01f3\2\2\u0a49")
        buf.write("\u0a4b\7\26\2\2\u0a4a\u0a4c\t\22\2\2\u0a4b\u0a4a\3\2\2")
        buf.write("\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a56")
        buf.write("\7\u010f\2\2\u0a4e\u0a50\5R*\2\u0a4f\u0a4e\3\2\2\2\u0a4f")
        buf.write("\u0a50\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a52\7\u0287")
        buf.write("\2\2\u0a52\u0a53\5\u00be`\2\u0a53\u0a54\7\u0288\2\2\u0a54")
        buf.write("\u0a57\3\2\2\2\u0a55\u0a57\5R*\2\u0a56\u0a4f\3\2\2\2\u0a56")
        buf.write("\u0a55\3\2\2\2\u0a57\u00bd\3\2\2\2\u0a58\u0a59\7\u0201")
        buf.write("\2\2\u0a59\u0a60\5,\27\2\u0a5a\u0a5c\5\u00c0a\2\u0a5b")
        buf.write("\u0a5d\5\u009aN\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2")
        buf.write("\2\2\u0a5d\u0a60\3\2\2\2\u0a5e\u0a60\5\u009aN\2\u0a5f")
        buf.write("\u0a58\3\2\2\2\u0a5f\u0a5a\3\2\2\2\u0a5f\u0a5e\3\2\2\2")
        buf.write("\u0a60\u00bf\3\2\2\2\u0a61\u0a62\t\6\2\2\u0a62\u0a63\7")
        buf.write("\u01f2\2\2\u0a63\u0a64\7\u00db\2\2\u0a64\u0a7b\7\u01bc")
        buf.write("\2\2\u0a65\u0a66\7D\2\2\u0a66\u0a7b\7\u0281\2\2\u0a67")
        buf.write("\u0a68\7\u017f\2\2\u0a68\u0a7b\7\u0281\2\2\u0a69\u0a6a")
        buf.write("\7\u00c5\2\2\u0a6a\u0a7b\7\u0281\2\2\u0a6b\u0a7b\5\u00c2")
        buf.write("b\2\u0a6c\u0a7b\5\u00c4c\2\u0a6d\u0a7b\5\u00c6d\2\u0a6e")
        buf.write("\u0a6f\7\u009d\2\2\u0a6f\u0a7b\5\u00c8e\2\u0a70\u0a7b")
        buf.write("\7\u0080\2\2\u0a71\u0a76\78\2\2\u0a72\u0a76\7\u0141\2")
        buf.write("\2\u0a73\u0a74\78\2\2\u0a74\u0a76\7\u019a\2\2\u0a75\u0a71")
        buf.write("\3\2\2\2\u0a75\u0a72\3\2\2\2\u0a75\u0a73\3\2\2\2\u0a76")
        buf.write("\u0a78\3\2\2\2\u0a77\u0a79\5\u009eP\2\u0a78\u0a77\3\2")
        buf.write("\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\3\2\2\2\u0a7a\u0a61")
        buf.write("\3\2\2\2\u0a7a\u0a65\3\2\2\2\u0a7a\u0a67\3\2\2\2\u0a7a")
        buf.write("\u0a69\3\2\2\2\u0a7a\u0a6b\3\2\2\2\u0a7a\u0a6c\3\2\2\2")
        buf.write("\u0a7a\u0a6d\3\2\2\2\u0a7a\u0a6e\3\2\2\2\u0a7a\u0a70\3")
        buf.write("\2\2\2\u0a7a\u0a75\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7a")
        buf.write("\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u00c1\3\2\2\2\u0a7e")
        buf.write("\u0a84\7\u01b1\2\2\u0a7f\u0a85\7\u0270\2\2\u0a80\u0a81")
        buf.write("\7\u0272\2\2\u0a81\u0a85\7\u0281\2\2\u0a82\u0a85\7\35")
        buf.write("\2\2\u0a83\u0a85\7\u014b\2\2\u0a84\u0a7f\3\2\2\2\u0a84")
        buf.write("\u0a80\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a83\3\2\2\2")
        buf.write("\u0a84\u0a85\3\2\2\2\u0a85\u00c3\3\2\2\2\u0a86\u0a87\t")
        buf.write(" \2\2\u0a87\u00c5\3\2\2\2\u0a88\u0a8e\7\u0142\2\2\u0a89")
        buf.write("\u0a8b\7U\2\2\u0a8a\u0a8c\t!\2\2\u0a8b\u0a8a\3\2\2\2\u0a8b")
        buf.write("\u0a8c\3\2\2\2\u0a8c\u0a8e\3\2\2\2\u0a8d\u0a88\3\2\2\2")
        buf.write("\u0a8d\u0a89\3\2\2\2\u0a8e\u00c7\3\2\2\2\u0a8f\u0a90\7")
        buf.write("\u022c\2\2\u0a90\u0a92\7\u0283\2\2\u0a91\u0a8f\3\2\2\2")
        buf.write("\u0a91\u0a92\3\2\2\2\u0a92\u0a96\3\2\2\2\u0a93\u0a94\7")
        buf.write("\u00d5\2\2\u0a94\u0a95\7\65\2\2\u0a95\u0a97\7\u02a6\2")
        buf.write("\2\u0a96\u0a93\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0a99")
        buf.write("\3\2\2\2\u0a98\u0a9a\7\u0283\2\2\u0a99\u0a98\3\2\2\2\u0a99")
        buf.write("\u0a9a\3\2\2\2\u0a9a\u0a9f\3\2\2\2\u0a9b\u0a9d\7\u013f")
        buf.write("\2\2\u0a9c\u0a9b\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9e")
        buf.write("\3\2\2\2\u0a9e\u0aa0\7\u01c1\2\2\u0a9f\u0a9c\3\2\2\2\u0a9f")
        buf.write("\u0aa0\3\2\2\2\u0aa0\u00c9\3\2\2\2\u0aa1\u0ac6\7\u010f")
        buf.write("\2\2\u0aa2\u0aa7\7\u0287\2\2\u0aa3\u0aa5\7\u028d\2\2\u0aa4")
        buf.write("\u0aa3\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa6\3\2\2\2")
        buf.write("\u0aa6\u0aa8\5P)\2\u0aa7\u0aa4\3\2\2\2\u0aa8\u0aa9\3\2")
        buf.write("\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aab")
        buf.write("\3\2\2\2\u0aab\u0aac\7\u0288\2\2\u0aac\u0aad\7\u01f3\2")
        buf.write("\2\u0aad\u0ab3\7\26\2\2\u0aae\u0ab4\t\22\2\2\u0aaf\u0ab0")
        buf.write("\7\u0287\2\2\u0ab0\u0ab1\5\u00be`\2\u0ab1\u0ab2\7\u0288")
        buf.write("\2\2\u0ab2\u0ab4\3\2\2\2\u0ab3\u0aae\3\2\2\2\u0ab3\u0aaf")
        buf.write("\3\2\2\2\u0ab4\u0ab5\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab5")
        buf.write("\u0ab6\3\2\2\2\u0ab6\u0ac7\3\2\2\2\u0ab7\u0ab8\7\u0287")
        buf.write("\2\2\u0ab8\u0ab9\5P)\2\u0ab9\u0aba\7\u0288\2\2\u0aba\u0abb")
        buf.write("\7\u01f3\2\2\u0abb\u0ac2\7\26\2\2\u0abc\u0ac3\t\22\2\2")
        buf.write("\u0abd\u0ac3\5R*\2\u0abe\u0abf\7\u0287\2\2\u0abf\u0ac0")
        buf.write("\5\u00be`\2\u0ac0\u0ac1\7\u0288\2\2\u0ac1\u0ac3\3\2\2")
        buf.write("\2\u0ac2\u0abc\3\2\2\2\u0ac2\u0abd\3\2\2\2\u0ac2\u0abe")
        buf.write("\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4")
        buf.write("\u0ac5\3\2\2\2\u0ac5\u0ac7\3\2\2\2\u0ac6\u0aa2\3\2\2\2")
        buf.write("\u0ac6\u0ab7\3\2\2\2\u0ac7\u00cb\3\2\2\2\u0ac8\u0aca\7")
        buf.write("\u025a\2\2\u0ac9\u0acb\7J\2\2\u0aca\u0ac9\3\2\2\2\u0aca")
        buf.write("\u0acb\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\5\u0404")
        buf.write("\u0203\2\u0acd\u0acf\5\u00ceh\2\u0ace\u0acd\3\2\2\2\u0ace")
        buf.write("\u0acf\3\2\2\2\u0acf\u0ad1\3\2\2\2\u0ad0\u0ad2\5\u00d0")
        buf.write("i\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u00cd")
        buf.write("\3\2\2\2\u0ad3\u0ad4\7\u01f3\2\2\u0ad4\u0aec\7\26\2\2")
        buf.write("\u0ad5\u0ad6\7\u015d\2\2\u0ad6\u0aed\7\u01a8\2\2\u0ad7")
        buf.write("\u0ad9\t\22\2\2\u0ad8\u0ad7\3\2\2\2\u0ad8\u0ad9\3\2\2")
        buf.write("\2\u0ad9\u0add\3\2\2\2\u0ada\u0ade\7E\2\2\u0adb\u0adc")
        buf.write("\7\'\2\2\u0adc\u0ade\7\u0249\2\2\u0add\u0ada\3\2\2\2\u0add")
        buf.write("\u0adb\3\2\2\2\u0ade\u0aea\3\2\2\2\u0adf\u0ae4\5R*\2\u0ae0")
        buf.write("\u0ae1\7\u0287\2\2\u0ae1\u0ae2\5\u00c0a\2\u0ae2\u0ae3")
        buf.write("\7\u0288\2\2\u0ae3\u0ae5\3\2\2\2\u0ae4\u0ae0\3\2\2\2\u0ae4")
        buf.write("\u0ae5\3\2\2\2\u0ae5\u0aeb\3\2\2\2\u0ae6\u0ae7\7\u0287")
        buf.write("\2\2\u0ae7\u0ae8\5\u00c0a\2\u0ae8\u0ae9\7\u0288\2\2\u0ae9")
        buf.write("\u0aeb\3\2\2\2\u0aea\u0adf\3\2\2\2\u0aea\u0ae6\3\2\2\2")
        buf.write("\u0aea\u0aeb\3\2\2\2\u0aeb\u0aed\3\2\2\2\u0aec\u0ad5\3")
        buf.write("\2\2\2\u0aec\u0ad8\3\2\2\2\u0aed\u0af3\3\2\2\2\u0aee\u0aef")
        buf.write("\7\u01f3\2\2\u0aef\u0af0\7\u0234\2\2\u0af0\u0af1\7\26")
        buf.write("\2\2\u0af1\u0af3\t\"\2\2\u0af2\u0ad3\3\2\2\2\u0af2\u0aee")
        buf.write("\3\2\2\2\u0af3\u00cf\3\2\2\2\u0af4\u0af5\7\u0257\2\2\u0af5")
        buf.write("\u0af7\7\u0284\2\2\u0af6\u0af4\3\2\2\2\u0af6\u0af7\3\2")
        buf.write("\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\7\u0097\2\2\u0af9")
        buf.write("\u0afd\7\u0284\2\2\u0afa\u0afb\5\u00d2j\2\u0afb\u0afc")
        buf.write("\7\u014c\2\2\u0afc\u0afe\3\2\2\2\u0afd\u0afa\3\2\2\2\u0afd")
        buf.write("\u0afe\3\2\2\2\u0afe\u0b02\3\2\2\2\u0aff\u0b00\5\u00d2")
        buf.write("j\2\u0b00\u0b01\7\23\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0aff")
        buf.write("\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u00d1\3\2\2\2\u0b04")
        buf.write("\u0b05\t#\2\2\u0b05\u00d3\3\2\2\2\u0b06\u0b0f\5\u00d6")
        buf.write("l\2\u0b07\u0b0f\5\u00dco\2\u0b08\u0b0f\5\u00e0q\2\u0b09")
        buf.write("\u0b0f\5\u00e2r\2\u0b0a\u0b0f\5\u00f8}\2\u0b0b\u0b0f\5")
        buf.write("\u00fc\177\2\u0b0c\u0b0f\5\u00fe\u0080\2\u0b0d\u0b0f\5")
        buf.write("\u0102\u0082\2\u0b0e\u0b06\3\2\2\2\u0b0e\u0b07\3\2\2\2")
        buf.write("\u0b0e\u0b08\3\2\2\2\u0b0e\u0b09\3\2\2\2\u0b0e\u0b0a\3")
        buf.write("\2\2\2\u0b0e\u0b0b\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0e\u0b0d")
        buf.write("\3\2\2\2\u0b0f\u00d5\3\2\2\2\u0b10\u0b11\7\u0178\2\2\u0b11")
        buf.write("\u0b12\7\65\2\2\u0b12\u0b13\7\u0197\2\2\u0b13\u0b27\5")
        buf.write("\u00b0Y\2\u0b14\u0b15\7\u00f3\2\2\u0b15\u0b16\7\u0287")
        buf.write("\2\2\u0b16\u0b17\5\u0346\u01a4\2\u0b17\u0b25\7\u0288\2")
        buf.write("\2\u0b18\u0b19\7\u01f3\2\2\u0b19\u0b1a\7\u00db\2\2\u0b1a")
        buf.write("\u0b1f\7\u0287\2\2\u0b1b\u0b1d\7\u028d\2\2\u0b1c\u0b1b")
        buf.write("\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e")
        buf.write("\u0b20\5,\27\2\u0b1f\u0b1c\3\2\2\2\u0b20\u0b21\3\2\2\2")
        buf.write("\u0b21\u0b1f\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b23\3")
        buf.write("\2\2\2\u0b23\u0b24\7\u0288\2\2\u0b24\u0b26\3\2\2\2\u0b25")
        buf.write("\u0b18\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b28\3\2\2\2")
        buf.write("\u0b27\u0b14\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b29\3")
        buf.write("\2\2\2\u0b29\u0b34\7\u0287\2\2\u0b2a\u0b2c\7\u028d\2\2")
        buf.write("\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2d\3")
        buf.write("\2\2\2\u0b2d\u0b2f\7\u0178\2\2\u0b2e\u0b30\5@!\2\u0b2f")
        buf.write("\u0b2e\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b31\3\2\2\2")
        buf.write("\u0b31\u0b32\5\u00d8m\2\u0b32\u0b33\5\u00dan\2\u0b33\u0b35")
        buf.write("\3\2\2\2\u0b34\u0b2b\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36")
        buf.write("\u0b34\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38\3\2\2\2")
        buf.write("\u0b38\u0b39\7\u0288\2\2\u0b39\u00d7\3\2\2\2\u0b3a\u0b3b")
        buf.write("\7\u022f\2\2\u0b3b\u0b3c\7\u0104\2\2\u0b3c\u0b3d\7\u0204")
        buf.write("\2\2\u0b3d\u0b42\7\u0287\2\2\u0b3e\u0b40\7\u028d\2\2\u0b3f")
        buf.write("\u0b3e\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b41\3\2\2\2")
        buf.write("\u0b41\u0b43\5B\"\2\u0b42\u0b3f\3\2\2\2\u0b43\u0b44\3")
        buf.write("\2\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46")
        buf.write("\3\2\2\2\u0b46\u0b47\7\u0288\2\2\u0b47\u00d9\3\2\2\2\u0b48")
        buf.write("\u0b4a\5\u0094K\2\u0b49\u0b48\3\2\2\2\u0b49\u0b4a\3\2")
        buf.write("\2\2\u0b4a\u0b4c\3\2\2\2\u0b4b\u0b4d\5\u0096L\2\u0b4c")
        buf.write("\u0b4b\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b50\3\2\2\2")
        buf.write("\u0b4e\u0b51\5L\'\2\u0b4f\u0b51\5.\30\2\u0b50\u0b4e\3")
        buf.write("\2\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b56")
        buf.write("\3\2\2\2\u0b52\u0b54\7\u0171\2\2\u0b53\u0b55\5\u0096L")
        buf.write("\2\u0b54\u0b53\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57")
        buf.write("\3\2\2\2\u0b56\u0b52\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57")
        buf.write("\u0b5b\3\2\2\2\u0b58\u0b5c\5\u00caf\2\u0b59\u0b5c\5\u00ba")
        buf.write("^\2\u0b5a\u0b5c\5\u00a6T\2\u0b5b\u0b58\3\2\2\2\u0b5b\u0b59")
        buf.write("\3\2\2\2\u0b5b\u0b5a\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c")
        buf.write("\u00db\3\2\2\2\u0b5d\u0b5e\7\u0178\2\2\u0b5e\u0b5f\7\65")
        buf.write("\2\2\u0b5f\u0b60\7\u010d\2\2\u0b60\u0b61\7\u0287\2\2\u0b61")
        buf.write("\u0b62\5\u0404\u0203\2\u0b62\u0b74\7\u0288\2\2\u0b63\u0b6e")
        buf.write("\7\u0287\2\2\u0b64\u0b66\7\u028d\2\2\u0b65\u0b64\3\2\2")
        buf.write("\2\u0b65\u0b66\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b69")
        buf.write("\7\u0178\2\2\u0b68\u0b6a\5@!\2\u0b69\u0b68\3\2\2\2\u0b69")
        buf.write("\u0b6a\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6c\5\u00de")
        buf.write("p\2\u0b6c\u0b6d\5\u00dan\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b65")
        buf.write("\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70")
        buf.write("\u0b71\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b73\7\u0288")
        buf.write("\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b63\3\2\2\2\u0b74\u0b75")
        buf.write("\3\2\2\2\u0b75\u00dd\3\2\2\2\u0b76\u0b77\7\u022f\2\2\u0b77")
        buf.write("\u0b81\7\u0287\2\2\u0b78\u0b7a\7\u028d\2\2\u0b79\u0b78")
        buf.write("\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b")
        buf.write("\u0b7d\5B\"\2\u0b7c\u0b79\3\2\2\2\u0b7d\u0b7e\3\2\2\2")
        buf.write("\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b82\3")
        buf.write("\2\2\2\u0b80\u0b82\7\u0082\2\2\u0b81\u0b7c\3\2\2\2\u0b81")
        buf.write("\u0b80\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b84\7\u0288")
        buf.write("\2\2\u0b84\u00df\3\2\2\2\u0b85\u0b86\7\u0178\2\2\u0b86")
        buf.write("\u0b87\7\65\2\2\u0b87\u0b88\7\u00d0\2\2\u0b88\u0b8b\5")
        buf.write("\u00b0Y\2\u0b89\u0b8c\5H%\2\u0b8a\u0b8c\5V,\2\u0b8b\u0b89")
        buf.write("\3\2\2\2\u0b8b\u0b8a\3\2\2\2\u0b8c\u00e1\3\2\2\2\u0b8d")
        buf.write("\u0b8e\7\u0178\2\2\u0b8e\u0b8f\7\65\2\2\u0b8f\u0b90\7")
        buf.write("\u0197\2\2\u0b90\u0ba4\5\u00b0Y\2\u0b91\u0b92\7\u00f3")
        buf.write("\2\2\u0b92\u0b93\7\u0287\2\2\u0b93\u0b94\5\u0346\u01a4")
        buf.write("\2\u0b94\u0ba2\7\u0288\2\2\u0b95\u0b96\7\u01f3\2\2\u0b96")
        buf.write("\u0b97\7\u00db\2\2\u0b97\u0b9c\7\u0287\2\2\u0b98\u0b9a")
        buf.write("\7\u028d\2\2\u0b99\u0b98\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a")
        buf.write("\u0b9b\3\2\2\2\u0b9b\u0b9d\5,\27\2\u0b9c\u0b99\3\2\2\2")
        buf.write("\u0b9d\u0b9e\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9f\3")
        buf.write("\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0\u0ba1\7\u0288\2\2\u0ba1")
        buf.write("\u0ba3\3\2\2\2\u0ba2\u0b95\3\2\2\2\u0ba2\u0ba3\3\2\2\2")
        buf.write("\u0ba3\u0ba5\3\2\2\2\u0ba4\u0b91\3\2\2\2\u0ba4\u0ba5\3")
        buf.write("\2\2\2\u0ba5\u0ba9\3\2\2\2\u0ba6\u0baa\5\u00e4s\2\u0ba7")
        buf.write("\u0baa\5\u00e6t\2\u0ba8\u0baa\5\u00f2z\2\u0ba9\u0ba6\3")
        buf.write("\2\2\2\u0ba9\u0ba7\3\2\2\2\u0ba9\u0ba8\3\2\2\2\u0baa\u0bab")
        buf.write("\3\2\2\2\u0bab\u0bb0\7\u0287\2\2\u0bac\u0bae\7\u028d\2")
        buf.write("\2\u0bad\u0bac\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0baf")
        buf.write("\3\2\2\2\u0baf\u0bb1\5\u00f4{\2\u0bb0\u0bad\3\2\2\2\u0bb1")
        buf.write("\u0bb2\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2\2\2")
        buf.write("\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb5\7\u0288\2\2\u0bb5\u00e3")
        buf.write("\3\2\2\2\u0bb6\u0bb7\7\u01f6\2\2\u0bb7\u0bb8\7\65\2\2")
        buf.write("\u0bb8\u0bb9\7\u0197\2\2\u0bb9\u0bbb\5\u00b0Y\2\u0bba")
        buf.write("\u0bbc\5\u00e8u\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2")
        buf.write("\2\2\u0bbc\u00e5\3\2\2\2\u0bbd\u0bbe\7\u01f6\2\2\u0bbe")
        buf.write("\u0bbf\7\65\2\2\u0bbf\u0bc0\7\u010d\2\2\u0bc0\u0bc1\7")
        buf.write("\u0287\2\2\u0bc1\u0bc2\5\u0404\u0203\2\u0bc2\u0bc4\7\u0288")
        buf.write("\2\2\u0bc3\u0bc5\5\u00e8u\2\u0bc4\u0bc3\3\2\2\2\u0bc4")
        buf.write("\u0bc5\3\2\2\2\u0bc5\u00e7\3\2\2\2\u0bc6\u0bc7\7\u01f6")
        buf.write("\2\2\u0bc7\u0be6\7\u0202\2\2\u0bc8\u0be1\7\u0287\2\2\u0bc9")
        buf.write("\u0bcb\7\u028d\2\2\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3\2")
        buf.write("\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\5\u00eav\2\u0bcd")
        buf.write("\u0bca\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u0bcd\3\2\2\2")
        buf.write("\u0bcf\u0bd0\3\2\2\2\u0bd0\u0be2\3\2\2\2\u0bd1\u0bd3\7")
        buf.write("\u028d\2\2\u0bd2\u0bd1\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3")
        buf.write("\u0bd4\3\2\2\2\u0bd4\u0bd6\5\u00ecw\2\u0bd5\u0bd2\3\2")
        buf.write("\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd5\3\2\2\2\u0bd7\u0bd8")
        buf.write("\3\2\2\2\u0bd8\u0be2\3\2\2\2\u0bd9\u0bdb\7\u028d\2\2\u0bda")
        buf.write("\u0bd9\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdc\3\2\2\2")
        buf.write("\u0bdc\u0bde\5\u00eex\2\u0bdd\u0bda\3\2\2\2\u0bde\u0bdf")
        buf.write("\3\2\2\2\u0bdf\u0bdd\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0")
        buf.write("\u0be2\3\2\2\2\u0be1\u0bcd\3\2\2\2\u0be1\u0bd5\3\2\2\2")
        buf.write("\u0be1\u0bdd\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be4\7")
        buf.write("\u0288\2\2\u0be4\u0be7\3\2\2\2\u0be5\u0be7\5\u00f0y\2")
        buf.write("\u0be6\u0bc8\3\2\2\2\u0be6\u0be5\3\2\2\2\u0be7\u00e9\3")
        buf.write("\2\2\2\u0be8\u0bea\7\u01f6\2\2\u0be9\u0beb\5f\64\2\u0bea")
        buf.write("\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bec\3\2\2\2")
        buf.write("\u0bec\u0bee\5\u00d8m\2\u0bed\u0bef\5J&\2\u0bee\u0bed")
        buf.write("\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u00eb\3\2\2\2\u0bf0")
        buf.write("\u0bf2\7\u01f6\2\2\u0bf1\u0bf3\5f\64\2\u0bf2\u0bf1\3\2")
        buf.write("\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf6")
        buf.write("\5\u00dep\2\u0bf5\u0bf7\5J&\2\u0bf6\u0bf5\3\2\2\2\u0bf6")
        buf.write("\u0bf7\3\2\2\2\u0bf7\u00ed\3\2\2\2\u0bf8\u0bfa\7\u01f6")
        buf.write("\2\2\u0bf9\u0bfb\5f\64\2\u0bfa\u0bf9\3\2\2\2\u0bfa\u0bfb")
        buf.write("\3\2\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bfe\5J&\2\u0bfd\u0bfc")
        buf.write("\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u00ef\3\2\2\2\u0bff")
        buf.write("\u0c00\7\u0281\2\2\u0c00\u00f1\3\2\2\2\u0c01\u0c02\7\u01f6")
        buf.write("\2\2\u0c02\u0c03\7\65\2\2\u0c03\u0c04\7\u00d0\2\2\u0c04")
        buf.write("\u0c17\5\u00b0Y\2\u0c05\u0c06\7\u01f7\2\2\u0c06\u0c14")
        buf.write("\7\u0281\2\2\u0c07\u0c08\7\u01f3\2\2\u0c08\u0c09\7\u00db")
        buf.write("\2\2\u0c09\u0c0e\7\u0287\2\2\u0c0a\u0c0c\7\u028d\2\2\u0c0b")
        buf.write("\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\3\2\2\2")
        buf.write("\u0c0d\u0c0f\5,\27\2\u0c0e\u0c0b\3\2\2\2\u0c0f\u0c10\3")
        buf.write("\2\2\2\u0c10\u0c0e\3\2\2\2\u0c10\u0c11\3\2\2\2\u0c11\u0c12")
        buf.write("\3\2\2\2\u0c12\u0c13\7\u0288\2\2\u0c13\u0c15\3\2\2\2\u0c14")
        buf.write("\u0c07\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c18\3\2\2\2")
        buf.write("\u0c16\u0c18\5\u00e8u\2\u0c17\u0c05\3\2\2\2\u0c17\u0c16")
        buf.write("\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u00f3\3\2\2\2\u0c19")
        buf.write("\u0c1b\7\u0178\2\2\u0c1a\u0c1c\5@!\2\u0c1b\u0c1a\3\2\2")
        buf.write("\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e")
        buf.write("\5\u00d8m\2\u0c1e\u0c3f\5\u00dan\2\u0c1f\u0c38\7\u0287")
        buf.write("\2\2\u0c20\u0c22\7\u028d\2\2\u0c21\u0c20\3\2\2\2\u0c21")
        buf.write("\u0c22\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c25\5\u00ea")
        buf.write("v\2\u0c24\u0c21\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c24")
        buf.write("\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c39\3\2\2\2\u0c28")
        buf.write("\u0c2a\7\u028d\2\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2")
        buf.write("\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2d\5\u00ecw\2\u0c2c")
        buf.write("\u0c29\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c2c\3\2\2\2")
        buf.write("\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c39\3\2\2\2\u0c30\u0c32\7")
        buf.write("\u028d\2\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32")
        buf.write("\u0c33\3\2\2\2\u0c33\u0c35\5\u00eex\2\u0c34\u0c31\3\2")
        buf.write("\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c34\3\2\2\2\u0c36\u0c37")
        buf.write("\3\2\2\2\u0c37\u0c39\3\2\2\2\u0c38\u0c24\3\2\2\2\u0c38")
        buf.write("\u0c2c\3\2\2\2\u0c38\u0c34\3\2\2\2\u0c39\u0c3a\3\2\2\2")
        buf.write("\u0c3a\u0c3b\7\u0288\2\2\u0c3b\u0c3e\3\2\2\2\u0c3c\u0c3e")
        buf.write("\5\u00f6|\2\u0c3d\u0c1f\3\2\2\2\u0c3d\u0c3c\3\2\2\2\u0c3e")
        buf.write("\u0c40\3\2\2\2\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2")
        buf.write("\u0c40\u00f5\3\2\2\2\u0c41\u0c42\7\u01f7\2\2\u0c42\u0c50")
        buf.write("\7\u0281\2\2\u0c43\u0c44\7\u01f3\2\2\u0c44\u0c45\7\u00db")
        buf.write("\2\2\u0c45\u0c4a\7\u0287\2\2\u0c46\u0c48\7\u028d\2\2\u0c47")
        buf.write("\u0c46\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c49\3\2\2\2")
        buf.write("\u0c49\u0c4b\5,\27\2\u0c4a\u0c47\3\2\2\2\u0c4b\u0c4c\3")
        buf.write("\2\2\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4e")
        buf.write("\3\2\2\2\u0c4e\u0c4f\7\u0288\2\2\u0c4f\u0c51\3\2\2\2\u0c50")
        buf.write("\u0c43\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u00f7\3\2\2\2")
        buf.write("\u0c52\u0c53\7\u0178\2\2\u0c53\u0c54\7\65\2\2\u0c54\u0c55")
        buf.write("\7\u010d\2\2\u0c55\u0c56\7\u0287\2\2\u0c56\u0c57\5\u0404")
        buf.write("\u0203\2\u0c57\u0c5b\7\u0288\2\2\u0c58\u0c5c\5\u00e4s")
        buf.write("\2\u0c59\u0c5c\5\u00e6t\2\u0c5a\u0c5c\5\u00f2z\2\u0c5b")
        buf.write("\u0c58\3\2\2\2\u0c5b\u0c59\3\2\2\2\u0c5b\u0c5a\3\2\2\2")
        buf.write("\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c62\7\u0287\2\2\u0c5e\u0c60")
        buf.write("\7\u028d\2\2\u0c5f\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60")
        buf.write("\u0c61\3\2\2\2\u0c61\u0c63\5\u00fa~\2\u0c62\u0c5f\3\2")
        buf.write("\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c62\3\2\2\2\u0c64\u0c65")
        buf.write("\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c67\7\u0288\2\2\u0c67")
        buf.write("\u00f9\3\2\2\2\u0c68\u0c6a\7\u0178\2\2\u0c69\u0c6b\5@")
        buf.write("!\2\u0c6a\u0c69\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c")
        buf.write("\3\2\2\2\u0c6c\u0c6d\5\u00dep\2\u0c6d\u0c8e\5\u00dan\2")
        buf.write("\u0c6e\u0c87\7\u0287\2\2\u0c6f\u0c71\7\u028d\2\2\u0c70")
        buf.write("\u0c6f\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c72\3\2\2\2")
        buf.write("\u0c72\u0c74\5\u00eav\2\u0c73\u0c70\3\2\2\2\u0c74\u0c75")
        buf.write("\3\2\2\2\u0c75\u0c73\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76")
        buf.write("\u0c88\3\2\2\2\u0c77\u0c79\7\u028d\2\2\u0c78\u0c77\3\2")
        buf.write("\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7c")
        buf.write("\5\u00ecw\2\u0c7b\u0c78\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d")
        buf.write("\u0c7b\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c88\3\2\2\2")
        buf.write("\u0c7f\u0c81\7\u028d\2\2\u0c80\u0c7f\3\2\2\2\u0c80\u0c81")
        buf.write("\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c84\5\u00eex\2\u0c83")
        buf.write("\u0c80\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c83\3\2\2\2")
        buf.write("\u0c85\u0c86\3\2\2\2\u0c86\u0c88\3\2\2\2\u0c87\u0c73\3")
        buf.write("\2\2\2\u0c87\u0c7b\3\2\2\2\u0c87\u0c83\3\2\2\2\u0c88\u0c89")
        buf.write("\3\2\2\2\u0c89\u0c8a\7\u0288\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b")
        buf.write("\u0c8d\5\u00f6|\2\u0c8c\u0c6e\3\2\2\2\u0c8c\u0c8b\3\2")
        buf.write("\2\2\u0c8d\u0c8f\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8f")
        buf.write("\3\2\2\2\u0c8f\u00fb\3\2\2\2\u0c90\u0c91\7\u0178\2\2\u0c91")
        buf.write("\u0c92\7\65\2\2\u0c92\u0c93\7\u00d0\2\2\u0c93\u0c96\7")
        buf.write("\u0287\2\2\u0c94\u0c95\7\u028d\2\2\u0c95\u0c97\5\u0404")
        buf.write("\u0203\2\u0c96\u0c94\3\2\2\2\u0c97\u0c98\3\2\2\2\u0c98")
        buf.write("\u0c96\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9a\3\2\2\2")
        buf.write("\u0c9a\u0c9e\7\u0288\2\2\u0c9b\u0c9f\5\u00e4s\2\u0c9c")
        buf.write("\u0c9f\5\u00e6t\2\u0c9d\u0c9f\5\u00f2z\2\u0c9e\u0c9b\3")
        buf.write("\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9e\u0c9d\3\2\2\2\u0c9f\u0ca2")
        buf.write("\3\2\2\2\u0ca0\u0ca3\5H%\2\u0ca1\u0ca3\5V,\2\u0ca2\u0ca0")
        buf.write("\3\2\2\2\u0ca2\u0ca1\3\2\2\2\u0ca3\u00fd\3\2\2\2\u0ca4")
        buf.write("\u0ca5\7\u0178\2\2\u0ca5\u0ca6\7\65\2\2\u0ca6\u0ca7\7")
        buf.write("\u01a2\2\2\u0ca7\u0ca8\7\u0287\2\2\u0ca8\u0ca9\5\u043e")
        buf.write("\u0220\2\u0ca9\u0cb5\7\u0288\2\2\u0caa\u0caf\7\u0287\2")
        buf.write("\2\u0cab\u0cad\7\u028d\2\2\u0cac\u0cab\3\2\2\2\u0cac\u0cad")
        buf.write("\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cb0\5\u0100\u0081")
        buf.write("\2\u0caf\u0cac\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0caf")
        buf.write("\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3")
        buf.write("\u0cb4\7\u0288\2\2\u0cb4\u0cb6\3\2\2\2\u0cb5\u0caa\3\2")
        buf.write("\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u00ff\3\2\2\2\u0cb7\u0cb9")
        buf.write("\7\u0178\2\2\u0cb8\u0cba\5@!\2\u0cb9\u0cb8\3\2\2\2\u0cb9")
        buf.write("\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\5\u00da")
        buf.write("n\2\u0cbc\u0101\3\2\2\2\u0cbd\u0cbe\7\u0178\2\2\u0cbe")
        buf.write("\u0cbf\7\65\2\2\u0cbf\u0cca\7\u01fe\2\2\u0cc0\u0cc1\7")
        buf.write("\u0186\2\2\u0cc1\u0ccb\7\u0281\2\2\u0cc2\u0cc4\7\u028d")
        buf.write("\2\2\u0cc3\u0cc2\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc5")
        buf.write("\3\2\2\2\u0cc5\u0cc7\5\u0100\u0081\2\u0cc6\u0cc3\3\2\2")
        buf.write("\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc8\u0cc9")
        buf.write("\3\2\2\2\u0cc9\u0ccb\3\2\2\2\u0cca\u0cc0\3\2\2\2\u0cca")
        buf.write("\u0cc6\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0103\3\2\2\2")
        buf.write("\u0ccc\u0cce\t\6\2\2\u0ccd\u0ccf\t\37\2\2\u0cce\u0ccd")
        buf.write("\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd6\3\2\2\2\u0cd0")
        buf.write("\u0cd1\7\u0220\2\2\u0cd1\u0cd7\5\u00b0Y\2\u0cd2\u0cd3")
        buf.write("\7\u0190\2\2\u0cd3\u0cd7\7\u00fe\2\2\u0cd4\u0cd5\7Z\2")
        buf.write("\2\u0cd5\u0cd7\5\u03e8\u01f5\2\u0cd6\u0cd0\3\2\2\2\u0cd6")
        buf.write("\u0cd2\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd7\u0cd9\3\2\2\2")
        buf.write("\u0cd8\u0cda\5\u00b8]\2\u0cd9\u0cd8\3\2\2\2\u0cd9\u0cda")
        buf.write("\3\2\2\2\u0cda\u0cdc\3\2\2\2\u0cdb\u0cdd\5\u0106\u0084")
        buf.write("\2\u0cdc\u0cdb\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd\u0cdf")
        buf.write("\3\2\2\2\u0cde\u0ce0\7;\2\2\u0cdf\u0cde\3\2\2\2\u0cdf")
        buf.write("\u0ce0\3\2\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0ce2\t$\2\2")
        buf.write("\u0ce2\u0ce4\7\u00e0\2\2\u0ce3\u0ce1\3\2\2\2\u0ce3\u0ce4")
        buf.write("\3\2\2\2\u0ce4\u0105\3\2\2\2\u0ce5\u0ce6\7\u00a8\2\2\u0ce6")
        buf.write("\u0ce7\7\u00f4\2\2\u0ce7\u0ce8\5\u0408\u0205\2\u0ce8\u0107")
        buf.write("\3\2\2\2\u0ce9\u0ceb\t\6\2\2\u0cea\u0ce9\3\2\2\2\u0cea")
        buf.write("\u0ceb\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\7\u01bc")
        buf.write("\2\2\u0ced\u0cee\7\u0131\2\2\u0cee\u0109\3\2\2\2\u0cef")
        buf.write("\u0cf0\7\u00ba\2\2\u0cf0\u0cf1\7\24\2\2\u0cf1\u0cf6\7")
        buf.write("\u02a6\2\2\u0cf2\u0cf3\7\u013f\2\2\u0cf3\u0cf4\7\u00ba")
        buf.write("\2\2\u0cf4\u0cf6\7\24\2\2\u0cf5\u0cef\3\2\2\2\u0cf5\u0cf2")
        buf.write("\3\2\2\2\u0cf6\u010b\3\2\2\2\u0cf7\u0cf8\7\u015e\2\2\u0cf8")
        buf.write("\u0cfa\5\u03ec\u01f7\2\u0cf9\u0cfb\5\u010e\u0088\2\u0cfa")
        buf.write("\u0cf9\3\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0d07\3\2\2\2")
        buf.write("\u0cfc\u0d01\7\u0287\2\2\u0cfd\u0cff\7\u028d\2\2\u0cfe")
        buf.write("\u0cfd\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00\3\2\2\2")
        buf.write("\u0d00\u0d02\5\u00aaV\2\u0d01\u0cfe\3\2\2\2\u0d02\u0d03")
        buf.write("\3\2\2\2\u0d03\u0d01\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04")
        buf.write("\u0d05\3\2\2\2\u0d05\u0d06\7\u0288\2\2\u0d06\u0d08\3\2")
        buf.write("\2\2\u0d07\u0cfc\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d0d")
        buf.write("\3\2\2\2\u0d09\u0d0a\7\u0164\2\2\u0d0a\u0d0b\7N\2\2\u0d0b")
        buf.write("\u0d0c\t\25\2\2\u0d0c\u0d0e\7\u01bf\2\2\u0d0d\u0d09\3")
        buf.write("\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d10\3\2\2\2\u0d0f\u0d11")
        buf.write("\5\u0110\u0089\2\u0d10\u0d0f\3\2\2\2\u0d10\u0d11\3\2\2")
        buf.write("\2\u0d11\u0d13\3\2\2\2\u0d12\u0d14\5\u0112\u008a\2\u0d13")
        buf.write("\u0d12\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d16\3\2\2\2")
        buf.write("\u0d15\u0d17\5\u0092J\2\u0d16\u0d15\3\2\2\2\u0d16\u0d17")
        buf.write("\3\2\2\2\u0d17\u0d19\3\2\2\2\u0d18\u0d1a\5\u00a0Q\2\u0d19")
        buf.write("\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1c\3\2\2\2")
        buf.write("\u0d1b\u0d1d\5\u00d4k\2\u0d1c\u0d1b\3\2\2\2\u0d1c\u0d1d")
        buf.write("\3\2\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d20\t\5\2\2\u0d1f")
        buf.write("\u0d1e\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d26\3\2\2\2")
        buf.write("\u0d21\u0d22\7\u01b0\2\2\u0d22\u0d23\7\u0287\2\2\u0d23")
        buf.write("\u0d24\7\u012d\2\2\u0d24\u0d25\t\26\2\2\u0d25\u0d27\7")
        buf.write("\u0288\2\2\u0d26\u0d21\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27")
        buf.write("\u0d29\3\2\2\2\u0d28\u0d2a\5\64\33\2\u0d29\u0d28\3\2\2")
        buf.write("\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d2c\3\2\2\2\u0d2b\u0d2d")
        buf.write("\t\27\2\2\u0d2c\u0d2b\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d")
        buf.write("\u0d33\3\2\2\2\u0d2e\u0d30\5\u0104\u0083\2\u0d2f\u0d2e")
        buf.write("\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d31")
        buf.write("\u0d32\3\2\2\2\u0d32\u0d34\3\2\2\2\u0d33\u0d2f\3\2\2\2")
        buf.write("\u0d33\u0d34\3\2\2\2\u0d34\u0d36\3\2\2\2\u0d35\u0d37\5")
        buf.write("\u0108\u0085\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3\2\2\2")
        buf.write("\u0d37\u0d39\3\2\2\2\u0d38\u0d3a\5\u010a\u0086\2\u0d39")
        buf.write("\u0d38\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u010d\3\2\2\2")
        buf.write("\u0d3b\u0d3d\7\u0153\2\2\u0d3c\u0d3b\3\2\2\2\u0d3c\u0d3d")
        buf.write("\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d3f\7\u01f8\2\2\u0d3f")
        buf.write("\u0d40\7\31\2\2\u0d40\u0d41\7\13\2\2\u0d41\u0d42\7\u0106")
        buf.write("\2\2\u0d42\u010f\3\2\2\2\u0d43\u0d44\7\u015d\2\2\u0d44")
        buf.write("\u0d45\7\u00d6\2\2\u0d45\u0d4a\7\u00f7\2\2\u0d46\u0d47")
        buf.write("\7\u01fe\2\2\u0d47\u0d4b\7\u00c9\2\2\u0d48\u0d49\7\u0190")
        buf.write("\2\2\u0d49\u0d4b\7\u00fe\2\2\u0d4a\u0d46\3\2\2\2\u0d4a")
        buf.write("\u0d48\3\2\2\2\u0d4b\u0111\3\2\2\2\u0d4c\u0d4e\7\u0161")
        buf.write("\2\2\u0d4d\u0d4f\5\u03fa\u01fe\2\u0d4e\u0d4d\3\2\2\2\u0d4e")
        buf.write("\u0d4f\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d54\7\u0287")
        buf.write("\2\2\u0d51\u0d55\5\u0098M\2\u0d52\u0d53\7\u0201\2\2\u0d53")
        buf.write("\u0d55\5,\27\2\u0d54\u0d51\3\2\2\2\u0d54\u0d52\3\2\2\2")
        buf.write("\u0d55\u0d56\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d56\u0d57\3")
        buf.write("\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d59\7\u0288\2\2\u0d59")
        buf.write("\u0113\3\2\2\2\u0d5a\u0d5b\7\u015e\2\2\u0d5b\u0d60\7\u025a")
        buf.write("\2\2\u0d5c\u0d5d\7\u0287\2\2\u0d5d\u0d5e\5\u00aaV\2\u0d5e")
        buf.write("\u0d5f\7\u0288\2\2\u0d5f\u0d61\3\2\2\2\u0d60\u0d5c\3\2")
        buf.write("\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d64\3\2\2\2\u0d62\u0d63")
        buf.write("\7\u025a\2\2\u0d63\u0d65\5\u00ceh\2\u0d64\u0d62\3\2\2")
        buf.write("\2\u0d64\u0d65\3\2\2\2\u0d65\u0d67\3\2\2\2\u0d66\u0d68")
        buf.write("\5\u00d0i\2\u0d67\u0d66\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68")
        buf.write("\u0d6a\3\2\2\2\u0d69\u0d6b\5\u0116\u008c\2\u0d6a\u0d69")
        buf.write("\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d70\3\2\2\2\u0d6c")
        buf.write("\u0d6d\7\u0164\2\2\u0d6d\u0d6e\7N\2\2\u0d6e\u0d6f\t\25")
        buf.write("\2\2\u0d6f\u0d71\7\u01bf\2\2\u0d70\u0d6c\3\2\2\2\u0d70")
        buf.write("\u0d71\3\2\2\2\u0d71\u0d73\3\2\2\2\u0d72\u0d74\5\u0110")
        buf.write("\u0089\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74")
        buf.write("\u0d76\3\2\2\2\u0d75\u0d77\5\u0112\u008a\2\u0d76\u0d75")
        buf.write("\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d79\3\2\2\2\u0d78")
        buf.write("\u0d7a\5\u0092J\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a\3\2")
        buf.write("\2\2\u0d7a\u0d7c\3\2\2\2\u0d7b\u0d7d\5\u00a0Q\2\u0d7c")
        buf.write("\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f\3\2\2\2")
        buf.write("\u0d7e\u0d80\5\u00d4k\2\u0d7f\u0d7e\3\2\2\2\u0d7f\u0d80")
        buf.write("\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d83\t\5\2\2\u0d82")
        buf.write("\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d89\3\2\2\2")
        buf.write("\u0d84\u0d85\7\u01b0\2\2\u0d85\u0d86\7\u0287\2\2\u0d86")
        buf.write("\u0d87\7\u012d\2\2\u0d87\u0d88\t\26\2\2\u0d88\u0d8a\7")
        buf.write("\u0288\2\2\u0d89\u0d84\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a")
        buf.write("\u0d8c\3\2\2\2\u0d8b\u0d8d\5\64\33\2\u0d8c\u0d8b\3\2\2")
        buf.write("\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8f\3\2\2\2\u0d8e\u0d90")
        buf.write("\t\27\2\2\u0d8f\u0d8e\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90")
        buf.write("\u0d96\3\2\2\2\u0d91\u0d93\5\u0104\u0083\2\u0d92\u0d91")
        buf.write("\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0d92\3\2\2\2\u0d94")
        buf.write("\u0d95\3\2\2\2\u0d95\u0d97\3\2\2\2\u0d96\u0d92\3\2\2\2")
        buf.write("\u0d96\u0d97\3\2\2\2\u0d97\u0d99\3\2\2\2\u0d98\u0d9a\5")
        buf.write("\u0108\u0085\2\u0d99\u0d98\3\2\2\2\u0d99\u0d9a\3\2\2\2")
        buf.write("\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d9d\5\u010a\u0086\2\u0d9c")
        buf.write("\u0d9b\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0115\3\2\2\2")
        buf.write("\u0d9e\u0d9f\7\u023a\2\2\u0d9f\u0da0\7K\2\2\u0da0\u0daa")
        buf.write("\7\u0287\2\2\u0da1\u0da3\7\u028d\2\2\u0da2\u0da1\3\2\2")
        buf.write("\2\u0da2\u0da3\3\2\2\2\u0da3\u0da4\3\2\2\2\u0da4\u0da5")
        buf.write("\5\u0404\u0203\2\u0da5\u0da6\7\26\2\2\u0da6\u0da7\7\u0287")
        buf.write("\2\2\u0da7\u0da8\5\u0346\u01a4\2\u0da8\u0da9\7\u0288\2")
        buf.write("\2\u0da9\u0dab\3\2\2\2\u0daa\u0da2\3\2\2\2\u0dab\u0dac")
        buf.write("\3\2\2\2\u0dac\u0daa\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad")
        buf.write("\u0dae\3\2\2\2\u0dae\u0daf\7\u0288\2\2\u0daf\u0117\3\2")
        buf.write("\2\2\u0db0\u0db1\7\u0093\2\2\u0db1\u0db4\7\u01ff\2\2\u0db2")
        buf.write("\u0db3\7\u00d7\2\2\u0db3\u0db5\7\u00ac\2\2\u0db4\u0db2")
        buf.write("\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6")
        buf.write("\u0db8\5\u0408\u0205\2\u0db7\u0db9\7\u0194\2\2\u0db8\u0db7")
        buf.write("\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0119\3\2\2\2\u0dba")
        buf.write("\u0dbb\7\16\2\2\u0dbb\u0dbc\7\u01ff\2\2\u0dbc\u0dc1\5")
        buf.write("\u0408\u0205\2\u0dbd\u0dc2\3\2\2\2\u0dbe\u0dc2\5\u011c")
        buf.write("\u008f\2\u0dbf\u0dc2\5\u013a\u009e\2\u0dc0\u0dc2\5\u0144")
        buf.write("\u00a3\2\u0dc1\u0dbd\3\2\2\2\u0dc1\u0dbe\3\2\2\2\u0dc1")
        buf.write("\u0dbf\3\2\2\2\u0dc1\u0dc0\3\2\2\2\u0dc2\u011b\3\2\2\2")
        buf.write("\u0dc3\u0dcf\5\u011e\u0090\2\u0dc4\u0dc5\7\u01ab\2\2\u0dc5")
        buf.write("\u0dc6\7\u0210\2\2\u0dc6\u0dcf\5\u0408\u0205\2\u0dc7\u0dcf")
        buf.write("\5\u0136\u009c\2\u0dc8\u0dc9\7\u0199\2\2\u0dc9\u0dcf\7")
        buf.write("\u0165\2\2\u0dca\u0dcb\7\u0199\2\2\u0dcb\u0dcf\7\u0247")
        buf.write("\2\2\u0dcc\u0dcd\7\u01a7\2\2\u0dcd\u0dcf\7\u0283\2\2\u0dce")
        buf.write("\u0dc3\3\2\2\2\u0dce\u0dc4\3\2\2\2\u0dce\u0dc7\3\2\2\2")
        buf.write("\u0dce\u0dc8\3\2\2\2\u0dce\u0dca\3\2\2\2\u0dce\u0dcc\3")
        buf.write("\2\2\2\u0dcf\u011d\3\2\2\2\u0dd0\u0de2\5\u0098M\2\u0dd1")
        buf.write("\u0de2\5\u009eP\2\u0dd2\u0de2\5L\'\2\u0dd3\u0de2\5\u0120")
        buf.write("\u0091\2\u0dd4\u0de2\5\u0122\u0092\2\u0dd5\u0de2\5\u0124")
        buf.write("\u0093\2\u0dd6\u0de2\t\5\2\2\u0dd7\u0dd8\7\u01b0\2\2\u0dd8")
        buf.write("\u0dd9\7\u0287\2\2\u0dd9\u0dda\7\u012d\2\2\u0dda\u0ddb")
        buf.write("\t\26\2\2\u0ddb\u0de2\7\u0288\2\2\u0ddc\u0de2\5\u0126")
        buf.write("\u0094\2\u0ddd\u0de2\5\u0128\u0095\2\u0dde\u0de2\5\64")
        buf.write("\33\2\u0ddf\u0de2\5\u0108\u0085\2\u0de0\u0de2\5\u010a")
        buf.write("\u0086\2\u0de1\u0dd0\3\2\2\2\u0de1\u0dd1\3\2\2\2\u0de1")
        buf.write("\u0dd2\3\2\2\2\u0de1\u0dd3\3\2\2\2\u0de1\u0dd4\3\2\2\2")
        buf.write("\u0de1\u0dd5\3\2\2\2\u0de1\u0dd6\3\2\2\2\u0de1\u0dd7\3")
        buf.write("\2\2\2\u0de1\u0ddc\3\2\2\2\u0de1\u0ddd\3\2\2\2\u0de1\u0dde")
        buf.write("\3\2\2\2\u0de1\u0ddf\3\2\2\2\u0de1\u0de0\3\2\2\2\u0de2")
        buf.write("\u0de3\3\2\2\2\u0de3\u0de1\3\2\2\2\u0de3\u0de4\3\2\2\2")
        buf.write("\u0de4\u0de6\3\2\2\2\u0de5\u0de7\5\u012a\u0096\2\u0de6")
        buf.write("\u0de5\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u011f\3\2\2\2")
        buf.write("\u0de8\u0df4\7\7\2\2\u0de9\u0deb\7\u028d\2\2\u0dea\u0de9")
        buf.write("\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec")
        buf.write("\u0ded\7\u01fc\2\2\u0ded\u0df0\7\u0114\2\2\u0dee\u0df1")
        buf.write("\5\u008cG\2\u0def\u0df1\5\u0090I\2\u0df0\u0dee\3\2\2\2")
        buf.write("\u0df0\u0def\3\2\2\2\u0df1\u0df3\3\2\2\2\u0df2\u0dea\3")
        buf.write("\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5")
        buf.write("\3\2\2\2\u0df5\u0e08\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7")
        buf.write("\u0e04\7\u0093\2\2\u0df8\u0dfa\7\u028d\2\2\u0df9\u0df8")
        buf.write("\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb")
        buf.write("\u0dfc\7\u01fc\2\2\u0dfc\u0e00\7\u0114\2\2\u0dfd\u0e01")
        buf.write("\5\u0090I\2\u0dfe\u0dff\7\u00cd\2\2\u0dff\u0e01\5\u008e")
        buf.write("H\2\u0e00\u0dfd\3\2\2\2\u0e00\u0dfe\3\2\2\2\u0e01\u0e03")
        buf.write("\3\2\2\2\u0e02\u0df9\3\2\2\2\u0e03\u0e06\3\2\2\2\u0e04")
        buf.write("\u0e02\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05\u0e08\3\2\2\2")
        buf.write("\u0e06\u0e04\3\2\2\2\u0e07\u0de8\3\2\2\2\u0e07\u0df7\3")
        buf.write("\2\2\2\u0e08\u0121\3\2\2\2\u0e09\u0e0a\7\f\2\2\u0e0a\u0e17")
        buf.write("\7\u00af\2\2\u0e0b\u0e12\7\u0287\2\2\u0e0c\u0e0d\7\u01e1")
        buf.write("\2\2\u0e0d\u0e13\5\u009cO\2\u0e0e\u0e0f\7r\2\2\u0e0f\u0e13")
        buf.write("\7\u0283\2\2\u0e10\u0e11\7\u00ed\2\2\u0e11\u0e13\7\u0281")
        buf.write("\2\2\u0e12\u0e0c\3\2\2\2\u0e12\u0e0e\3\2\2\2\u0e12\u0e10")
        buf.write("\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14\u0e12\3\2\2\2\u0e14")
        buf.write("\u0e15\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e18\7\u0288")
        buf.write("\2\2\u0e17\u0e0b\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0123")
        buf.write("\3\2\2\2\u0e19\u0e1a\7y\2\2\u0e1a\u0e1d\7\u0225\2\2\u0e1b")
        buf.write("\u0e1c\7\u00fc\2\2\u0e1c\u0e1e\5\u009cO\2\u0e1d\u0e1b")
        buf.write("\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e\u0125\3\2\2\2\u0e1f")
        buf.write("\u0e21\7\u0228\2\2\u0e20\u0e22\7\u0153\2\2\u0e21\u0e20")
        buf.write("\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23")
        buf.write("\u0e24\7\u00dd\2\2\u0e24\u0e25\7p\2\2\u0e25\u0e26\3\2")
        buf.write("\2\2\u0e26\u0e27\5\u00a0Q\2\u0e27\u0127\3\2\2\2\u0e28")
        buf.write("\u0e2a\t%\2\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a\3\2\2\2")
        buf.write("\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\7\u019e\2\2\u0e2c\u0129")
        buf.write("\3\2\2\2\u0e2d\u0e32\5\u012c\u0097\2\u0e2e\u0e32\5\u0132")
        buf.write("\u009a\2\u0e2f\u0e32\5\u0138\u009d\2\u0e30\u0e32\7H\2")
        buf.write("\2\u0e31\u0e2d\3\2\2\2\u0e31\u0e2e\3\2\2\2\u0e31\u0e2f")
        buf.write("\3\2\2\2\u0e31\u0e30\3\2\2\2\u0e32\u012b\3\2\2\2\u0e33")
        buf.write("\u0e38\5\u012e\u0098\2\u0e34\u0e35\7\u017d\2\2\u0e35\u0e38")
        buf.write("\7\u0281\2\2\u0e36\u0e38\5.\30\2\u0e37\u0e33\3\2\2\2\u0e37")
        buf.write("\u0e34\3\2\2\2\u0e37\u0e36\3\2\2\2\u0e38\u0e3a\3\2\2\2")
        buf.write("\u0e39\u0e3b\5\u0130\u0099\2\u0e3a\u0e39\3\2\2\2\u0e3a")
        buf.write("\u0e3b\3\2\2\2\u0e3b\u012d\3\2\2\2\u0e3c\u0e3d\7\u011e")
        buf.write("\2\2\u0e3d\u0e40\7\u01ff\2\2\u0e3e\u0e40\7\u0147\2\2\u0e3f")
        buf.write("\u0e3c\3\2\2\2\u0e3f\u0e3e\3\2\2\2\u0e40\u012f\3\2\2\2")
        buf.write("\u0e41\u0e42\7\u00dd\2\2\u0e42\u0e44\5\u0404\u0203\2\u0e43")
        buf.write("\u0e41\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e45\3\2\2\2")
        buf.write("\u0e45\u0e47\7\u0171\2\2\u0e46\u0e48\5\u0096L\2\u0e47")
        buf.write("\u0e46\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0131\3\2\2\2")
        buf.write("\u0e49\u0e54\5\u0134\u009b\2\u0e4a\u0e4f\7\u0171\2\2\u0e4b")
        buf.write("\u0e50\5\u0096L\2\u0e4c\u0e50\5\u0122\u0092\2\u0e4d\u0e50")
        buf.write("\5\u0136\u009c\2\u0e4e\u0e50\5\u0124\u0093\2\u0e4f\u0e4b")
        buf.write("\3\2\2\2\u0e4f\u0e4c\3\2\2\2\u0e4f\u0e4d\3\2\2\2\u0e4f")
        buf.write("\u0e4e\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e4f\3\2\2\2")
        buf.write("\u0e51\u0e52\3\2\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e49\3")
        buf.write("\2\2\2\u0e53\u0e4a\3\2\2\2\u0e54\u0133\3\2\2\2\u0e55\u0e56")
        buf.write("\7\7\2\2\u0e56\u0e58\7\u0171\2\2\u0e57\u0e59\5\u0096L")
        buf.write("\2\u0e58\u0e57\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59\u0e67")
        buf.write("\3\2\2\2\u0e5a\u0e62\7\u0287\2\2\u0e5b\u0e5d\7\u028d\2")
        buf.write("\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e5e")
        buf.write("\3\2\2\2\u0e5e\u0e60\7\u0178\2\2\u0e5f\u0e61\5\u0096L")
        buf.write("\2\u0e60\u0e5f\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63")
        buf.write("\3\2\2\2\u0e62\u0e5c\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64")
        buf.write("\u0e62\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2")
        buf.write("\u0e66\u0e68\7\u0288\2\2\u0e67\u0e5a\3\2\2\2\u0e67\u0e68")
        buf.write("\3\2\2\2\u0e68\u0135\3\2\2\2\u0e69\u0e6a\7\u01db\2\2\u0e6a")
        buf.write("\u0e6c\7\u01e7\2\2\u0e6b\u0e6d\7P\2\2\u0e6c\u0e6b\3\2")
        buf.write("\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e70")
        buf.write("\7;\2\2\u0e6f\u0e6e\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70")
        buf.write("\u0137\3\2\2\2\u0e71\u0e72\7\u011e\2\2\u0e72\u0e75\7\u01ff")
        buf.write("\2\2\u0e73\u0e76\5\u0122\u0092\2\u0e74\u0e76\5\u0124\u0093")
        buf.write("\2\u0e75\u0e73\3\2\2\2\u0e75\u0e74\3\2\2\2\u0e76\u0139")
        buf.write("\3\2\2\2\u0e77\u0e78\7\7\2\2\u0e78\u0e80\7\u0287\2\2\u0e79")
        buf.write("\u0e7b\5\u0082B\2\u0e7a\u0e79\3\2\2\2\u0e7b\u0e7e\3\2")
        buf.write("\2\2\u0e7c\u0e7a\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e81")
        buf.write("\3\2\2\2\u0e7e\u0e7c\3\2\2\2\u0e7f\u0e81\5\u0088E\2\u0e80")
        buf.write("\u0e7c\3\2\2\2\u0e80\u0e7f\3\2\2\2\u0e81\u0e82\3\2\2\2")
        buf.write("\u0e82\u0ea6\7\u0288\2\2\u0e83\u0e8b\7\7\2\2\u0e84\u0e86")
        buf.write("\5\u0082B\2\u0e85\u0e84\3\2\2\2\u0e86\u0e89\3\2\2\2\u0e87")
        buf.write("\u0e85\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88\u0e8c\3\2\2\2")
        buf.write("\u0e89\u0e87\3\2\2\2\u0e8a\u0e8c\5\u0088E\2\u0e8b\u0e87")
        buf.write("\3\2\2\2\u0e8b\u0e8a\3\2\2\2\u0e8c\u0ea6\3\2\2\2\u0e8d")
        buf.write("\u0e94\7\u012f\2\2\u0e8e\u0e8f\7Z\2\2\u0e8f\u0e95\5\u03e8")
        buf.write("\u01f5\2\u0e90\u0e91\7\u0190\2\2\u0e91\u0e95\7\u00fe\2")
        buf.write("\2\u0e92\u0e93\7\u0220\2\2\u0e93\u0e95\5\u00b0Y\2\u0e94")
        buf.write("\u0e8e\3\2\2\2\u0e94\u0e90\3\2\2\2\u0e94\u0e92\3\2\2\2")
        buf.write("\u0e95\u0e96\3\2\2\2\u0e96\u0e98\5\u00b6\\\2\u0e97\u0e99")
        buf.write("\7;\2\2\u0e98\u0e97\3\2\2\2\u0e98\u0e99\3\2\2\2\u0e99")
        buf.write("\u0ea6\3\2\2\2\u0e9a\u0e9b\7\u01ab\2\2\u0e9b\u0e9c\7Z")
        buf.write("\2\2\u0e9c\u0e9d\5\u013c\u009f\2\u0e9d\u0e9e\7\u0210\2")
        buf.write("\2\u0e9e\u0e9f\5\u013e\u00a0\2\u0e9f\u0ea6\3\2\2\2\u0ea0")
        buf.write("\u0ea2\5\u0140\u00a1\2\u0ea1\u0ea0\3\2\2\2\u0ea2\u0ea3")
        buf.write("\3\2\2\2\u0ea3\u0ea1\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4")
        buf.write("\u0ea6\3\2\2\2\u0ea5\u0e77\3\2\2\2\u0ea5\u0e83\3\2\2\2")
        buf.write("\u0ea5\u0e8d\3\2\2\2\u0ea5\u0e9a\3\2\2\2\u0ea5\u0ea1\3")
        buf.write("\2\2\2\u0ea6\u013b\3\2\2\2\u0ea7\u0ea8\5\u03e8\u01f5\2")
        buf.write("\u0ea8\u013d\3\2\2\2\u0ea9\u0eaa\5\u03e8\u01f5\2\u0eaa")
        buf.write("\u013f\3\2\2\2\u0eab\u0eac\7\u0093\2\2\u0eac\u0ead\5\u0142")
        buf.write("\u00a2\2\u0ead\u0141\3\2\2\2\u0eae\u0eaf\7\u0190\2\2\u0eaf")
        buf.write("\u0eb3\7\u00fe\2\2\u0eb0\u0eb1\7\u0220\2\2\u0eb1\u0eb3")
        buf.write("\5\u00b0Y\2\u0eb2\u0eae\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb3")
        buf.write("\u0eb5\3\2\2\2\u0eb4\u0eb6\7;\2\2\u0eb5\u0eb4\3\2\2\2")
        buf.write("\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb8\3\2\2\2\u0eb7\u0eb9\t")
        buf.write("$\2\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0ec0")
        buf.write("\3\2\2\2\u0eba\u0ebb\7Z\2\2\u0ebb\u0ebd\5\u03e8\u01f5")
        buf.write("\2\u0ebc\u0ebe\7;\2\2\u0ebd\u0ebc\3\2\2\2\u0ebd\u0ebe")
        buf.write("\3\2\2\2\u0ebe\u0ec0\3\2\2\2\u0ebf\u0eb2\3\2\2\2\u0ebf")
        buf.write("\u0eba\3\2\2\2\u0ec0\u0143\3\2\2\2\u0ec1\u0ec6\5\u0146")
        buf.write("\u00a4\2\u0ec2\u0ec6\5\u0154\u00ab\2\u0ec3\u0ec6\5\u015a")
        buf.write("\u00ae\2\u0ec4\u0ec6\5\u015e\u00b0\2\u0ec5\u0ec1\3\2\2")
        buf.write("\2\u0ec5\u0ec2\3\2\2\2\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec4")
        buf.write("\3\2\2\2\u0ec6\u0145\3\2\2\2\u0ec7\u0ed3\5\u0148\u00a5")
        buf.write("\2\u0ec8\u0ed3\5\u014a\u00a6\2\u0ec9\u0ed3\5\u014c\u00a7")
        buf.write("\2\u0eca\u0ecf\5\u0152\u00aa\2\u0ecb\u0ecc\7\u028d\2\2")
        buf.write("\u0ecc\u0ece\5\u0152\u00aa\2\u0ecd\u0ecb\3\2\2\2\u0ece")
        buf.write("\u0ed1\3\2\2\2\u0ecf\u0ecd\3\2\2\2\u0ecf\u0ed0\3\2\2\2")
        buf.write("\u0ed0\u0ed3\3\2\2\2\u0ed1\u0ecf\3\2\2\2\u0ed2\u0ec7\3")
        buf.write("\2\2\2\u0ed2\u0ec8\3\2\2\2\u0ed2\u0ec9\3\2\2\2\u0ed2\u0eca")
        buf.write("\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0ed2\3\2\2\2\u0ed4")
        buf.write("\u0ed5\3\2\2\2\u0ed5\u0147\3\2\2\2\u0ed6\u0ed8\7\7\2\2")
        buf.write("\u0ed7\u0ed9\7J\2\2\u0ed8\u0ed7\3\2\2\2\u0ed8\u0ed9\3")
        buf.write("\2\2\2\u0ed9\u0eed\3\2\2\2\u0eda\u0ee3\7\u0287\2\2\u0edb")
        buf.write("\u0edd\7\u028d\2\2\u0edc\u0edb\3\2\2\2\u0edc\u0edd\3\2")
        buf.write("\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0ee4\5|?\2\u0edf\u0ee1")
        buf.write("\7\u028d\2\2\u0ee0\u0edf\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1")
        buf.write("\u0ee2\3\2\2\2\u0ee2\u0ee4\5\u0080A\2\u0ee3\u0edc\3\2")
        buf.write("\2\2\u0ee3\u0ee0\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee3")
        buf.write("\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7")
        buf.write("\u0ee8\7\u0288\2\2\u0ee8\u0eee\3\2\2\2\u0ee9\u0eec\5|")
        buf.write("?\2\u0eea\u0eec\5\u0080A\2\u0eeb\u0ee9\3\2\2\2\u0eeb\u0eea")
        buf.write("\3\2\2\2\u0eec\u0eee\3\2\2\2\u0eed\u0eda\3\2\2\2\u0eed")
        buf.write("\u0eeb\3\2\2\2\u0eee\u0ef0\3\2\2\2\u0eef\u0ef1\5\u00a0")
        buf.write("Q\2\u0ef0\u0eef\3\2\2\2\u0ef0\u0ef1\3\2\2\2\u0ef1\u0149")
        buf.write("\3\2\2\2\u0ef2\u0f00\7\u012f\2\2\u0ef3\u0ef8\7\u0287\2")
        buf.write("\2\u0ef4\u0ef6\7\u028d\2\2\u0ef5\u0ef4\3\2\2\2\u0ef5\u0ef6")
        buf.write("\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0ef9\5\u014e\u00a8")
        buf.write("\2\u0ef8\u0ef5\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0ef8")
        buf.write("\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc")
        buf.write("\u0efd\7\u0288\2\2\u0efd\u0f01\3\2\2\2\u0efe\u0f01\5\u014e")
        buf.write("\u00a8\2\u0eff\u0f01\5\u0150\u00a9\2\u0f00\u0ef3\3\2\2")
        buf.write("\2\u0f00\u0efe\3\2\2\2\u0f00\u0eff\3\2\2\2\u0f01\u014b")
        buf.write("\3\2\2\2\u0f02\u0f04\7\16\2\2\u0f03\u0f05\7J\2\2\u0f04")
        buf.write("\u0f03\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f06\3\2\2\2")
        buf.write("\u0f06\u0f10\5\u0404\u0203\2\u0f07\u0f08\t&\2\2\u0f08")
        buf.write("\u0f09\7\u0153\2\2\u0f09\u0f11\7\u0157\2\2\u0f0a\u0f0b")
        buf.write("\7\u021c\2\2\u0f0b\u0f0e\5\u041c\u020f\2\u0f0c\u0f0d\7")
        buf.write("\u022c\2\2\u0f0d\u0f0f\5\u0346\u01a4\2\u0f0e\u0f0c\3\2")
        buf.write("\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f11\3\2\2\2\u0f10\u0f07")
        buf.write("\3\2\2\2\u0f10\u0f0a\3\2\2\2\u0f11\u014d\3\2\2\2\u0f12")
        buf.write("\u0f14\5\u0404\u0203\2\u0f13\u0f15\5\u041c\u020f\2\u0f14")
        buf.write("\u0f13\3\2\2\2\u0f14\u0f15\3\2\2\2\u0f15\u0f18\3\2\2\2")
        buf.write("\u0f16\u0f17\7\u0082\2\2\u0f17\u0f19\5\u0346\u01a4\2\u0f18")
        buf.write("\u0f16\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1d\3\2\2\2")
        buf.write("\u0f1a\u0f1b\7\u009d\2\2\u0f1b\u0f1e\5\u00c8e\2\u0f1c")
        buf.write("\u0f1e\7\u0080\2\2\u0f1d\u0f1a\3\2\2\2\u0f1d\u0f1c\3\2")
        buf.write("\2\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f22\3\2\2\2\u0f1f\u0f21")
        buf.write("\5\u00acW\2\u0f20\u0f1f\3\2\2\2\u0f21\u0f24\3\2\2\2\u0f22")
        buf.write("\u0f20\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f26\3\2\2\2")
        buf.write("\u0f24\u0f22\3\2\2\2\u0f25\u0f27\5\u00caf\2\u0f26\u0f25")
        buf.write("\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u014f\3\2\2\2\u0f28")
        buf.write("\u0f29\7J\2\2\u0f29\u0f2b\5\u0404\u0203\2\u0f2a\u0f2c")
        buf.write("\7\u0153\2\2\u0f2b\u0f2a\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c")
        buf.write("\u0f2d\3\2\2\2\u0f2d\u0f2e\7\u01f8\2\2\u0f2e\u0f2f\7\31")
        buf.write("\2\2\u0f2f\u0f30\7\13\2\2\u0f30\u0f32\7\u0106\2\2\u0f31")
        buf.write("\u0f33\7\u00c1\2\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33\3\2")
        buf.write("\2\2\u0f33\u0151\3\2\2\2\u0f34\u0f35\7\u01d6\2\2\u0f35")
        buf.write("\u0f43\7\u0225\2\2\u0f36\u0f37\7J\2\2\u0f37\u0f44\5\u0404")
        buf.write("\u0203\2\u0f38\u0f3d\7\u0287\2\2\u0f39\u0f3b\7\u028d\2")
        buf.write("\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b\3\2\2\2\u0f3b\u0f3c")
        buf.write("\3\2\2\2\u0f3c\u0f3e\5\u0404\u0203\2\u0f3d\u0f3a\3\2\2")
        buf.write("\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f3f\u0f40")
        buf.write("\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u0f42\7\u0288\2\2\u0f42")
        buf.write("\u0f44\3\2\2\2\u0f43\u0f36\3\2\2\2\u0f43\u0f38\3\2\2\2")
        buf.write("\u0f44\u0f4a\3\2\2\2\u0f45\u0f46\7;\2\2\u0f46\u0f49\7")
        buf.write("[\2\2\u0f47\u0f49\7\u00f5\2\2\u0f48\u0f45\3\2\2\2\u0f48")
        buf.write("\u0f47\3\2\2\2\u0f49\u0f4c\3\2\2\2\u0f4a\u0f48\3\2\2\2")
        buf.write("\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f73\3\2\2\2\u0f4c\u0f4a\3")
        buf.write("\2\2\2\u0f4d\u0f5b\7\u0093\2\2\u0f4e\u0f4f\7J\2\2\u0f4f")
        buf.write("\u0f5c\5\u0404\u0203\2\u0f50\u0f55\7\u0287\2\2\u0f51\u0f53")
        buf.write("\7\u028d\2\2\u0f52\u0f51\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53")
        buf.write("\u0f54\3\2\2\2\u0f54\u0f56\5\u0404\u0203\2\u0f55\u0f52")
        buf.write("\3\2\2\2\u0f56\u0f57\3\2\2\2\u0f57\u0f55\3\2\2\2\u0f57")
        buf.write("\u0f58\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0f5a\7\u0288")
        buf.write("\2\2\u0f5a\u0f5c\3\2\2\2\u0f5b\u0f4e\3\2\2\2\u0f5b\u0f50")
        buf.write("\3\2\2\2\u0f5c\u0f62\3\2\2\2\u0f5d\u0f5e\7;\2\2\u0f5e")
        buf.write("\u0f61\7[\2\2\u0f5f\u0f61\7\u00f5\2\2\u0f60\u0f5d\3\2")
        buf.write("\2\2\u0f60\u0f5f\3\2\2\2\u0f61\u0f64\3\2\2\2\u0f62\u0f60")
        buf.write("\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f67\3\2\2\2\u0f64")
        buf.write("\u0f62\3\2\2\2\u0f65\u0f66\7B\2\2\u0f66\u0f68\7\u0281")
        buf.write("\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f73")
        buf.write("\3\2\2\2\u0f69\u0f6e\7\u0093\2\2\u0f6a\u0f6b\7\u0225\2")
        buf.write("\2\u0f6b\u0f6f\7K\2\2\u0f6c\u0f6d\7K\2\2\u0f6d\u0f6f\7")
        buf.write("_\2\2\u0f6e\u0f6a\3\2\2\2\u0f6e\u0f6c\3\2\2\2\u0f6f\u0f70")
        buf.write("\3\2\2\2\u0f70\u0f71\7B\2\2\u0f71\u0f73\7\u0281\2\2\u0f72")
        buf.write("\u0f34\3\2\2\2\u0f72\u0f4d\3\2\2\2\u0f72\u0f69\3\2\2\2")
        buf.write("\u0f73\u0153\3\2\2\2\u0f74\u0f76\7\u01ab\2\2\u0f75\u0f77")
        buf.write("\7J\2\2\u0f76\u0f75\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77")
        buf.write("\u0f78\3\2\2\2\u0f78\u0f79\5\u0156\u00ac\2\u0f79\u0f7a")
        buf.write("\7\u0210\2\2\u0f7a\u0f7b\5\u0158\u00ad\2\u0f7b\u0155\3")
        buf.write("\2\2\2\u0f7c\u0f7d\5\u0404\u0203\2\u0f7d\u0157\3\2\2\2")
        buf.write("\u0f7e\u0f7f\5\u0404\u0203\2\u0f7f\u0159\3\2\2\2\u0f80")
        buf.write("\u0f81\7\u012f\2\2\u0f81\u0f82\7\u013b\2\2\u0f82\u0f83")
        buf.write("\7\u01ff\2\2\u0f83\u0f84\5\u015c\u00af\2\u0f84\u0f85\7")
        buf.write("\u01b2\2\2\u0f85\u0f86\7\26\2\2\u0f86\u0f87\t\35\2\2\u0f87")
        buf.write("\u015b\3\2\2\2\u0f88\u0f89\5\u0408\u0205\2\u0f89\u015d")
        buf.write("\3\2\2\2\u0f8a\u0f8b\7\u012f\2\2\u0f8b\u0f8c\7\u010f\2")
        buf.write("\2\u0f8c\u0f8d\7\u0287\2\2\u0f8d\u0f8e\5P)\2\u0f8e\u0f8f")
        buf.write("\7\u0288\2\2\u0f8f\u0f90\7\u0287\2\2\u0f90\u0f91\5\u0160")
        buf.write("\u00b1\2\u0f91\u0f92\7\u0288\2\2\u0f92\u015f\3\2\2\2\u0f93")
        buf.write("\u0fac\5\u009aN\2\u0f94\u0f95\t\'\2\2\u0f95\u0fac\7\u0281")
        buf.write("\2\2\u0f96\u0f97\7\u019c\2\2\u0f97\u0fac\7\u00c5\2\2\u0f98")
        buf.write("\u0fac\5\u00c2b\2\u0f99\u0fac\5\u00c4c\2\u0f9a\u0fac\5")
        buf.write("\u00c6d\2\u0f9b\u0f9c\7\u009d\2\2\u0f9c\u0fac\5\u00c8")
        buf.write("e\2\u0f9d\u0fac\7\u0080\2\2\u0f9e\u0fac\78\2\2\u0f9f\u0fa4")
        buf.write("\78\2\2\u0fa0\u0fa4\7\u0141\2\2\u0fa1\u0fa2\78\2\2\u0fa2")
        buf.write("\u0fa4\7\u019a\2\2\u0fa3\u0f9f\3\2\2\2\u0fa3\u0fa0\3\2")
        buf.write("\2\2\u0fa3\u0fa1\3\2\2\2\u0fa4\u0fa6\3\2\2\2\u0fa5\u0fa7")
        buf.write("\5\u009eP\2\u0fa6\u0fa5\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7")
        buf.write("\u0fac\3\2\2\2\u0fa8\u0fac\5\u0122\u0092\2\u0fa9\u0fac")
        buf.write("\5\u0136\u009c\2\u0faa\u0fac\5\u0124\u0093\2\u0fab\u0f93")
        buf.write("\3\2\2\2\u0fab\u0f94\3\2\2\2\u0fab\u0f96\3\2\2\2\u0fab")
        buf.write("\u0f98\3\2\2\2\u0fab\u0f99\3\2\2\2\u0fab\u0f9a\3\2\2\2")
        buf.write("\u0fab\u0f9b\3\2\2\2\u0fab\u0f9d\3\2\2\2\u0fab\u0f9e\3")
        buf.write("\2\2\2\u0fab\u0fa3\3\2\2\2\u0fab\u0fa8\3\2\2\2\u0fab\u0fa9")
        buf.write("\3\2\2\2\u0fab\u0faa\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad")
        buf.write("\u0fab\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0161\3\2\2\2")
        buf.write("\u0faf\u0fb0\7\u0093\2\2\u0fb0\u0fb1\7\u00c8\2\2\u0fb1")
        buf.write("\u0fb2\5\u03f2\u01fa\2\u0fb2\u0163\3\2\2\2\u0fb3\u0fb4")
        buf.write("\7\16\2\2\u0fb4\u0fb5\7\u00c8\2\2\u0fb5\u0fb6\5\u03f2")
        buf.write("\u01fa\2\u0fb6\u0fb8\7R\2\2\u0fb7\u0fb9\7x\2\2\u0fb8\u0fb7")
        buf.write("\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fbd\3\2\2\2\u0fba")
        buf.write("\u0fbc\5\u0208\u0105\2\u0fbb\u0fba\3\2\2\2\u0fbc\u0fbf")
        buf.write("\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe")
        buf.write("\u0fc2\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc1\7\u01b4")
        buf.write("\2\2\u0fc1\u0fc3\7\u01d8\2\2\u0fc2\u0fc0\3\2\2\2\u0fc2")
        buf.write("\u0fc3\3\2\2\2\u0fc3\u0165\3\2\2\2\u0fc4\u0fc7\7e\2\2")
        buf.write("\u0fc5\u0fc6\7\u0169\2\2\u0fc6\u0fc8\7\u01ac\2\2\u0fc7")
        buf.write("\u0fc5\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0fca\3\2\2\2")
        buf.write("\u0fc9\u0fc4\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcb\3")
        buf.write("\2\2\2\u0fcb\u0fcc\7\u00c8\2\2\u0fcc\u0fd8\5\u03f2\u01fa")
        buf.write("\2\u0fcd\u0fce\7\u0287\2\2\u0fce\u0fd3\5\u0214\u010b\2")
        buf.write("\u0fcf\u0fd0\7\u028d\2\2\u0fd0\u0fd2\5\u0214\u010b\2\u0fd1")
        buf.write("\u0fcf\3\2\2\2\u0fd2\u0fd5\3\2\2\2\u0fd3\u0fd1\3\2\2\2")
        buf.write("\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd6\3\2\2\2\u0fd5\u0fd3\3")
        buf.write("\2\2\2\u0fd6\u0fd7\7\u0288\2\2\u0fd7\u0fd9\3\2\2\2\u0fd8")
        buf.write("\u0fcd\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fda\3\2\2\2")
        buf.write("\u0fda\u0fdb\7\u01b2\2\2\u0fdb\u0fe2\5\u041a\u020e\2\u0fdc")
        buf.write("\u0fe1\5\u0206\u0104\2\u0fdd\u0fe1\5\u0168\u00b5\2\u0fde")
        buf.write("\u0fe1\5\u016c\u00b7\2\u0fdf\u0fe1\7\u008b\2\2\u0fe0\u0fdc")
        buf.write("\3\2\2\2\u0fe0\u0fdd\3\2\2\2\u0fe0\u0fde\3\2\2\2\u0fe0")
        buf.write("\u0fdf\3\2\2\2\u0fe1\u0fe4\3\2\2\2\u0fe2\u0fe0\3\2\2\2")
        buf.write("\u0fe2\u0fe3\3\2\2\2\u0fe3\u0ff9\3\2\2\2\u0fe4\u0fe2\3")
        buf.write("\2\2\2\u0fe5\u0fe7\7\u0182\2\2\u0fe6\u0fe5\3\2\2\2\u0fe6")
        buf.write("\u0fe7\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8\u0ff4\t(\2\2")
        buf.write("\u0fe9\u0feb\7|\2\2\u0fea\u0fe9\3\2\2\2\u0fea\u0feb\3")
        buf.write("\2\2\2\u0feb\u0fef\3\2\2\2\u0fec\u0fee\5\u0218\u010d\2")
        buf.write("\u0fed\u0fec\3\2\2\2\u0fee\u0ff1\3\2\2\2\u0fef\u0fed\3")
        buf.write("\2\2\2\u0fef\u0ff0\3\2\2\2\u0ff0\u0ff2\3\2\2\2\u0ff1\u0fef")
        buf.write("\3\2\2\2\u0ff2\u0ff5\5\u0262\u0132\2\u0ff3\u0ff5\5\u020a")
        buf.write("\u0106\2\u0ff4\u0fea\3\2\2\2\u0ff4\u0ff3\3\2\2\2\u0ff5")
        buf.write("\u0ffa\3\2\2\2\u0ff6\u0ff7\t)\2\2\u0ff7\u0ff8\7\u022c")
        buf.write("\2\2\u0ff8\u0ffa\5\u03dc\u01ef\2\u0ff9\u0fe6\3\2\2\2\u0ff9")
        buf.write("\u0ff6\3\2\2\2\u0ffa\u0167\3\2\2\2\u0ffb\u0ffd\7\u0175")
        buf.write("\2\2\u0ffc\u0ffe\5\u016a\u00b6\2\u0ffd\u0ffc\3\2\2\2\u0ffd")
        buf.write("\u0ffe\3\2\2\2\u0ffe\u0169\3\2\2\2\u0fff\u1000\7\u0287")
        buf.write("\2\2\u1000\u1001\7\u0178\2\2\u1001\u1002\5\u0346\u01a4")
        buf.write("\2\u1002\u1010\7\65\2\2\u1003\u1011\7\22\2\2\u1004\u1005")
        buf.write("\t*\2\2\u1005\u1006\7\u0287\2\2\u1006\u100b\5\u0404\u0203")
        buf.write("\2\u1007\u1008\7\u028d\2\2\u1008\u100a\5\u0404\u0203\2")
        buf.write("\u1009\u1007\3\2\2\2\u100a\u100d\3\2\2\2\u100b\u1009\3")
        buf.write("\2\2\2\u100b\u100c\3\2\2\2\u100c\u100e\3\2\2\2\u100d\u100b")
        buf.write("\3\2\2\2\u100e\u100f\7\u0288\2\2\u100f\u1011\3\2\2\2\u1010")
        buf.write("\u1003\3\2\2\2\u1010\u1004\3\2\2\2\u1011\u1013\3\2\2\2")
        buf.write("\u1012\u1014\5\u0170\u00b9\2\u1013\u1012\3\2\2\2\u1013")
        buf.write("\u1014\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1016\7\u0288")
        buf.write("\2\2\u1016\u016b\3\2\2\2\u1017\u1019\7\u01b0\2\2\u1018")
        buf.write("\u101a\5\u016e\u00b8\2\u1019\u1018\3\2\2\2\u1019\u101a")
        buf.write("\3\2\2\2\u101a\u016d\3\2\2\2\u101b\u101c\7\u01a9\2\2\u101c")
        buf.write("\u101d\7\u0287\2\2\u101d\u1022\5\u0408\u0205\2\u101e\u101f")
        buf.write("\7\u028d\2\2\u101f\u1021\5\u0408\u0205\2\u1020\u101e\3")
        buf.write("\2\2\2\u1021\u1024\3\2\2\2\u1022\u1020\3\2\2\2\u1022\u1023")
        buf.write("\3\2\2\2\u1023\u1025\3\2\2\2\u1024\u1022\3\2\2\2\u1025")
        buf.write("\u1026\7\u0288\2\2\u1026\u016f\3\2\2\2\u1027\u1028\t+")
        buf.write("\2\2\u1028\u1029\5\u0346\u01a4\2\u1029\u102a\7\65\2\2")
        buf.write("\u102a\u102b\7\u0287\2\2\u102b\u1030\5\u0404\u0203\2\u102c")
        buf.write("\u102d\7\u028d\2\2\u102d\u102f\5\u0404\u0203\2\u102e\u102c")
        buf.write("\3\2\2\2\u102f\u1032\3\2\2\2\u1030\u102e\3\2\2\2\u1030")
        buf.write("\u1031\3\2\2\2\u1031\u1033\3\2\2\2\u1032\u1030\3\2\2\2")
        buf.write("\u1033\u1034\7\u0288\2\2\u1034\u0171\3\2\2\2\u1035\u1036")
        buf.write("\7\u0093\2\2\u1036\u1038\7\u0173\2\2\u1037\u1039\7\60")
        buf.write("\2\2\u1038\u1037\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103a")
        buf.write("\3\2\2\2\u103a\u103b\5\u03da\u01ee\2\u103b\u0173\3\2\2")
        buf.write("\2\u103c\u103d\7\16\2\2\u103d\u103e\7\u0173\2\2\u103e")
        buf.write("\u103f\5\u03da\u01ee\2\u103f\u1041\7R\2\2\u1040\u1042")
        buf.write("\7x\2\2\u1041\u1040\3\2\2\2\u1041\u1042\3\2\2\2\u1042")
        buf.write("\u1044\3\2\2\2\u1043\u1045\t,\2\2\u1044\u1043\3\2\2\2")
        buf.write("\u1044\u1045\3\2\2\2\u1045\u1049\3\2\2\2\u1046\u1048\5")
        buf.write("\u0208\u0105\2\u1047\u1046\3\2\2\2\u1048\u104b\3\2\2\2")
        buf.write("\u1049\u1047\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u104e\3")
        buf.write("\2\2\2\u104b\u1049\3\2\2\2\u104c\u104d\7\u01b4\2\2\u104d")
        buf.write("\u104f\7\u01d8\2\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2")
        buf.write("\2\2\u104f\u0175\3\2\2\2\u1050\u1053\7e\2\2\u1051\u1052")
        buf.write("\7\u0169\2\2\u1052\u1054\7\u01ac\2\2\u1053\u1051\3\2\2")
        buf.write("\2\u1053\u1054\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1058")
        buf.write("\7\u0173\2\2\u1056\u1059\5\u017a\u00be\2\u1057\u1059\5")
        buf.write("\u0178\u00bd\2\u1058\u1056\3\2\2\2\u1058\u1057\3\2\2\2")
        buf.write("\u1058\u1059\3\2\2\2\u1059\u0177\3\2\2\2\u105a\u105b\7")
        buf.write("\60\2\2\u105b\u105c\5\u03da\u01ee\2\u105c\u1060\t(\2\2")
        buf.write("\u105d\u105f\5\u0182\u00c2\2\u105e\u105d\3\2\2\2\u105f")
        buf.write("\u1062\3\2\2\2\u1060\u105e\3\2\2\2\u1060\u1061\3\2\2\2")
        buf.write("\u1061\u1069\3\2\2\2\u1062\u1060\3\2\2\2\u1063\u1064\7")
        buf.write("$\2\2\u1064\u106a\5\u0238\u011d\2\u1065\u1067\7\u009e")
        buf.write("\2\2\u1066\u1068\5\u03da\u01ee\2\u1067\u1066\3\2\2\2\u1067")
        buf.write("\u1068\3\2\2\2\u1068\u106a\3\2\2\2\u1069\u1063\3\2\2\2")
        buf.write("\u1069\u1065\3\2\2\2\u106a\u0179\3\2\2\2\u106b\u106d\5")
        buf.write("\u03da\u01ee\2\u106c\u106e\5\u0206\u0104\2\u106d\u106c")
        buf.write("\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u106f\3\2\2\2\u106f")
        buf.write("\u1073\t(\2\2\u1070\u1072\5\u017c\u00bf\2\u1071\u1070")
        buf.write("\3\2\2\2\u1072\u1075\3\2\2\2\u1073\u1071\3\2\2\2\u1073")
        buf.write("\u1074\3\2\2\2\u1074\u1076\3\2\2\2\u1075\u1073\3\2\2\2")
        buf.write("\u1076\u1078\7\u009e\2\2\u1077\u1079\5\u03da\u01ee\2\u1078")
        buf.write("\u1077\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u017b\3\2\2\2")
        buf.write("\u107a\u1084\5\u021a\u010e\2\u107b\u1084\5\u021c\u010f")
        buf.write("\2\u107c\u1084\5\u021e\u0110\2\u107d\u1084\5\u0222\u0112")
        buf.write("\2\u107e\u1084\5\u0224\u0113\2\u107f\u1084\5\u0226\u0114")
        buf.write("\2\u1080\u1084\5\u022e\u0118\2\u1081\u1084\5\u017e\u00c0")
        buf.write("\2\u1082\u1084\5\u0180\u00c1\2\u1083\u107a\3\2\2\2\u1083")
        buf.write("\u107b\3\2\2\2\u1083\u107c\3\2\2\2\u1083\u107d\3\2\2\2")
        buf.write("\u1083\u107e\3\2\2\2\u1083\u107f\3\2\2\2\u1083\u1080\3")
        buf.write("\2\2\2\u1083\u1081\3\2\2\2\u1083\u1082\3\2\2\2\u1084\u017d")
        buf.write("\3\2\2\2\u1085\u1086\7\u0192\2\2\u1086\u1092\5\u03f4\u01fb")
        buf.write("\2\u1087\u1088\7\u0287\2\2\u1088\u108d\5\u0214\u010b\2")
        buf.write("\u1089\u108a\7\u028d\2\2\u108a\u108c\5\u0214\u010b\2\u108b")
        buf.write("\u1089\3\2\2\2\u108c\u108f\3\2\2\2\u108d\u108b\3\2\2\2")
        buf.write("\u108d\u108e\3\2\2\2\u108e\u1090\3\2\2\2\u108f\u108d\3")
        buf.write("\2\2\2\u1090\u1091\7\u0288\2\2\u1091\u1093\3\2\2\2\u1092")
        buf.write("\u1087\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1094\3\2\2\2")
        buf.write("\u1094\u1095\7\u0293\2\2\u1095\u017f\3\2\2\2\u1096\u1097")
        buf.write("\7\u00c8\2\2\u1097\u10a3\5\u03f2\u01fa\2\u1098\u1099\7")
        buf.write("\u0287\2\2\u1099\u109e\5\u0214\u010b\2\u109a\u109b\7\u028d")
        buf.write("\2\2\u109b\u109d\5\u0214\u010b\2\u109c\u109a\3\2\2\2\u109d")
        buf.write("\u10a0\3\2\2\2\u109e\u109c\3\2\2\2\u109e\u109f\3\2\2\2")
        buf.write("\u109f\u10a1\3\2\2\2\u10a0\u109e\3\2\2\2\u10a1\u10a2\7")
        buf.write("\u0288\2\2\u10a2\u10a4\3\2\2\2\u10a3\u1098\3\2\2\2\u10a3")
        buf.write("\u10a4\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u10a6\7\u01b2")
        buf.write("\2\2\u10a6\u10a8\5\u041a\u020e\2\u10a7\u10a9\7\u008b\2")
        buf.write("\2\u10a8\u10a7\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u10ab")
        buf.write("\3\2\2\2\u10aa\u10ac\7\u01b0\2\2\u10ab\u10aa\3\2\2\2\u10ab")
        buf.write("\u10ac\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u10ae\7\u0293")
        buf.write("\2\2\u10ae\u0181\3\2\2\2\u10af\u10ba\5\u021a\u010e\2\u10b0")
        buf.write("\u10ba\5\u021c\u010f\2\u10b1\u10ba\5\u021e\u0110\2\u10b2")
        buf.write("\u10ba\5\u0222\u0112\2\u10b3\u10ba\5\u0226\u0114\2\u10b4")
        buf.write("\u10ba\5\u022e\u0118\2\u10b5\u10ba\5\u0188\u00c5\2\u10b6")
        buf.write("\u10ba\5\u0166\u00b4\2\u10b7\u10ba\5\u017e\u00c0\2\u10b8")
        buf.write("\u10ba\5\u0180\u00c1\2\u10b9\u10af\3\2\2\2\u10b9\u10b0")
        buf.write("\3\2\2\2\u10b9\u10b1\3\2\2\2\u10b9\u10b2\3\2\2\2\u10b9")
        buf.write("\u10b3\3\2\2\2\u10b9\u10b4\3\2\2\2\u10b9\u10b5\3\2\2\2")
        buf.write("\u10b9\u10b6\3\2\2\2\u10b9\u10b7\3\2\2\2\u10b9\u10b8\3")
        buf.write("\2\2\2\u10ba\u0183\3\2\2\2\u10bb\u10bc\7\u0093\2\2\u10bc")
        buf.write("\u10bd\7\u0192\2\2\u10bd\u10be\5\u03f4\u01fb\2\u10be\u0185")
        buf.write("\3\2\2\2\u10bf\u10c0\7\16\2\2\u10c0\u10c1\7\u0192\2\2")
        buf.write("\u10c1\u10c2\5\u03f4\u01fb\2\u10c2\u10c4\7R\2\2\u10c3")
        buf.write("\u10c5\7x\2\2\u10c4\u10c3\3\2\2\2\u10c4\u10c5\3\2\2\2")
        buf.write("\u10c5\u10c9\3\2\2\2\u10c6\u10c8\5\u0208\u0105\2\u10c7")
        buf.write("\u10c6\3\2\2\2\u10c8\u10cb\3\2\2\2\u10c9\u10c7\3\2\2\2")
        buf.write("\u10c9\u10ca\3\2\2\2\u10ca\u10ce\3\2\2\2\u10cb\u10c9\3")
        buf.write("\2\2\2\u10cc\u10cd\7\u01b4\2\2\u10cd\u10cf\7\u01d8\2\2")
        buf.write("\u10ce\u10cc\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u0187\3")
        buf.write("\2\2\2\u10d0\u10d3\7e\2\2\u10d1\u10d2\7\u0169\2\2\u10d2")
        buf.write("\u10d4\7\u01ac\2\2\u10d3\u10d1\3\2\2\2\u10d3\u10d4\3\2")
        buf.write("\2\2\u10d4\u10d6\3\2\2\2\u10d5\u10d0\3\2\2\2\u10d5\u10d6")
        buf.write("\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10d8\7\u0192\2\2\u10d8")
        buf.write("\u10e4\5\u03f4\u01fb\2\u10d9\u10da\7\u0287\2\2\u10da\u10df")
        buf.write("\5\u0214\u010b\2\u10db\u10dc\7\u028d\2\2\u10dc\u10de\5")
        buf.write("\u0214\u010b\2\u10dd\u10db\3\2\2\2\u10de\u10e1\3\2\2\2")
        buf.write("\u10df\u10dd\3\2\2\2\u10df\u10e0\3\2\2\2\u10e0\u10e2\3")
        buf.write("\2\2\2\u10e1\u10df\3\2\2\2\u10e2\u10e3\7\u0288\2\2\u10e3")
        buf.write("\u10e5\3\2\2\2\u10e4\u10d9\3\2\2\2\u10e4\u10e5\3\2\2\2")
        buf.write("\u10e5\u10e7\3\2\2\2\u10e6\u10e8\5\u0206\u0104\2\u10e7")
        buf.write("\u10e6\3\2\2\2\u10e7\u10e8\3\2\2\2\u10e8\u10e9\3\2\2\2")
        buf.write("\u10e9\u10f6\t(\2\2\u10ea\u10ec\7|\2\2\u10eb\u10ea\3\2")
        buf.write("\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10f0\3\2\2\2\u10ed\u10ef")
        buf.write("\5\u0218\u010d\2\u10ee\u10ed\3\2\2\2\u10ef\u10f2\3\2\2")
        buf.write("\2\u10f0\u10ee\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1\u10f3")
        buf.write("\3\2\2\2\u10f2\u10f0\3\2\2\2\u10f3\u10f7\5\u0262\u0132")
        buf.write("\2\u10f4\u10f7\5\u020a\u0106\2\u10f5\u10f7\7\u00b0\2\2")
        buf.write("\u10f6\u10eb\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f6\u10f5\3")
        buf.write("\2\2\2\u10f7\u0189\3\2\2\2\u10f8\u10f9\7\u0093\2\2\u10f9")
        buf.write("\u10fa\7\u0217\2\2\u10fa\u10fb\5\u03f6\u01fc\2\u10fb\u018b")
        buf.write("\3\2\2\2\u10fc\u10fd\7\16\2\2\u10fd\u10fe\7\u0217\2\2")
        buf.write("\u10fe\u1111\5\u03f6\u01fc\2\u10ff\u1112\t\6\2\2\u1100")
        buf.write("\u1101\7\u01ab\2\2\u1101\u1102\7\u0210\2\2\u1102\u1112")
        buf.write("\5\u03f6\u01fc\2\u1103\u1105\7R\2\2\u1104\u1106\7x\2\2")
        buf.write("\u1105\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u110a\3")
        buf.write("\2\2\2\u1107\u1109\5\u0208\u0105\2\u1108\u1107\3\2\2\2")
        buf.write("\u1109\u110c\3\2\2\2\u110a\u1108\3\2\2\2\u110a\u110b\3")
        buf.write("\2\2\2\u110b\u110f\3\2\2\2\u110c\u110a\3\2\2\2\u110d\u110e")
        buf.write("\7\u01b4\2\2\u110e\u1110\7\u01d8\2\2\u110f\u110d\3\2\2")
        buf.write("\2\u110f\u1110\3\2\2\2\u1110\u1112\3\2\2\2\u1111\u10ff")
        buf.write("\3\2\2\2\u1111\u1100\3\2\2\2\u1111\u1103\3\2\2\2\u1112")
        buf.write("\u018d\3\2\2\2\u1113\u1116\7e\2\2\u1114\u1115\7\u0169")
        buf.write("\2\2\u1115\u1117\7\u01ac\2\2\u1116\u1114\3\2\2\2\u1116")
        buf.write("\u1117\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u1119\7\u0217")
        buf.write("\2\2\u1119\u111d\5\u03f6\u01fc\2\u111a\u111e\5\u0194\u00cb")
        buf.write("\2\u111b\u111e\5\u0198\u00cd\2\u111c\u111e\5\u019a\u00ce")
        buf.write("\2\u111d\u111a\3\2\2\2\u111d\u111b\3\2\2\2\u111d\u111c")
        buf.write("\3\2\2\2\u111e\u1120\3\2\2\2\u111f\u1121\5\u0190\u00c9")
        buf.write("\2\u1120\u111f\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1123")
        buf.write("\3\2\2\2\u1122\u1124\t\6\2\2\u1123\u1122\3\2\2\2\u1123")
        buf.write("\u1124\3\2\2\2\u1124\u1126\3\2\2\2\u1125\u1127\5\u0192")
        buf.write("\u00ca\2\u1126\u1125\3\2\2\2\u1126\u1127\3\2\2\2\u1127")
        buf.write("\u1128\3\2\2\2\u1128\u1129\5\u019c\u00cf\2\u1129\u018f")
        buf.write("\3\2\2\2\u112a\u112b\7\u00be\2\2\u112b\u1130\5\u03f6\u01fc")
        buf.write("\2\u112c\u112d\7\u028d\2\2\u112d\u112f\5\u03f6\u01fc\2")
        buf.write("\u112e\u112c\3\2\2\2\u112f\u1132\3\2\2\2\u1130\u112e\3")
        buf.write("\2\2\2\u1130\u1131\3\2\2\2\u1131\u0191\3\2\2\2\u1132\u1130")
        buf.write("\3\2\2\2\u1133\u1134\7\u023f\2\2\u1134\u1135\7\u0287\2")
        buf.write("\2\u1135\u1136\5\u0344\u01a3\2\u1136\u1137\7\u0288\2\2")
        buf.write("\u1137\u0193\3\2\2\2\u1138\u113d\7#\2\2\u1139\u113d\7")
        buf.write("\b\2\2\u113a\u113b\7\u00ef\2\2\u113b\u113d\7\u015e\2\2")
        buf.write("\u113c\u1138\3\2\2\2\u113c\u1139\3\2\2\2\u113c\u113a\3")
        buf.write("\2\2\2\u113d\u113e\3\2\2\2\u113e\u1140\5\u01a6\u00d4\2")
        buf.write("\u113f\u1141\5\u01ac\u00d7\2\u1140\u113f\3\2\2\2\u1140")
        buf.write("\u1141\3\2\2\2\u1141\u1143\3\2\2\2\u1142\u1144\5\u0196")
        buf.write("\u00cc\2\u1143\u1142\3\2\2\2\u1143\u1144\3\2\2\2\u1144")
        buf.write("\u0195\3\2\2\2\u1145\u1146\7\u00bf\2\2\u1146\u1147\7\u0095")
        buf.write("\2\2\u1147\u1148\7\u01bc\2\2\u1148\u0197\3\2\2\2\u1149")
        buf.write("\u114a\7\u00bf\2\2\u114a\u114c\5\u01a6\u00d4\2\u114b\u114d")
        buf.write("\5\u01ac\u00d7\2\u114c\u114b\3\2\2\2\u114c\u114d\3\2\2")
        buf.write("\2\u114d\u0199\3\2\2\2\u114e\u114f\t-\2\2\u114f\u1154")
        buf.write("\5\u01a4\u00d3\2\u1150\u1151\7\u0169\2\2\u1151\u1153\5")
        buf.write("\u01a4\u00d3\2\u1152\u1150\3\2\2\2\u1153\u1156\3\2\2\2")
        buf.write("\u1154\u1152\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1157\3")
        buf.write("\2\2\2\u1156\u1154\3\2\2\2\u1157\u115f\7\u0164\2\2\u1158")
        buf.write("\u1160\7q\2\2\u1159\u115a\5\u03d6\u01ec\2\u115a\u115b")
        buf.write("\7\u0280\2\2\u115b\u115d\3\2\2\2\u115c\u1159\3\2\2\2\u115c")
        buf.write("\u115d\3\2\2\2\u115d\u115e\3\2\2\2\u115e\u1160\7\u01c5")
        buf.write("\2\2\u115f\u1158\3\2\2\2\u115f\u115c\3\2\2\2\u1160\u019b")
        buf.write("\3\2\2\2\u1161\u1162\7T\2\2\u1162\u1167\7\u0217\2\2\u1163")
        buf.write("\u1164\79\2\2\u1164\u1167\5\u0430\u0219\2\u1165\u1167")
        buf.write("\5\u0266\u0134\2\u1166\u1161\3\2\2\2\u1166\u1163\3\2\2")
        buf.write("\2\u1166\u1165\3\2\2\2\u1167\u019d\3\2\2\2\u1168\u116a")
        buf.write("\5\u03d8\u01ed\2\u1169\u116b\5\u0410\u0209\2\u116a\u1169")
        buf.write("\3\2\2\2\u116a\u116b\3\2\2\2\u116b\u019f\3\2\2\2\u116c")
        buf.write("\u116d\7T\2\2\u116d\u1171\7\u0217\2\2\u116e\u1170\5\u0218")
        buf.write("\u010d\2\u116f\u116e\3\2\2\2\u1170\u1173\3\2\2\2\u1171")
        buf.write("\u116f\3\2\2\2\u1171\u1172\3\2\2\2\u1172\u1175\3\2\2\2")
        buf.write("\u1173\u1171\3\2\2\2\u1174\u1176\5\u01a2\u00d2\2\u1175")
        buf.write("\u1174\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u1175\3\2\2\2")
        buf.write("\u1177\u1178\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117a\7")
        buf.write("\u009e\2\2\u117a\u117b\5\u03f6\u01fc\2\u117b\u01a1\3\2")
        buf.write("\2\2\u117c\u117d\7#\2\2\u117d\u117e\7\u01ee\2\2\u117e")
        buf.write("\u117f\7\u00f7\2\2\u117f\u1180\5\u0266\u0134\2\u1180\u1181")
        buf.write("\7#\2\2\u1181\u1182\7\u01ee\2\2\u1182\u1183\7\u0293\2")
        buf.write("\2\u1183\u11a1\3\2\2\2\u1184\u1185\7#\2\2\u1185\u1186")
        buf.write("\7\u0095\2\2\u1186\u1187\7\u01bc\2\2\u1187\u1188\7\u00f7")
        buf.write("\2\2\u1188\u1189\5\u0266\u0134\2\u1189\u118a\7#\2\2\u118a")
        buf.write("\u118b\7\u0095\2\2\u118b\u118c\7\u01bc\2\2\u118c\u118d")
        buf.write("\7\u0293\2\2\u118d\u11a1\3\2\2\2\u118e\u118f\7\b\2\2\u118f")
        buf.write("\u1190\7\u01ee\2\2\u1190\u1191\7\u00f7\2\2\u1191\u1192")
        buf.write("\5\u0266\u0134\2\u1192\u1193\7\b\2\2\u1193\u1194\7\u01ee")
        buf.write("\2\2\u1194\u1195\7\u0293\2\2\u1195\u11a1\3\2\2\2\u1196")
        buf.write("\u1197\7\b\2\2\u1197\u1198\7\u0095\2\2\u1198\u1199\7\u01bc")
        buf.write("\2\2\u1199\u119a\7\u00f7\2\2\u119a\u119b\5\u0266\u0134")
        buf.write("\2\u119b\u119c\7\b\2\2\u119c\u119d\7\u0095\2\2\u119d\u119e")
        buf.write("\7\u01bc\2\2\u119e\u119f\7\u0293\2\2\u119f\u11a1\3\2\2")
        buf.write("\2\u11a0\u117c\3\2\2\2\u11a0\u1184\3\2\2\2\u11a0\u118e")
        buf.write("\3\2\2\2\u11a0\u1196\3\2\2\2\u11a1\u01a3\3\2\2\2\u11a2")
        buf.write("\u11bd\7\16\2\2\u11a3\u11bd\7\20\2\2\u11a4\u11a5\7\30")
        buf.write("\2\2\u11a5\u11bd\7\u01f1\2\2\u11a6\u11bd\7\33\2\2\u11a7")
        buf.write("\u11bd\7M\2\2\u11a8\u11bd\7e\2\2\u11a9\u11aa\7\u008f\2")
        buf.write("\2\u11aa\u11bd\7\u01f1\2\2\u11ab\u11bd\7\u0093\2\2\u11ac")
        buf.write("\u11bd\7\u00cc\2\2\u11ad\u11bd\7\u0140\2\2\u11ae\u11bd")
        buf.write("\7\u01ab\2\2\u11af\u11bd\7\u01b6\2\2\u11b0\u11bd\7\u021a")
        buf.write("\2\2\u11b1\u11bd\7w\2\2\u11b2\u11bd\7\u01ed\2\2\u11b3")
        buf.write("\u11bd\7\u01dc\2\2\u11b4\u11bd\7u\2\2\u11b5\u11bd\7\u0118")
        buf.write("\2\2\u11b6\u11bd\7\u0116\2\2\u11b7\u11bd\7\u01d4\2\2\u11b8")
        buf.write("\u11bd\7\u01fd\2\2\u11b9\u11bd\7q\2\2\u11ba\u11bd\7\u01c5")
        buf.write("\2\2\u11bb\u11bd\7\u00be\2\2\u11bc\u11a2\3\2\2\2\u11bc")
        buf.write("\u11a3\3\2\2\2\u11bc\u11a4\3\2\2\2\u11bc\u11a6\3\2\2\2")
        buf.write("\u11bc\u11a7\3\2\2\2\u11bc\u11a8\3\2\2\2\u11bc\u11a9\3")
        buf.write("\2\2\2\u11bc\u11ab\3\2\2\2\u11bc\u11ac\3\2\2\2\u11bc\u11ad")
        buf.write("\3\2\2\2\u11bc\u11ae\3\2\2\2\u11bc\u11af\3\2\2\2\u11bc")
        buf.write("\u11b0\3\2\2\2\u11bc\u11b1\3\2\2\2\u11bc\u11b2\3\2\2\2")
        buf.write("\u11bc\u11b3\3\2\2\2\u11bc\u11b4\3\2\2\2\u11bc\u11b5\3")
        buf.write("\2\2\2\u11bc\u11b6\3\2\2\2\u11bc\u11b7\3\2\2\2\u11bc\u11b8")
        buf.write("\3\2\2\2\u11bc\u11b9\3\2\2\2\u11bc\u11ba\3\2\2\2\u11bc")
        buf.write("\u11bb\3\2\2\2\u11bd\u01a5\3\2\2\2\u11be\u11c3\5\u01a8")
        buf.write("\u00d5\2\u11bf\u11c0\7\u0169\2\2\u11c0\u11c2\5\u01a8\u00d5")
        buf.write("\2\u11c1\u11bf\3\2\2\2\u11c2\u11c5\3\2\2\2\u11c3\u11c1")
        buf.write("\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u11c6\3\2\2\2\u11c5")
        buf.write("\u11c3\3\2\2\2\u11c6\u11c8\7\u0164\2\2\u11c7\u11c9\5\u01aa")
        buf.write("\u00d6\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9")
        buf.write("\u11ca\3\2\2\2\u11ca\u11cb\5\u0408\u0205\2\u11cb\u01a7")
        buf.write("\3\2\2\2\u11cc\u11d6\t.\2\2\u11cd\u11ce\7\u015e\2\2\u11ce")
        buf.write("\u11d3\5\u0404\u0203\2\u11cf\u11d0\7\u028d\2\2\u11d0\u11d2")
        buf.write("\5\u0404\u0203\2\u11d1\u11cf\3\2\2\2\u11d2\u11d5\3\2\2")
        buf.write("\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d7")
        buf.write("\3\2\2\2\u11d5\u11d3\3\2\2\2\u11d6\u11cd\3\2\2\2\u11d6")
        buf.write("\u11d7\3\2\2\2\u11d7\u01a9\3\2\2\2\u11d8\u11d9\7\u013b")
        buf.write("\2\2\u11d9\u11da\7\u01ff\2\2\u11da\u11db\5\u0408\u0205")
        buf.write("\2\u11db\u11dc\7\u015e\2\2\u11dc\u01ab\3\2\2\2\u11dd\u11df")
        buf.write("\7\u01a4\2\2\u11de\u11e0\5\u01ae\u00d8\2\u11df\u11de\3")
        buf.write("\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e2")
        buf.write("\3\2\2\2\u11e2\u01ad\3\2\2\2\u11e3\u11e4\t/\2\2\u11e4")
        buf.write("\u11e5\5\u03be\u01e0\2\u11e5\u01af\3\2\2\2\u11e6\u11e7")
        buf.write("\7\u0093\2\2\u11e7\u11e9\7\u021c\2\2\u11e8\u11ea\7\60")
        buf.write("\2\2\u11e9\u11e8\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11eb")
        buf.write("\3\2\2\2\u11eb\u11ed\5\u03ec\u01f7\2\u11ec\u11ee\t\60")
        buf.write("\2\2\u11ed\u11ec\3\2\2\2\u11ed\u11ee\3\2\2\2\u11ee\u01b1")
        buf.write("\3\2\2\2\u11ef\u11f0\7\16\2\2\u11f0\u11f1\7\u021c\2\2")
        buf.write("\u11f1\u11f7\5\u03ec\u01f7\2\u11f2\u11f8\5\u01b4\u00db")
        buf.write("\2\u11f3\u11f8\5\u01b6\u00dc\2\u11f4\u11f8\5\u01b8\u00dd")
        buf.write("\2\u11f5\u11f8\5\u01c0\u00e1\2\u11f6\u11f8\5\u01e2\u00f2")
        buf.write("\2\u11f7\u11f2\3\2\2\2\u11f7\u11f3\3\2\2\2\u11f7\u11f4")
        buf.write("\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f7\u11f6\3\2\2\2\u11f8")
        buf.write("\u11fa\3\2\2\2\u11f9\u11fb\5\u01c2\u00e2\2\u11fa\u11f9")
        buf.write("\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb\u01b3\3\2\2\2\u11fc")
        buf.write("\u11fe\7R\2\2\u11fd\u11ff\7x\2\2\u11fe\u11fd\3\2\2\2\u11fe")
        buf.write("\u11ff\3\2\2\2\u11ff\u1201\3\2\2\2\u1200\u1202\t\61\2")
        buf.write("\2\u1201\u1200\3\2\2\2\u1201\u1202\3\2\2\2\u1202\u1206")
        buf.write("\3\2\2\2\u1203\u1205\5\u0208\u0105\2\u1204\u1203\3\2\2")
        buf.write("\2\u1205\u1208\3\2\2\2\u1206\u1204\3\2\2\2\u1206\u1207")
        buf.write("\3\2\2\2\u1207\u120b\3\2\2\2\u1208\u1206\3\2\2\2\u1209")
        buf.write("\u120a\7\u01b4\2\2\u120a\u120c\7\u01d8\2\2\u120b\u1209")
        buf.write("\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u01b5\3\2\2\2\u120d")
        buf.write("\u120f\7\u01ac\2\2\u120e\u1210\5\u0206\u0104\2\u120f\u120e")
        buf.write("\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1211\3\2\2\2\u1211")
        buf.write("\u1212\7\26\2\2\u1212\u1213\7\u015d\2\2\u1213\u1214\7")
        buf.write("\u0287\2\2\u1214\u1219\5\u01e4\u00f3\2\u1215\u1216\7\u028d")
        buf.write("\2\2\u1216\u1218\5\u01e4\u00f3\2\u1217\u1215\3\2\2\2\u1218")
        buf.write("\u121b\3\2\2\2\u1219\u1217\3\2\2\2\u1219\u121a\3\2\2\2")
        buf.write("\u121a\u121c\3\2\2\2\u121b\u1219\3\2\2\2\u121c\u121d\7")
        buf.write("\u0288\2\2\u121d\u01b7\3\2\2\2\u121e\u1223\5\u01ba\u00de")
        buf.write("\2\u121f\u1220\7\u028d\2\2\u1220\u1222\5\u01ba\u00de\2")
        buf.write("\u1221\u121f\3\2\2\2\u1222\u1225\3\2\2\2\u1223\u1221\3")
        buf.write("\2\2\2\u1223\u1224\3\2\2\2\u1224\u01b9\3\2\2\2\u1225\u1223")
        buf.write("\3\2\2\2\u1226\u1229\t\62\2\2\u1227\u122a\5\u01f4\u00fb")
        buf.write("\2\u1228\u122a\5\u01ec\u00f7\2\u1229\u1227\3\2\2\2\u1229")
        buf.write("\u1228\3\2\2\2\u122a\u01bb\3\2\2\2\u122b\u122c\t\63\2")
        buf.write("\2\u122c\u1239\7\32\2\2\u122d\u123a\5\u01be\u00e0\2\u122e")
        buf.write("\u122f\7\u0287\2\2\u122f\u1234\5\u01be\u00e0\2\u1230\u1231")
        buf.write("\7\u028d\2\2\u1231\u1233\5\u01be\u00e0\2\u1232\u1230\3")
        buf.write("\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235")
        buf.write("\3\2\2\2\u1235\u1237\3\2\2\2\u1236\u1234\3\2\2\2\u1237")
        buf.write("\u1238\7\u0288\2\2\u1238\u123a\3\2\2\2\u1239\u122d\3\2")
        buf.write("\2\2\u1239\u122e\3\2\2\2\u123a\u01bd\3\2\2\2\u123b\u123d")
        buf.write("\5\u03ce\u01e8\2\u123c\u123e\5\u041a\u020e\2\u123d\u123c")
        buf.write("\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u01bf\3\2\2\2\u123f")
        buf.write("\u1245\7\u012f\2\2\u1240\u1241\7\u010c\2\2\u1241\u1246")
        buf.write("\5\u0346\u01a4\2\u1242\u1243\7\u0097\2\2\u1243\u1244\7")
        buf.write("\u021c\2\2\u1244\u1246\5\u041a\u020e\2\u1245\u1240\3\2")
        buf.write("\2\2\u1245\u1242\3\2\2\2\u1246\u01c1\3\2\2\2\u1247\u1258")
        buf.write("\7\u00f5\2\2\u1248\u1252\7;\2\2\u1249\u124a\7`\2\2\u124a")
        buf.write("\u124b\7\u0210\2\2\u124b\u1253\7\u01f8\2\2\u124c\u124e")
        buf.write("\7\u0153\2\2\u124d\u124c\3\2\2\2\u124d\u124e\3\2\2\2\u124e")
        buf.write("\u124f\3\2\2\2\u124f\u1250\7\u00dd\2\2\u1250\u1251\7\u01ff")
        buf.write("\2\2\u1251\u1253\7p\2\2\u1252\u1249\3\2\2\2\u1252\u124d")
        buf.write("\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1255\3\2\2\2\u1254")
        buf.write("\u1256\5\u01c4\u00e3\2\u1255\u1254\3\2\2\2\u1255\u1256")
        buf.write("\3\2\2\2\u1256\u1258\3\2\2\2\u1257\u1247\3\2\2\2\u1257")
        buf.write("\u1248\3\2\2\2\u1258\u01c3\3\2\2\2\u1259\u125b\7\u00c1")
        buf.write("\2\2\u125a\u1259\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u125c")
        buf.write("\3\2\2\2\u125c\u125d\7\u00a8\2\2\u125d\u125e\7\u00f4\2")
        buf.write("\2\u125e\u125f\5\u0408\u0205\2\u125f\u01c5\3\2\2\2\u1260")
        buf.write("\u1263\7e\2\2\u1261\u1262\7\u0169\2\2\u1262\u1264\7\u01ac")
        buf.write("\2\2\u1263\u1261\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265")
        buf.write("\3\2\2\2\u1265\u1268\7\u021c\2\2\u1266\u1269\5\u01c8\u00e5")
        buf.write("\2\u1267\u1269\5\u01d4\u00eb\2\u1268\u1266\3\2\2\2\u1268")
        buf.write("\u1267\3\2\2\2\u1269\u01c7\3\2\2\2\u126a\u126d\5\u03ec")
        buf.write("\u01f7\2\u126b\u126c\7\u0160\2\2\u126c\u126e\7\u0283\2")
        buf.write("\2\u126d\u126b\3\2\2\2\u126d\u126e\3\2\2\2\u126e\u1270")
        buf.write("\3\2\2\2\u126f\u1271\5\u01ca\u00e6\2\u1270\u126f\3\2\2")
        buf.write("\2\u1270\u1271\3\2\2\2\u1271\u01c9\3\2\2\2\u1272\u1274")
        buf.write("\5\u0206\u0104\2\u1273\u1272\3\2\2\2\u1273\u1274\3\2\2")
        buf.write("\2\u1274\u1277\3\2\2\2\u1275\u1278\5\u01cc\u00e7\2\u1276")
        buf.write("\u1278\5\u01ce\u00e8\2\u1277\u1275\3\2\2\2\u1277\u1276")
        buf.write("\3\2\2\2\u1278\u127a\3\2\2\2\u1279\u127b\5\u01d2\u00ea")
        buf.write("\2\u127a\u1279\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u1287")
        buf.write("\3\2\2\2\u127c\u127d\7\u0287\2\2\u127d\u1282\5\u01e4\u00f3")
        buf.write("\2\u127e\u127f\7\u028d\2\2\u127f\u1281\5\u01e4\u00f3\2")
        buf.write("\u1280\u127e\3\2\2\2\u1281\u1284\3\2\2\2\u1282\u1280\3")
        buf.write("\2\2\2\u1282\u1283\3\2\2\2\u1283\u1285\3\2\2\2\u1284\u1282")
        buf.write("\3\2\2\2\u1285\u1286\7\u0288\2\2\u1286\u1288\3\2\2\2\u1287")
        buf.write("\u127c\3\2\2\2\u1287\u1288\3\2\2\2\u1288\u128c\3\2\2\2")
        buf.write("\u1289\u128b\5\u01e2\u00f2\2\u128a\u1289\3\2\2\2\u128b")
        buf.write("\u128e\3\2\2\2\u128c\u128a\3\2\2\2\u128c\u128d\3\2\2\2")
        buf.write("\u128d\u01cb\3\2\2\2\u128e\u128c\3\2\2\2\u128f\u1293\t")
        buf.write("(\2\2\u1290\u1294\7\u015d\2\2\u1291\u1294\5\u0234\u011b")
        buf.write("\2\u1292\u1294\5\u01d0\u00e9\2\u1293\u1290\3\2\2\2\u1293")
        buf.write("\u1291\3\2\2\2\u1293\u1292\3\2\2\2\u1294\u01cd\3\2\2\2")
        buf.write("\u1295\u1296\7\u021e\2\2\u1296\u1297\5\u041a\u020e\2\u1297")
        buf.write("\u01cf\3\2\2\2\u1298\u1299\7\u01ff\2\2\u1299\u129a\7\u015e")
        buf.write("\2\2\u129a\u129d\5\u041a\u020e\2\u129b\u129c\7\u0153\2")
        buf.write("\2\u129c\u129e\7\u0157\2\2\u129d\u129b\3\2\2\2\u129d\u129e")
        buf.write("\3\2\2\2\u129e\u01d1\3\2\2\2\u129f\u12a0\7\u00b0\2\2\u12a0")
        buf.write("\u12a1\7\u0133\2\2\u12a1\u12a2\5\u0346\u01a4\2\u12a2\u12a3")
        buf.write("\7\u00ff\2\2\u12a3\u12a4\7\u00fa\2\2\u12a4\u12a5\7\u022c")
        buf.write("\2\2\u12a5\u12a6\t\64\2\2\u12a6\u01d3\3\2\2\2\u12a7\u12a8")
        buf.write("\7\60\2\2\u12a8\u12a9\5\u03ec\u01f7\2\u12a9\u12ab\t(\2")
        buf.write("\2\u12aa\u12ac\5\u01d6\u00ec\2\u12ab\u12aa\3\2\2\2\u12ac")
        buf.write("\u12ad\3\2\2\2\u12ad\u12ab\3\2\2\2\u12ad\u12ae\3\2\2\2")
        buf.write("\u12ae\u12af\3\2\2\2\u12af\u12b0\7\u009e\2\2\u12b0\u01d5")
        buf.write("\3\2\2\2\u12b1\u12b4\5\u01d8\u00ed\2\u12b2\u12b4\5\u01da")
        buf.write("\u00ee\2\u12b3\u12b1\3\2\2\2\u12b3\u12b2\3\2\2\2\u12b4")
        buf.write("\u01d7\3\2\2\2\u12b5\u12b6\t\65\2\2\u12b6\u12b7\7\u0125")
        buf.write("\2\2\u12b7\u12b8\5\u01de\u00f0\2\u12b8\u01d9\3\2\2\2\u12b9")
        buf.write("\u12bd\t\66\2\2\u12ba\u12be\5\u01dc\u00ef\2\u12bb\u12be")
        buf.write("\5\u01de\u00f0\2\u12bc\u12be\5\u01e0\u00f1\2\u12bd\u12ba")
        buf.write("\3\2\2\2\u12bd\u12bb\3\2\2\2\u12bd\u12bc\3\2\2\2\u12be")
        buf.write("\u01db\3\2\2\2\u12bf\u12c0\7\u0192\2\2\u12c0\u12c1\5\u03f4")
        buf.write("\u01fb\2\u12c1\u12c2\7\u0287\2\2\u12c2\u12c7\5\u01fa\u00fe")
        buf.write("\2\u12c3\u12c4\7\u028d\2\2\u12c4\u12c6\5\u01fa\u00fe\2")
        buf.write("\u12c5\u12c3\3\2\2\2\u12c6\u12c9\3\2\2\2\u12c7\u12c5\3")
        buf.write("\2\2\2\u12c7\u12c8\3\2\2\2\u12c8\u12ca\3\2\2\2\u12c9\u12c7")
        buf.write("\3\2\2\2\u12ca\u12cb\7\u0288\2\2\u12cb\u12d9\t(\2\2\u12cc")
        buf.write("\u12da\5\u020a\u0106\2\u12cd\u12cf\7|\2\2\u12ce\u12cd")
        buf.write("\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u12d3\3\2\2\2\u12d0")
        buf.write("\u12d2\5\u0218\u010d\2\u12d1\u12d0\3\2\2\2\u12d2\u12d5")
        buf.write("\3\2\2\2\u12d3\u12d1\3\2\2\2\u12d3\u12d4\3\2\2\2\u12d4")
        buf.write("\u12d6\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d6\u12d7\5\u0262")
        buf.write("\u0132\2\u12d7\u12d8\7\u0293\2\2\u12d8\u12da\3\2\2\2\u12d9")
        buf.write("\u12cc\3\2\2\2\u12d9\u12ce\3\2\2\2\u12da\u01dd\3\2\2\2")
        buf.write("\u12db\u12dc\7\u00c8\2\2\u12dc\u12e8\5\u03f2\u01fa\2\u12dd")
        buf.write("\u12de\7\u0287\2\2\u12de\u12e3\5\u01fa\u00fe\2\u12df\u12e0")
        buf.write("\7\u028d\2\2\u12e0\u12e2\5\u01fa\u00fe\2\u12e1\u12df\3")
        buf.write("\2\2\2\u12e2\u12e5\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e3\u12e4")
        buf.write("\3\2\2\2\u12e4\u12e6\3\2\2\2\u12e5\u12e3\3\2\2\2\u12e6")
        buf.write("\u12e7\7\u0288\2\2\u12e7\u12e9\3\2\2\2\u12e8\u12dd\3\2")
        buf.write("\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12eb")
        buf.write("\7\u01b2\2\2\u12eb\u12ec\5\u041a\u020e\2\u12ec\u12fa\t")
        buf.write("(\2\2\u12ed\u12fb\5\u020a\u0106\2\u12ee\u12f0\7|\2\2\u12ef")
        buf.write("\u12ee\3\2\2\2\u12ef\u12f0\3\2\2\2\u12f0\u12f4\3\2\2\2")
        buf.write("\u12f1\u12f3\5\u0218\u010d\2\u12f2\u12f1\3\2\2\2\u12f3")
        buf.write("\u12f6\3\2\2\2\u12f4\u12f2\3\2\2\2\u12f4\u12f5\3\2\2\2")
        buf.write("\u12f5\u12f7\3\2\2\2\u12f6\u12f4\3\2\2\2\u12f7\u12f8\5")
        buf.write("\u0262\u0132\2\u12f8\u12f9\7\u0293\2\2\u12f9\u12fb\3\2")
        buf.write("\2\2\u12fa\u12ed\3\2\2\2\u12fa\u12ef\3\2\2\2\u12fb\u01df")
        buf.write("\3\2\2\2\u12fc\u12fe\7\u00b7\2\2\u12fd\u12fc\3\2\2\2\u12fd")
        buf.write("\u12fe\3\2\2\2\u12fe\u1300\3\2\2\2\u12ff\u1301\7\u00ee")
        buf.write("\2\2\u1300\u12ff\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302")
        buf.write("\3\2\2\2\u1302\u1303\7\\\2\2\u1303\u1304\7\u00c8\2\2\u1304")
        buf.write("\u1316\5\u041a\u020e\2\u1305\u1306\7\u0287\2\2\u1306\u1307")
        buf.write("\7\u01cf\2\2\u1307\u1308\7\u00db\2\2\u1308\u1309\7\u016e")
        buf.write("\2\2\u1309\u130a\5\u041a\u020e\2\u130a\u130b\7\u028d\2")
        buf.write("\2\u130b\u130c\3\2\2\2\u130c\u1311\5\u01fa\u00fe\2\u130d")
        buf.write("\u130e\7\u028d\2\2\u130e\u1310\5\u01fa\u00fe\2\u130f\u130d")
        buf.write("\3\2\2\2\u1310\u1313\3\2\2\2\u1311\u130f\3\2\2\2\u1311")
        buf.write("\u1312\3\2\2\2\u1312\u1314\3\2\2\2\u1313\u1311\3\2\2\2")
        buf.write("\u1314\u1315\7\u0288\2\2\u1315\u1317\3\2\2\2\u1316\u1305")
        buf.write("\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318")
        buf.write("\u1319\7\u01b2\2\2\u1319\u131a\7\u01cf\2\2\u131a\u131b")
        buf.write("\7\26\2\2\u131b\u131c\7\u01af\2\2\u131c\u132a\t(\2\2\u131d")
        buf.write("\u132b\5\u020a\u0106\2\u131e\u1320\7|\2\2\u131f\u131e")
        buf.write("\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1324\3\2\2\2\u1321")
        buf.write("\u1323\5\u0218\u010d\2\u1322\u1321\3\2\2\2\u1323\u1326")
        buf.write("\3\2\2\2\u1324\u1322\3\2\2\2\u1324\u1325\3\2\2\2\u1325")
        buf.write("\u1327\3\2\2\2\u1326\u1324\3\2\2\2\u1327\u1328\5\u0262")
        buf.write("\u0132\2\u1328\u1329\7\u0293\2\2\u1329\u132b\3\2\2\2\u132a")
        buf.write("\u131d\3\2\2\2\u132a\u131f\3\2\2\2\u132b\u01e1\3\2\2\2")
        buf.write("\u132c\u132e\7\u0153\2\2\u132d\u132c\3\2\2\2\u132d\u132e")
        buf.write("\3\2\2\2\u132e\u132f\3\2\2\2\u132f\u1330\t\67\2\2\u1330")
        buf.write("\u01e3\3\2\2\2\u1331\u1332\5\u0430\u0219\2\u1332\u1334")
        buf.write("\5\u041a\u020e\2\u1333\u1335\5\u01e6\u00f4\2\u1334\u1333")
        buf.write("\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1338\3\2\2\2\u1336")
        buf.write("\u1338\5\u01e8\u00f5\2\u1337\u1331\3\2\2\2\u1337\u1336")
        buf.write("\3\2\2\2\u1338\u01e5\3\2\2\2\u1339\u133a\7\u00b0\2\2\u133a")
        buf.write("\u133b\7\u0133\2\2\u133b\u133c\5\u0346\u01a4\2\u133c\u01e7")
        buf.write("\3\2\2\2\u133d\u133f\5\u01e2\u00f2\2\u133e\u133d\3\2\2")
        buf.write("\2\u133e\u133f\3\2\2\2\u133f\u1341\3\2\2\2\u1340\u1342")
        buf.write("\5\u01ea\u00f6\2\u1341\u1340\3\2\2\2\u1342\u1343\3\2\2")
        buf.write("\2\u1343\u1341\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u1347")
        buf.write("\3\2\2\2\u1345\u1346\7\u028d\2\2\u1346\u1348\5\u01f6\u00fc")
        buf.write("\2\u1347\u1345\3\2\2\2\u1347\u1348\3\2\2\2\u1348\u01e9")
        buf.write("\3\2\2\2\u1349\u134d\5\u01ec\u00f7\2\u134a\u134d\5\u01f2")
        buf.write("\u00fa\2\u134b\u134d\5\u01f4\u00fb\2\u134c\u1349\3\2\2")
        buf.write("\2\u134c\u134a\3\2\2\2\u134c\u134b\3\2\2\2\u134d\u01eb")
        buf.write("\3\2\2\2\u134e\u1351\t\66\2\2\u134f\u1352\5\u01ee\u00f8")
        buf.write("\2\u1350\u1352\5\u01f0\u00f9\2\u1351\u134f\3\2\2\2\u1351")
        buf.write("\u1350\3\2\2\2\u1352\u01ed\3\2\2\2\u1353\u1354\7\u0192")
        buf.write("\2\2\u1354\u1355\5\u03f4\u01fb\2\u1355\u1356\7\u0287\2")
        buf.write("\2\u1356\u135b\5\u01fa\u00fe\2\u1357\u1358\7\u028d\2\2")
        buf.write("\u1358\u135a\5\u01fa\u00fe\2\u1359\u1357\3\2\2\2\u135a")
        buf.write("\u135d\3\2\2\2\u135b\u1359\3\2\2\2\u135b\u135c\3\2\2\2")
        buf.write("\u135c\u135e\3\2\2\2\u135d\u135b\3\2\2\2\u135e\u1361\7")
        buf.write("\u0288\2\2\u135f\u1360\t(\2\2\u1360\u1362\5\u020a\u0106")
        buf.write("\2\u1361\u135f\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u01ef")
        buf.write("\3\2\2\2\u1363\u1364\7\u00c8\2\2\u1364\u1370\5\u03f2\u01fa")
        buf.write("\2\u1365\u1366\7\u0287\2\2\u1366\u136b\5\u01fa\u00fe\2")
        buf.write("\u1367\u1368\7\u028d\2\2\u1368\u136a\5\u01fa\u00fe\2\u1369")
        buf.write("\u1367\3\2\2\2\u136a\u136d\3\2\2\2\u136b\u1369\3\2\2\2")
        buf.write("\u136b\u136c\3\2\2\2\u136c\u136e\3\2\2\2\u136d\u136b\3")
        buf.write("\2\2\2\u136e\u136f\7\u0288\2\2\u136f\u1371\3\2\2\2\u1370")
        buf.write("\u1365\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u1372\3\2\2\2")
        buf.write("\u1372\u1377\7\u01b2\2\2\u1373\u1378\5\u041a\u020e\2\u1374")
        buf.write("\u1375\7\u01cf\2\2\u1375\u1376\7\26\2\2\u1376\u1378\7")
        buf.write("\u01af\2\2\u1377\u1373\3\2\2\2\u1377\u1374\3\2\2\2\u1378")
        buf.write("\u1381\3\2\2\2\u1379\u137a\t(\2\2\u137a\u1382\5\u020a")
        buf.write("\u0106\2\u137b\u137d\7\u00b0\2\2\u137c\u137e\7\u0232\2")
        buf.write("\2\u137d\u137c\3\2\2\2\u137d\u137e\3\2\2\2\u137e\u137f")
        buf.write("\3\2\2\2\u137f\u1380\7\u0133\2\2\u1380\u1382\5\u0346\u01a4")
        buf.write("\2\u1381\u1379\3\2\2\2\u1381\u137b\3\2\2\2\u1381\u1382")
        buf.write("\3\2\2\2\u1382\u01f1\3\2\2\2\u1383\u1385\7\u00b7\2\2\u1384")
        buf.write("\u1383\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1387\3\2\2\2")
        buf.write("\u1386\u1388\7\u00ee\2\2\u1387\u1386\3\2\2\2\u1387\u1388")
        buf.write("\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138a\7\\\2\2\u138a")
        buf.write("\u138b\7\u00c8\2\2\u138b\u139d\5\u041a\u020e\2\u138c\u138d")
        buf.write("\7\u0287\2\2\u138d\u138e\7\u01cf\2\2\u138e\u138f\7\u00db")
        buf.write("\2\2\u138f\u1390\7\u016e\2\2\u1390\u1391\5\u041a\u020e")
        buf.write("\2\u1391\u1392\7\u028d\2\2\u1392\u1393\3\2\2\2\u1393\u1398")
        buf.write("\5\u01fa\u00fe\2\u1394\u1395\7\u028d\2\2\u1395\u1397\5")
        buf.write("\u01fa\u00fe\2\u1396\u1394\3\2\2\2\u1397\u139a\3\2\2\2")
        buf.write("\u1398\u1396\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u139b\3")
        buf.write("\2\2\2\u139a\u1398\3\2\2\2\u139b\u139c\7\u0288\2\2\u139c")
        buf.write("\u139e\3\2\2\2\u139d\u138c\3\2\2\2\u139d\u139e\3\2\2\2")
        buf.write("\u139e\u139f\3\2\2\2\u139f\u13a0\7\u01b2\2\2\u13a0\u13a1")
        buf.write("\7\u01cf\2\2\u13a1\u13a2\7\26\2\2\u13a2\u13a5\7\u01af")
        buf.write("\2\2\u13a3\u13a4\t(\2\2\u13a4\u13a6\5\u020a\u0106\2\u13a5")
        buf.write("\u13a3\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u01f3\3\2\2\2")
        buf.write("\u13a7\u13a8\t\65\2\2\u13a8\u13a9\7\u0125\2\2\u13a9\u13aa")
        buf.write("\5\u01f0\u00f9\2\u13aa\u01f5\3\2\2\2\u13ab\u13ac\7\u018a")
        buf.write("\2\2\u13ac\u13ad\7\u01ae\2\2\u13ad\u13ae\7\u0287\2\2\u13ae")
        buf.write("\u13b3\5\u01f8\u00fd\2\u13af\u13b0\7\u028d\2\2\u13b0\u13b2")
        buf.write("\5\u01f8\u00fd\2\u13b1\u13af\3\2\2\2\u13b2\u13b5\3\2\2")
        buf.write("\2\u13b3\u13b1\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b6")
        buf.write("\3\2\2\2\u13b5\u13b3\3\2\2\2\u13b6\u13b7\7\u0288\2\2\u13b7")
        buf.write("\u01f7\3\2\2\2\u13b8\u13bb\5\u0430\u0219\2\u13b9\u13bb")
        buf.write("\7\u0082\2\2\u13ba\u13b8\3\2\2\2\u13ba\u13b9\3\2\2\2\u13bb")
        buf.write("\u01f9\3\2\2\2\u13bc\u13bd\5\u03de\u01f0\2\u13bd\u13be")
        buf.write("\5\u041a\u020e\2\u13be\u01fb\3\2\2\2\u13bf\u13c0\7\u0093")
        buf.write("\2\2\u13c0\u13c1\7\u01d0\2\2\u13c1\u13c2\5\u03ee\u01f8")
        buf.write("\2\u13c2\u01fd\3\2\2\2\u13c3\u13c4\7\16\2\2\u13c4\u13c5")
        buf.write("\7\u01d0\2\2\u13c5\u13c7\5\u03ee\u01f8\2\u13c6\u13c8\5")
        buf.write("\u0202\u0102\2\u13c7\u13c6\3\2\2\2\u13c8\u13c9\3\2\2\2")
        buf.write("\u13c9\u13c7\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u01ff\3")
        buf.write("\2\2\2\u13cb\u13cc\7e\2\2\u13cc\u13cd\7\u01d0\2\2\u13cd")
        buf.write("\u13d2\5\u03ee\u01f8\2\u13ce\u13d1\5\u0204\u0103\2\u13cf")
        buf.write("\u13d1\5\u0202\u0102\2\u13d0\u13ce\3\2\2\2\u13d0\u13cf")
        buf.write("\3\2\2\2\u13d1\u13d4\3\2\2\2\u13d2\u13d0\3\2\2\2\u13d2")
        buf.write("\u13d3\3\2\2\2\u13d3\u0201\3\2\2\2\u13d4\u13d2\3\2\2\2")
        buf.write("\u13d5\u13d6\7\u00de\2\2\u13d6\u13d7\7\65\2\2\u13d7\u13e6")
        buf.write("\7\u0281\2\2\u13d8\u13d9\7\u0122\2\2\u13d9\u13e6\7\u0281")
        buf.write("\2\2\u13da\u13e6\7\u0148\2\2\u13db\u13dc\7\u012b\2\2\u13dc")
        buf.write("\u13e6\7\u0281\2\2\u13dd\u13e6\7\u014a\2\2\u13de\u13e6")
        buf.write("\7o\2\2\u13df\u13e6\7\u0144\2\2\u13e0\u13e1\78\2\2\u13e1")
        buf.write("\u13e6\7\u0281\2\2\u13e2\u13e6\7\u0141\2\2\u13e3\u13e6")
        buf.write("\7\u016b\2\2\u13e4\u13e6\7\u014d\2\2\u13e5\u13d5\3\2\2")
        buf.write("\2\u13e5\u13d8\3\2\2\2\u13e5\u13da\3\2\2\2\u13e5\u13db")
        buf.write("\3\2\2\2\u13e5\u13dd\3\2\2\2\u13e5\u13de\3\2\2\2\u13e5")
        buf.write("\u13df\3\2\2\2\u13e5\u13e0\3\2\2\2\u13e5\u13e2\3\2\2\2")
        buf.write("\u13e5\u13e3\3\2\2\2\u13e5\u13e4\3\2\2\2\u13e6\u0203\3")
        buf.write("\2\2\2\u13e7\u13e8\7\u01ec\2\2\u13e8\u13e9\7\u0243\2\2")
        buf.write("\u13e9\u13ea\7\u0281\2\2\u13ea\u0205\3\2\2\2\u13eb\u13ec")
        buf.write("\7\34\2\2\u13ec\u13ed\t8\2\2\u13ed\u0207\3\2\2\2\u13ee")
        buf.write("\u13ef\5\u0430\u0219\2\u13ef\u13f0\7\u029e\2\2\u13f0\u13f1")
        buf.write("\5\u0346\u01a4\2\u13f1\u0209\3\2\2\2\u13f2\u13f5\7\u00ff")
        buf.write("\2\2\u13f3\u13f6\5\u020c\u0107\2\u13f4\u13f6\5\u020e\u0108")
        buf.write("\2\u13f5\u13f3\3\2\2\2\u13f5\u13f4\3\2\2\2\u13f6\u020b")
        buf.write("\3\2\2\2\u13f7\u13f8\7\u00fa\2\2\u13f8\u13f9\7\u0133\2")
        buf.write("\2\u13f9\u13fa\7\u0283\2\2\u13fa\u020d\3\2\2\2\u13fb\u13fe")
        buf.write("\7\67\2\2\u13fc\u13fd\7\u0133\2\2\u13fd\u13ff\7\u0283")
        buf.write("\2\2\u13fe\u13fc\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1400")
        buf.write("\3\2\2\2\u1400\u1401\7\u0107\2\2\u1401\u1403\5\u0430\u0219")
        buf.write("\2\u1402\u1404\5\u0210\u0109\2\u1403\u1402\3\2\2\2\u1403")
        buf.write("\u1404\3\2\2\2\u1404\u1407\3\2\2\2\u1405\u1406\7\u0243")
        buf.write("\2\2\u1406\u1408\7^\2\2\u1407\u1405\3\2\2\2\u1407\u1408")
        buf.write("\3\2\2\2\u1408\u140a\3\2\2\2\u1409\u140b\5\u0212\u010a")
        buf.write("\2\u140a\u1409\3\2\2\2\u140a\u140b\3\2\2\2\u140b\u020f")
        buf.write("\3\2\2\2\u140c\u140d\7\t\2\2\u140d\u140e\7\u00db\2\2\u140e")
        buf.write("\u140f\7\u0287\2\2\u140f\u1414\5\u0346\u01a4\2\u1410\u1411")
        buf.write("\7\u028d\2\2\u1411\u1413\5\u0346\u01a4\2\u1412\u1410\3")
        buf.write("\2\2\2\u1413\u1416\3\2\2\2\u1414\u1412\3\2\2\2\u1414\u1415")
        buf.write("\3\2\2\2\u1415\u1417\3\2\2\2\u1416\u1414\3\2\2\2\u1417")
        buf.write("\u1418\7\u0288\2\2\u1418\u0211\3\2\2\2\u1419\u141a\7\u0176")
        buf.write("\2\2\u141a\u1426\7\u0287\2\2\u141b\u1420\5\u0346\u01a4")
        buf.write("\2\u141c\u141d\7\u028d\2\2\u141d\u141f\5\u0346\u01a4\2")
        buf.write("\u141e\u141c\3\2\2\2\u141f\u1422\3\2\2\2\u1420\u141e\3")
        buf.write("\2\2\2\u1420\u1421\3\2\2\2\u1421\u1427\3\2\2\2\u1422\u1420")
        buf.write("\3\2\2\2\u1423\u1424\7\u0280\2\2\u1424\u1425\7\u0280\2")
        buf.write("\2\u1425\u1427\7\u0280\2\2\u1426\u141b\3\2\2\2\u1426\u1423")
        buf.write("\3\2\2\2\u1427\u1428\3\2\2\2\u1428\u1429\7\u0288\2\2\u1429")
        buf.write("\u0213\3\2\2\2\u142a\u142e\5\u03de\u01f0\2\u142b\u142d")
        buf.write("\t9\2\2\u142c\u142b\3\2\2\2\u142d\u1430\3\2\2\2\u142e")
        buf.write("\u142c\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1432\3\2\2\2")
        buf.write("\u1430\u142e\3\2\2\2\u1431\u1433\5\u041a\u020e\2\u1432")
        buf.write("\u1431\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1435\3\2\2\2")
        buf.write("\u1434\u1436\5\u0216\u010c\2\u1435\u1434\3\2\2\2\u1435")
        buf.write("\u1436\3\2\2\2\u1436\u0215\3\2\2\2\u1437\u1438\t:\2\2")
        buf.write("\u1438\u1439\5\u0346\u01a4\2\u1439\u0217\3\2\2\2\u143a")
        buf.write("\u1444\5\u021a\u010e\2\u143b\u1444\5\u021c\u010f\2\u143c")
        buf.write("\u1444\5\u021e\u0110\2\u143d\u1444\5\u0222\u0112\2\u143e")
        buf.write("\u1444\5\u0224\u0113\2\u143f\u1444\5\u0226\u0114\2\u1440")
        buf.write("\u1444\5\u022e\u0118\2\u1441\u1444\5\u0188\u00c5\2\u1442")
        buf.write("\u1444\5\u0166\u00b4\2\u1443\u143a\3\2\2\2\u1443\u143b")
        buf.write("\3\2\2\2\u1443\u143c\3\2\2\2\u1443\u143d\3\2\2\2\u1443")
        buf.write("\u143e\3\2\2\2\u1443\u143f\3\2\2\2\u1443\u1440\3\2\2\2")
        buf.write("\u1443\u1441\3\2\2\2\u1443\u1442\3\2\2\2\u1444\u0219\3")
        buf.write("\2\2\2\u1445\u1447\5\u03f8\u01fd\2\u1446\u1448\7Y\2\2")
        buf.write("\u1447\u1446\3\2\2\2\u1447\u1448\3\2\2\2\u1448\u1449\3")
        buf.write("\2\2\2\u1449\u144c\5\u041a\u020e\2\u144a\u144b\7\u0153")
        buf.write("\2\2\u144b\u144d\7\u0157\2\2\u144c\u144a\3\2\2\2\u144c")
        buf.write("\u144d\3\2\2\2\u144d\u144f\3\2\2\2\u144e\u1450\5\u0216")
        buf.write("\u010c\2\u144f\u144e\3\2\2\2\u144f\u1450\3\2\2\2\u1450")
        buf.write("\u1451\3\2\2\2\u1451\u1452\7\u0293\2\2\u1452\u021b\3\2")
        buf.write("\2\2\u1453\u1454\7\u01fa\2\2\u1454\u1455\5\u03ec\u01f7")
        buf.write("\2\u1455\u1456\7\u00f7\2\2\u1456\u145c\5\u041a\u020e\2")
        buf.write("\u1457\u1458\7\u0197\2\2\u1458\u1459\5\u0346\u01a4\2\u1459")
        buf.write("\u145a\7\3\2\2\u145a\u145b\5\u0346\u01a4\2\u145b\u145d")
        buf.write("\3\2\2\2\u145c\u1457\3\2\2\2\u145c\u145d\3\2\2\2\u145d")
        buf.write("\u1460\3\2\2\2\u145e\u145f\7\u0153\2\2\u145f\u1461\7\u0157")
        buf.write("\2\2\u1460\u145e\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1462")
        buf.write("\3\2\2\2\u1462\u1463\7\u0293\2\2\u1463\u021d\3\2\2\2\u1464")
        buf.write("\u1465\7m\2\2\u1465\u1471\5\u03fc\u01ff\2\u1466\u1467")
        buf.write("\7\u0287\2\2\u1467\u146c\5\u0220\u0111\2\u1468\u1469\7")
        buf.write("\u028d\2\2\u1469\u146b\5\u0220\u0111\2\u146a\u1468\3\2")
        buf.write("\2\2\u146b\u146e\3\2\2\2\u146c\u146a\3\2\2\2\u146c\u146d")
        buf.write("\3\2\2\2\u146d\u146f\3\2\2\2\u146e\u146c\3\2\2\2\u146f")
        buf.write("\u1470\7\u0288\2\2\u1470\u1472\3\2\2\2\u1471\u1466\3\2")
        buf.write("\2\2\u1471\u1472\3\2\2\2\u1472\u1475\3\2\2\2\u1473\u1474")
        buf.write("\7\u01b2\2\2\u1474\u1476\5\u041a\u020e\2\u1475\u1473\3")
        buf.write("\2\2\2\u1475\u1476\3\2\2\2\u1476\u1479\3\2\2\2\u1477\u1478")
        buf.write("\7\u00f7\2\2\u1478\u147a\5\u028c\u0147\2\u1479\u1477\3")
        buf.write("\2\2\2\u1479\u147a\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147c")
        buf.write("\7\u0293\2\2\u147c\u021f\3\2\2\2\u147d\u1482\5\u03de\u01f0")
        buf.write("\2\u147e\u1480\7\u00db\2\2\u147f\u147e\3\2\2\2\u147f\u1480")
        buf.write("\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1483\5\u041a\u020e")
        buf.write("\2\u1482\u147f\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1485")
        buf.write("\3\2\2\2\u1484\u1486\5\u0216\u010c\2\u1485\u1484\3\2\2")
        buf.write("\2\u1485\u1486\3\2\2\2\u1486\u0221\3\2\2\2\u1487\u1488")
        buf.write("\5\u03f0\u01f9\2\u1488\u1489\7\u00a6\2\2\u1489\u148a\7")
        buf.write("\u0293\2\2\u148a\u0223\3\2\2\2\u148b\u14aa\7\u018a\2\2")
        buf.write("\u148c\u14ab\7\u01d3\2\2\u148d\u14ab\7\37\2\2\u148e\u148f")
        buf.write("\7\u00a7\2\2\u148f\u1490\7\u0287\2\2\u1490\u1491\5\u03f0")
        buf.write("\u01f9\2\u1491\u1492\7\u028d\2\2\u1492\u1493\5\u042c\u0217")
        buf.write("\2\u1493\u1494\7\u0288\2\2\u1494\u14ab\3\2\2\2\u1495\u1496")
        buf.write("\7\u00e9\2\2\u1496\u1497\7\u0287\2\2\u1497\u1498\5\u0430")
        buf.write("\u0219\2\u1498\u1499\7\u028d\2\2\u1499\u149a\5\u0346\u01a4")
        buf.write("\2\u149a\u149b\7\u0288\2\2\u149b\u14ab\3\2\2\2\u149c\u149d")
        buf.write("\7\u01ae\2\2\u149d\u14a0\7\u0287\2\2\u149e\u14a1\5\u0430")
        buf.write("\u0219\2\u149f\u14a1\7\u0082\2\2\u14a0\u149e\3\2\2\2\u14a0")
        buf.write("\u149f\3\2\2\2\u14a1\u14a4\3\2\2\2\u14a2\u14a3\7\u028d")
        buf.write("\2\2\u14a3\u14a5\5\u0430\u0219\2\u14a4\u14a2\3\2\2\2\u14a5")
        buf.write("\u14a6\3\2\2\2\u14a6\u14a4\3\2\2\2\u14a6\u14a7\3\2\2\2")
        buf.write("\u14a7\u14a8\3\2\2\2\u14a8\u14a9\7\u0288\2\2\u14a9\u14ab")
        buf.write("\3\2\2\2\u14aa\u148c\3\2\2\2\u14aa\u148d\3\2\2\2\u14aa")
        buf.write("\u148e\3\2\2\2\u14aa\u1495\3\2\2\2\u14aa\u149c\3\2\2\2")
        buf.write("\u14ab\u14ac\3\2\2\2\u14ac\u14ad\7\u0293\2\2\u14ad\u0225")
        buf.write("\3\2\2\2\u14ae\u14b1\5\u0228\u0115\2\u14af\u14b1\5\u022c")
        buf.write("\u0117\2\u14b0\u14ae\3\2\2\2\u14b0\u14af\3\2\2\2\u14b1")
        buf.write("\u0227\3\2\2\2\u14b2\u14b3\7\u021c\2\2\u14b3\u14b4\5\u03ec")
        buf.write("\u01f7\2\u14b4\u14c7\7\u00f7\2\2\u14b5\u14b6\7\u019d\2")
        buf.write("\2\u14b6\u14b7\7\u0287\2\2\u14b7\u14bc\5\u022a\u0116\2")
        buf.write("\u14b8\u14b9\7\u028d\2\2\u14b9\u14bb\5\u022a\u0116\2\u14ba")
        buf.write("\u14b8\3\2\2\2\u14bb\u14be\3\2\2\2\u14bc\u14ba\3\2\2\2")
        buf.write("\u14bc\u14bd\3\2\2\2\u14bd\u14bf\3\2\2\2\u14be\u14bc\3")
        buf.write("\2\2\2\u14bf\u14c0\7\u0288\2\2\u14c0\u14c8\3\2\2\2\u14c1")
        buf.write("\u14c2\7\u01a1\2\2\u14c2\u14c5\7m\2\2\u14c3\u14c4\7\u01b2")
        buf.write("\2\2\u14c4\u14c6\5\u041a\u020e\2\u14c5\u14c3\3\2\2\2\u14c5")
        buf.write("\u14c6\3\2\2\2\u14c6\u14c8\3\2\2\2\u14c7\u14b5\3\2\2\2")
        buf.write("\u14c7\u14c1\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14ca\7")
        buf.write("\u0293\2\2\u14ca\u0229\3\2\2\2\u14cb\u14cd\5\u0404\u0203")
        buf.write("\2\u14cc\u14ce\5\u041a\u020e\2\u14cd\u14cc\3\2\2\2\u14cd")
        buf.write("\u14ce\3\2\2\2\u14ce\u14d1\3\2\2\2\u14cf\u14d0\7\u0153")
        buf.write("\2\2\u14d0\u14d2\7\u0157\2\2\u14d1\u14cf\3\2\2\2\u14d1")
        buf.write("\u14d2\3\2\2\2\u14d2\u14d4\3\2\2\2\u14d3\u14d5\5\u0216")
        buf.write("\u010c\2\u14d4\u14d3\3\2\2\2\u14d4\u14d5\3\2\2\2\u14d5")
        buf.write("\u022b\3\2\2\2\u14d6\u14d7\5\u03fe\u0200\2\u14d7\u14d8")
        buf.write("\5\u03ec\u01f7\2\u14d8\u14d9\t;\2\2\u14d9\u14da\7\u0293")
        buf.write("\2\2\u14da\u022d\3\2\2\2\u14db\u14de\5\u0230\u0119\2\u14dc")
        buf.write("\u14de\5\u0236\u011c\2\u14dd\u14db\3\2\2\2\u14dd\u14dc")
        buf.write("\3\2\2\2\u14de\u14df\3\2\2\2\u14df\u14e0\7\u0293\2\2\u14e0")
        buf.write("\u022f\3\2\2\2\u14e1\u14e2\7\u021c\2\2\u14e2\u14e3\5\u03ec")
        buf.write("\u01f7\2\u14e3\u14ef\7\u00f7\2\2\u14e4\u14e5\7\u01ff\2")
        buf.write("\2\u14e5\u14e6\7\u015e\2\2\u14e6\u14e8\5\u041a\u020e\2")
        buf.write("\u14e7\u14e9\5\u0232\u011a\2\u14e8\u14e7\3\2\2\2\u14e8")
        buf.write("\u14e9\3\2\2\2\u14e9\u14ec\3\2\2\2\u14ea\u14eb\7\u0153")
        buf.write("\2\2\u14eb\u14ed\7\u0157\2\2\u14ec\u14ea\3\2\2\2\u14ec")
        buf.write("\u14ed\3\2\2\2\u14ed\u14f0\3\2\2\2\u14ee\u14f0\5\u0234")
        buf.write("\u011b\2\u14ef\u14e4\3\2\2\2\u14ef\u14ee\3\2\2\2\u14f0")
        buf.write("\u0231\3\2\2\2\u14f1\u14f4\7\u00e1\2\2\u14f2\u14f4\7\u00e0")
        buf.write("\2\2\u14f3\u14f1\3\2\2\2\u14f3\u14f2\3\2\2\2\u14f4\u14f5")
        buf.write("\3\2\2\2\u14f5\u14f6\7\65\2\2\u14f6\u14f7\5\u041a\u020e")
        buf.write("\2\u14f7\u0233\3\2\2\2\u14f8\u14fc\7\u0233\2\2\u14f9\u14fa")
        buf.write("\7\u0235\2\2\u14fa\u14fc\7\25\2\2\u14fb\u14f8\3\2\2\2")
        buf.write("\u14fb\u14f9\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14fe\7")
        buf.write("\u0287\2\2\u14fe\u14ff\5\u0346\u01a4\2\u14ff\u1500\7\u0288")
        buf.write("\2\2\u1500\u1501\7\u015e\2\2\u1501\u1504\5\u041a\u020e")
        buf.write("\2\u1502\u1503\7\u0153\2\2\u1503\u1505\7\u0157\2\2\u1504")
        buf.write("\u1502\3\2\2\2\u1504\u1505\3\2\2\2\u1505\u0235\3\2\2\2")
        buf.write("\u1506\u1507\5\u03d4\u01eb\2\u1507\u1508\5\u041a\u020e")
        buf.write("\2\u1508\u0237\3\2\2\2\u1509\u150a\5\u023c\u011f\2\u150a")
        buf.write("\u150b\t<\2\2\u150b\u150e\3\2\2\2\u150c\u150e\5\u023a")
        buf.write("\u011e\2\u150d\u1509\3\2\2\2\u150d\u150c\3\2\2\2\u150e")
        buf.write("\u150f\3\2\2\2\u150f\u150d\3\2\2\2\u150f\u1510\3\2\2\2")
        buf.write("\u1510\u0239\3\2\2\2\u1511\u1512\7\u0295\2\2\u1512\u1513")
        buf.write("\7\u0295\2\2\u1513\u1514\5\u03ea\u01f6\2\u1514\u1515\7")
        buf.write("\u029b\2\2\u1515\u1516\7\u029b\2\2\u1516\u023b\3\2\2\2")
        buf.write("\u1517\u1518\7e\2\2\u1518\u1532\5\2\2\2\u1519\u151a\7")
        buf.write("\16\2\2\u151a\u1532\5\2\2\2\u151b\u151d\7\u00cc\2\2\u151c")
        buf.write("\u151e\7\13\2\2\u151d\u151c\3\2\2\2\u151d\u151e\3\2\2")
        buf.write("\2\u151e\u151f\3\2\2\2\u151f\u1532\5\2\2\2\u1520\u1521")
        buf.write("\7\u021a\2\2\u1521\u1532\5\2\2\2\u1522\u1532\5\u0262\u0132")
        buf.write("\2\u1523\u1532\5\u0268\u0135\2\u1524\u1532\5\u023e\u0120")
        buf.write("\2\u1525\u1532\5\u0240\u0121\2\u1526\u1532\5\u0242\u0122")
        buf.write("\2\u1527\u1532\5\u0244\u0123\2\u1528\u1532\5\u0246\u0124")
        buf.write("\2\u1529\u1532\5\u024c\u0127\2\u152a\u1532\5\u0250\u0129")
        buf.write("\2\u152b\u1532\5\u025a\u012e\2\u152c\u1532\5\u025c\u012f")
        buf.write("\2\u152d\u1532\5\u025e\u0130\2\u152e\u1532\5\u036a\u01b6")
        buf.write("\2\u152f\u1532\5\u026a\u0136\2\u1530\u1532\5\u0260\u0131")
        buf.write("\2\u1531\u1517\3\2\2\2\u1531\u1519\3\2\2\2\u1531\u151b")
        buf.write("\3\2\2\2\u1531\u1520\3\2\2\2\u1531\u1522\3\2\2\2\u1531")
        buf.write("\u1523\3\2\2\2\u1531\u1524\3\2\2\2\u1531\u1525\3\2\2\2")
        buf.write("\u1531\u1526\3\2\2\2\u1531\u1527\3\2\2\2\u1531\u1528\3")
        buf.write("\2\2\2\u1531\u1529\3\2\2\2\u1531\u152a\3\2\2\2\u1531\u152b")
        buf.write("\3\2\2\2\u1531\u152c\3\2\2\2\u1531\u152d\3\2\2\2\u1531")
        buf.write("\u152e\3\2\2\2\u1531\u152f\3\2\2\2\u1531\u1530\3\2\2\2")
        buf.write("\u1532\u023d\3\2\2\2\u1533\u1536\5\u0424\u0213\2\u1534")
        buf.write("\u1536\5\u0422\u0212\2\u1535\u1533\3\2\2\2\u1535\u1534")
        buf.write("\3\2\2\2\u1536\u1537\3\2\2\2\u1537\u1538\7\u0290\2\2\u1538")
        buf.write("\u1539\5\u0346\u01a4\2\u1539\u023f\3\2\2\2\u153a\u153c")
        buf.write("\7_\2\2\u153b\u153d\5\u03ea\u01f6\2\u153c\u153b\3\2\2")
        buf.write("\2\u153c\u153d\3\2\2\2\u153d\u1540\3\2\2\2\u153e\u153f")
        buf.write("\7\u023f\2\2\u153f\u1541\5\u0344\u01a3\2\u1540\u153e\3")
        buf.write("\2\2\2\u1540\u1541\3\2\2\2\u1541\u0241\3\2\2\2\u1542\u1544")
        buf.write("\7\u00ad\2\2\u1543\u1545\5\u03ea\u01f6\2\u1544\u1543\3")
        buf.write("\2\2\2\u1544\u1545\3\2\2\2\u1545\u1548\3\2\2\2\u1546\u1547")
        buf.write("\7\u023f\2\2\u1547\u1549\5\u0344\u01a3\2\u1548\u1546\3")
        buf.write("\2\2\2\u1548\u1549\3\2\2\2\u1549\u0243\3\2\2\2\u154a\u154b")
        buf.write("\7\u00cb\2\2\u154b\u154c\5\u03ea\u01f6\2\u154c\u0245\3")
        buf.write("\2\2\2\u154d\u154e\7\u00d7\2\2\u154e\u154f\5\u0344\u01a3")
        buf.write("\2\u154f\u1550\7\u0206\2\2\u1550\u1554\5\u0238\u011d\2")
        buf.write("\u1551\u1553\5\u0248\u0125\2\u1552\u1551\3\2\2\2\u1553")
        buf.write("\u1556\3\2\2\2\u1554\u1552\3\2\2\2\u1554\u1555\3\2\2\2")
        buf.write("\u1555\u1558\3\2\2\2\u1556\u1554\3\2\2\2\u1557\u1559\5")
        buf.write("\u024a\u0126\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2")
        buf.write("\u1559\u155a\3\2\2\2\u155a\u155b\7\u009e\2\2\u155b\u155c")
        buf.write("\7\u00d7\2\2\u155c\u0247\3\2\2\2\u155d\u155e\7\u0099\2")
        buf.write("\2\u155e\u155f\5\u0344\u01a3\2\u155f\u1560\7\u0206\2\2")
        buf.write("\u1560\u1561\5\u0238\u011d\2\u1561\u0249\3\2\2\2\u1562")
        buf.write("\u1563\7\u0098\2\2\u1563\u1564\5\u0238\u011d\2\u1564\u024b")
        buf.write("\3\2\2\2\u1565\u1567\5\u03ea\u01f6\2\u1566\u1565\3\2\2")
        buf.write("\2\u1566\u1567\3\2\2\2\u1567\u156c\3\2\2\2\u1568\u1569")
        buf.write("\7\u0242\2\2\u1569\u156d\5\u0344\u01a3\2\u156a\u156b\7")
        buf.write("\u00bf\2\2\u156b\u156d\5\u024e\u0128\2\u156c\u1568\3\2")
        buf.write("\2\2\u156c\u156a\3\2\2\2\u156c\u156d\3\2\2\2\u156d\u156e")
        buf.write("\3\2\2\2\u156e\u156f\7\u011a\2\2\u156f\u1570\5\u0238\u011d")
        buf.write("\2\u1570\u1571\7\u009e\2\2\u1571\u1573\7\u011a\2\2\u1572")
        buf.write("\u1574\5\u03ea\u01f6\2\u1573\u1572\3\2\2\2\u1573\u1574")
        buf.write("\3\2\2\2\u1574\u024d\3\2\2\2\u1575\u1576\5\u03fa\u01fe")
        buf.write("\2\u1576\u1578\7\u00db\2\2\u1577\u1579\7\u01b5\2\2\u1578")
        buf.write("\u1577\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157a\3\2\2\2")
        buf.write("\u157a\u157b\5\u0256\u012c\2\u157b\u157c\7\3\2\2\u157c")
        buf.write("\u157d\5\u0258\u012d\2\u157d\u158b\3\2\2\2\u157e\u157f")
        buf.write("\5\u03fe\u0200\2\u157f\u1588\7\u00db\2\2\u1580\u1582\5")
        buf.write("\u03fc\u01ff\2\u1581\u1583\5\u0342\u01a2\2\u1582\u1581")
        buf.write("\3\2\2\2\u1582\u1583\3\2\2\2\u1583\u1589\3\2\2\2\u1584")
        buf.write("\u1585\7\u0287\2\2\u1585\u1586\5\u028c\u0147\2\u1586\u1587")
        buf.write("\7\u0288\2\2\u1587\u1589\3\2\2\2\u1588\u1580\3\2\2\2\u1588")
        buf.write("\u1584\3\2\2\2\u1589\u158b\3\2\2\2\u158a\u1575\3\2\2\2")
        buf.write("\u158a\u157e\3\2\2\2\u158b\u024f\3\2\2\2\u158c\u158d\7")
        buf.write("\u00c0\2\2\u158d\u158e\5\u03fa\u01fe\2\u158e\u158f\7\u00db")
        buf.write("\2\2\u158f\u1590\5\u0252\u012a\2\u1590\u1593\5\u026a\u0136")
        buf.write("\2\u1591\u1592\7\u01c3\2\2\u1592\u1594\7\u00a8\2\2\u1593")
        buf.write("\u1591\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u0251\3\2\2\2")
        buf.write("\u1595\u1596\5\u0256\u012c\2\u1596\u1597\7\3\2\2\u1597")
        buf.write("\u1598\5\u0258\u012d\2\u1598\u15a3\3\2\2\2\u1599\u159a")
        buf.write("\7\u00e4\2\2\u159a\u159b\7\u015e\2\2\u159b\u159d\5\u0400")
        buf.write("\u0201\2\u159c\u159e\5\u0254\u012b\2\u159d\u159c\3\2\2")
        buf.write("\2\u159d\u159e\3\2\2\2\u159e\u15a3\3\2\2\2\u159f\u15a0")
        buf.write("\7\u022f\2\2\u15a0\u15a1\7\u015e\2\2\u15a1\u15a3\5\u03fa")
        buf.write("\u01fe\2\u15a2\u1595\3\2\2\2\u15a2\u1599\3\2\2\2\u15a2")
        buf.write("\u159f\3\2\2\2\u15a3\u0253\3\2\2\2\u15a4\u15a5\7%\2\2")
        buf.write("\u15a5\u15a6\5\u0256\u012c\2\u15a6\u15a7\7\21\2\2\u15a7")
        buf.write("\u15a8\5\u0258\u012d\2\u15a8\u0255\3\2\2\2\u15a9\u15aa")
        buf.write("\5\u0356\u01ac\2\u15aa\u0257\3\2\2\2\u15ab\u15ac\5\u0356")
        buf.write("\u01ac\2\u15ac\u0259\3\2\2\2\u15ad\u15ae\7\u0157\2\2\u15ae")
        buf.write("\u025b\3\2\2\2\u15af\u15b1\7\u0196\2\2\u15b0\u15b2\5\u03f0")
        buf.write("\u01f9\2\u15b1\u15b0\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2")
        buf.write("\u025d\3\2\2\2\u15b3\u15b5\7\u01b2\2\2\u15b4\u15b6\5\u0344")
        buf.write("\u01a3\2\u15b5\u15b4\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6")
        buf.write("\u025f\3\2\2\2\u15b7\u15b9\79\2\2\u15b8\u15b7\3\2\2\2")
        buf.write("\u15b8\u15b9\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bc\5")
        buf.write("\u03d8\u01ed\2\u15bb\u15bd\5\u0410\u0209\2\u15bc\u15bb")
        buf.write("\3\2\2\2\u15bc\u15bd\3\2\2\2\u15bd\u0261\3\2\2\2\u15be")
        buf.write("\u15bf\7$\2\2\u15bf\u15c6\5\u0238\u011d\2\u15c0\u15c2")
        buf.write("\7\u00a6\2\2\u15c1\u15c3\5\u0264\u0133\2\u15c2\u15c1\3")
        buf.write("\2\2\2\u15c3\u15c4\3\2\2\2\u15c4\u15c2\3\2\2\2\u15c4\u15c5")
        buf.write("\3\2\2\2\u15c5\u15c7\3\2\2\2\u15c6\u15c0\3\2\2\2\u15c6")
        buf.write("\u15c7\3\2\2\2\u15c7\u15c8\3\2\2\2\u15c8\u15ca\7\u009e")
        buf.write("\2\2\u15c9\u15cb\5\u03ea\u01f6\2\u15ca\u15c9\3\2\2\2\u15ca")
        buf.write("\u15cb\3\2\2\2\u15cb\u0263\3\2\2\2\u15cc\u15cd\7\u023f")
        buf.write("\2\2\u15cd\u15d2\5\u03f0\u01f9\2\u15ce\u15cf\7\u0169\2")
        buf.write("\2\u15cf\u15d1\5\u03f0\u01f9\2\u15d0\u15ce\3\2\2\2\u15d1")
        buf.write("\u15d4\3\2\2\2\u15d2\u15d0\3\2\2\2\u15d2\u15d3\3\2\2\2")
        buf.write("\u15d3\u15d5\3\2\2\2\u15d4\u15d2\3\2\2\2\u15d5\u15d6\7")
        buf.write("\u0206\2\2\u15d6\u15d7\5\u0238\u011d\2\u15d7\u0265\3\2")
        buf.write("\2\2\u15d8\u15da\7|\2\2\u15d9\u15d8\3\2\2\2\u15d9\u15da")
        buf.write("\3\2\2\2\u15da\u15dc\3\2\2\2\u15db\u15dd\5\u0218\u010d")
        buf.write("\2\u15dc\u15db\3\2\2\2\u15dd\u15de\3\2\2\2\u15de\u15dc")
        buf.write("\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e1\3\2\2\2\u15e0")
        buf.write("\u15d9\3\2\2\2\u15e0\u15e1\3\2\2\2\u15e1\u15e2\3\2\2\2")
        buf.write("\u15e2\u15e3\5\u0262\u0132\2\u15e3\u0267\3\2\2\2\u15e4")
        buf.write("\u15e6\7|\2\2\u15e5\u15e4\3\2\2\2\u15e5\u15e6\3\2\2\2")
        buf.write("\u15e6\u15e8\3\2\2\2\u15e7\u15e9\5\u0218\u010d\2\u15e8")
        buf.write("\u15e7\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15e8\3\2\2\2")
        buf.write("\u15ea\u15eb\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15ed\5")
        buf.write("\u0262\u0132\2\u15ed\u0269\3\2\2\2\u15ee\u15f3\5\u026c")
        buf.write("\u0137\2\u15ef\u15f3\5\u0270\u0139\2\u15f0\u15f3\5\u0272")
        buf.write("\u013a\2\u15f1\u15f3\5\u027c\u013f\2\u15f2\u15ee\3\2\2")
        buf.write("\2\u15f2\u15ef\3\2\2\2\u15f2\u15f0\3\2\2\2\u15f2\u15f1")
        buf.write("\3\2\2\2\u15f3\u026b\3\2\2\2\u15f4\u15f5\7\u00ab\2\2\u15f5")
        buf.write("\u15f6\7\u00da\2\2\u15f6\u1600\5\u0346\u01a4\2\u15f7\u15f9")
        buf.write("\5\u03c8\u01e5\2\u15f8\u15fa\5\u0390\u01c9\2\u15f9\u15f8")
        buf.write("\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u1601\3\2\2\2\u15fb")
        buf.write("\u15fd\5\u0390\u01c9\2\u15fc\u15fe\5\u026e\u0138\2\u15fd")
        buf.write("\u15fc\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u1601\3\2\2\2")
        buf.write("\u15ff\u1601\5\u026e\u0138\2\u1600\u15f7\3\2\2\2\u1600")
        buf.write("\u15fb\3\2\2\2\u1600\u15ff\3\2\2\2\u1600\u1601\3\2\2\2")
        buf.write("\u1601\u026d\3\2\2\2\u1602\u1603\t=\2\2\u1603\u1604\5")
        buf.write("\u03c8\u01e5\2\u1604\u026f\3\2\2\2\u1605\u160d\5\u0318")
        buf.write("\u018d\2\u1606\u160d\5\u0324\u0193\2\u1607\u160d\5\u028c")
        buf.write("\u0147\2\u1608\u160d\5\u02fe\u0180\2\u1609\u160d\5\u0304")
        buf.write("\u0183\2\u160a\u160d\5\u0306\u0184\2\u160b\u160d\5\u028a")
        buf.write("\u0146\2\u160c\u1605\3\2\2\2\u160c\u1606\3\2\2\2\u160c")
        buf.write("\u1607\3\2\2\2\u160c\u1608\3\2\2\2\u160c\u1609\3\2\2\2")
        buf.write("\u160c\u160a\3\2\2\2\u160c\u160b\3\2\2\2\u160d\u0271\3")
        buf.write("\2\2\2\u160e\u1613\5\u0274\u013b\2\u160f\u1613\5\u0276")
        buf.write("\u013c\2\u1610\u1613\5\u0278\u013d\2\u1611\u1613\5\u027a")
        buf.write("\u013e\2\u1612\u160e\3\2\2\2\u1612\u160f\3\2\2\2\u1612")
        buf.write("\u1610\3\2\2\2\u1612\u1611\3\2\2\2\u1613\u0273\3\2\2\2")
        buf.write("\u1614\u1615\7F\2\2\u1615\u1616\5\u03fc\u01ff\2\u1616")
        buf.write("\u0275\3\2\2\2\u1617\u1618\7\u0166\2\2\u1618\u161a\5\u03fc")
        buf.write("\u01ff\2\u1619\u161b\5\u0342\u01a2\2\u161a\u1619\3\2\2")
        buf.write("\2\u161a\u161b\3\2\2\2\u161b\u0277\3\2\2\2\u161c\u161d")
        buf.write("\7\u00b5\2\2\u161d\u1632\5\u03fc\u01ff\2\u161e\u161f\7")
        buf.write("\u00f4\2\2\u161f\u1624\5\u03f8\u01fd\2\u1620\u1621\7\u028d")
        buf.write("\2\2\u1621\u1623\5\u03f8\u01fd\2\u1622\u1620\3\2\2\2\u1623")
        buf.write("\u1626\3\2\2\2\u1624\u1622\3\2\2\2\u1624\u1625\3\2\2\2")
        buf.write("\u1625\u1633\3\2\2\2\u1626\u1624\3\2\2\2\u1627\u1628\7")
        buf.write("\64\2\2\u1628\u1629\7I\2\2\u1629\u162a\7\u00f4\2\2\u162a")
        buf.write("\u162f\5\u03f8\u01fd\2\u162b\u162c\7\u028d\2\2\u162c\u162e")
        buf.write("\5\u03f8\u01fd\2\u162d\u162b\3\2\2\2\u162e\u1631\3\2\2")
        buf.write("\2\u162f\u162d\3\2\2\2\u162f\u1630\3\2\2\2\u1630\u1633")
        buf.write("\3\2\2\2\u1631\u162f\3\2\2\2\u1632\u161e\3\2\2\2\u1632")
        buf.write("\u1627\3\2\2\2\u1633\u0279\3\2\2\2\u1634\u1635\7\u0166")
        buf.write("\2\2\u1635\u1636\5\u03f8\u01fd\2\u1636\u1639\7\u00bf\2")
        buf.write("\2\u1637\u163a\5\u028c\u0147\2\u1638\u163a\5\u0346\u01a4")
        buf.write("\2\u1639\u1637\3\2\2\2\u1639\u1638\3\2\2\2\u163a\u163c")
        buf.write("\3\2\2\2\u163b\u163d\5\u0390\u01c9\2\u163c\u163b\3\2\2")
        buf.write("\2\u163c\u163d\3\2\2\2\u163d\u027b\3\2\2\2\u163e\u1644")
        buf.write("\5\u027e\u0140\2\u163f\u1644\5\u0280\u0141\2\u1640\u1644")
        buf.write("\5\u0282\u0142\2\u1641\u1644\5\u0286\u0144\2\u1642\u1644")
        buf.write("\5\u0288\u0145\2\u1643\u163e\3\2\2\2\u1643\u163f\3\2\2")
        buf.write("\2\u1643\u1640\3\2\2\2\u1643\u1641\3\2\2\2\u1643\u1642")
        buf.write("\3\2\2\2\u1644\u027d\3\2\2\2\u1645\u1646\7\u01d6\2\2\u1646")
        buf.write("\u1654\7\u0214\2\2\u1647\u1648\7\u0199\2\2\u1648\u1655")
        buf.write("\t>\2\2\u1649\u164a\7\u00f8\2\2\u164a\u164e\7\u0105\2")
        buf.write("\2\u164b\u164f\7\u01d2\2\2\u164c\u164d\7\u0199\2\2\u164d")
        buf.write("\u164f\7O\2\2\u164e\u164b\3\2\2\2\u164e\u164c\3\2\2\2")
        buf.write("\u164f\u1655\3\2\2\2\u1650\u1651\7\u022b\2\2\u1651\u1652")
        buf.write("\7\u01ba\2\2\u1652\u1653\7\u01cd\2\2\u1653\u1655\5\u03d2")
        buf.write("\u01ea\2\u1654\u1647\3\2\2\2\u1654\u1649\3\2\2\2\u1654")
        buf.write("\u1650\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1658\3\2\2\2")
        buf.write("\u1656\u1657\7\u0133\2\2\u1657\u1659\5\u042e\u0218\2\u1658")
        buf.write("\u1656\3\2\2\2\u1658\u1659\3\2\2\2\u1659\u027f\3\2\2\2")
        buf.write("\u165a\u165b\7\u01d6\2\2\u165b\u1665\t?\2\2\u165c\u1666")
        buf.write("\7\13\2\2\u165d\u1662\5\u03e8\u01f5\2\u165e\u165f\7\u028d")
        buf.write("\2\2\u165f\u1661\5\u03e8\u01f5\2\u1660\u165e\3\2\2\2\u1661")
        buf.write("\u1664\3\2\2\2\u1662\u1660\3\2\2\2\u1662\u1663\3\2\2\2")
        buf.write("\u1663\u1666\3\2\2\2\u1664\u1662\3\2\2\2\u1665\u165c\3")
        buf.write("\2\2\2\u1665\u165d\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u1668")
        buf.write("\t\13\2\2\u1668\u0281\3\2\2\2\u1669\u166b\7N\2\2\u166a")
        buf.write("\u166c\7\u0246\2\2\u166b\u166a\3\2\2\2\u166b\u166c\3\2")
        buf.write("\2\2\u166c\u167a\3\2\2\2\u166d\u166e\7M\2\2\u166e\u167b")
        buf.write("\5\u0346\u01a4\2\u166f\u1678\7\u00c1\2\2\u1670\u1671\7")
        buf.write("a\2\2\u1671\u1679\5\u0346\u01a4\2\u1672\u1679\7b\2\2\u1673")
        buf.write("\u1676\5\u0346\u01a4\2\u1674\u1675\7\u028d\2\2\u1675\u1677")
        buf.write("\5\u0346\u01a4\2\u1676\u1674\3\2\2\2\u1676\u1677\3\2\2")
        buf.write("\2\u1677\u1679\3\2\2\2\u1678\u1670\3\2\2\2\u1678\u1672")
        buf.write("\3\2\2\2\u1678\u1673\3\2\2\2\u1679\u167b\3\2\2\2\u167a")
        buf.write("\u166d\3\2\2\2\u167a\u166f\3\2\2\2\u167a\u167b\3\2\2\2")
        buf.write("\u167b\u167d\3\2\2\2\u167c\u167e\5\u0284\u0143\2\u167d")
        buf.write("\u167c\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u0283\3\2\2\2")
        buf.write("\u167f\u1681\7\u0247\2\2\u1680\u1682\t@\2\2\u1681\u1680")
        buf.write("\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1684\3\2\2\2\u1683")
        buf.write("\u1685\tA\2\2\u1684\u1683\3\2\2\2\u1684\u1685\3\2\2\2")
        buf.write("\u1685\u0285\3\2\2\2\u1686\u1688\7\u01ba\2\2\u1687\u1689")
        buf.write("\7\u0246\2\2\u1688\u1687\3\2\2\2\u1688\u1689\3\2\2\2\u1689")
        buf.write("\u1691\3\2\2\2\u168a\u168c\7\u0210\2\2\u168b\u168d\7\u01c4")
        buf.write("\2\2\u168c\u168b\3\2\2\2\u168c\u168d\3\2\2\2\u168d\u168e")
        buf.write("\3\2\2\2\u168e\u1692\5\u03d0\u01e9\2\u168f\u1690\7\u00c1")
        buf.write("\2\2\u1690\u1692\5\u042e\u0218\2\u1691\u168a\3\2\2\2\u1691")
        buf.write("\u168f\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u0287\3\2\2\2")
        buf.write("\u1693\u1694\7\u01c4\2\2\u1694\u1695\5\u03d0\u01e9\2\u1695")
        buf.write("\u0289\3\2\2\2\u1696\u1697\7\u00ae\2\2\u1697\u169c\7\u0184")
        buf.write("\2\2\u1698\u1699\7\u01d6\2\2\u1699\u169a\7\u01ef\2\2\u169a")
        buf.write("\u169b\7\u029e\2\2\u169b\u169d\5\u042e\u0218\2\u169c\u1698")
        buf.write("\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u16a0\3\2\2\2\u169e")
        buf.write("\u169f\7\u00f4\2\2\u169f\u16a1\5\u0408\u0205\2\u16a0\u169e")
        buf.write("\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1\u16a2\3\2\2\2\u16a2")
        buf.write("\u16a8\7\u00bf\2\2\u16a3\u16a9\5\u028c\u0147\2\u16a4\u16a9")
        buf.write("\5\u02fe\u0180\2\u16a5\u16a9\5\u0304\u0183\2\u16a6\u16a9")
        buf.write("\5\u0306\u0184\2\u16a7\u16a9\5\u0318\u018d\2\u16a8\u16a3")
        buf.write("\3\2\2\2\u16a8\u16a4\3\2\2\2\u16a8\u16a5\3\2\2\2\u16a8")
        buf.write("\u16a6\3\2\2\2\u16a8\u16a7\3\2\2\2\u16a9\u028b\3\2\2\2")
        buf.write("\u16aa\u16ac\5\u028e\u0148\2\u16ab\u16aa\3\2\2\2\u16ab")
        buf.write("\u16ac\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16ae\5\u0296")
        buf.write("\u014c\2\u16ae\u028d\3\2\2\2\u16af\u16b0\7\u0243\2\2\u16b0")
        buf.write("\u16b5\5\u0290\u0149\2\u16b1\u16b2\7\u028d\2\2\u16b2\u16b4")
        buf.write("\5\u0290\u0149\2\u16b3\u16b1\3\2\2\2\u16b4\u16b7\3\2\2")
        buf.write("\2\u16b5\u16b3\3\2\2\2\u16b5\u16b6\3\2\2\2\u16b6\u028f")
        buf.write("\3\2\2\2\u16b7\u16b5\3\2\2\2\u16b8\u16ba\5\u03e6\u01f4")
        buf.write("\2\u16b9\u16bb\5\u00b0Y\2\u16ba\u16b9\3\2\2\2\u16ba\u16bb")
        buf.write("\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc\u16bd\7\26\2\2\u16bd")
        buf.write("\u16be\7\u0287\2\2\u16be\u16c0\5\u0296\u014c\2\u16bf\u16c1")
        buf.write("\5\u02f2\u017a\2\u16c0\u16bf\3\2\2\2\u16c0\u16c1\3\2\2")
        buf.write("\2\u16c1\u16c2\3\2\2\2\u16c2\u16c4\7\u0288\2\2\u16c3\u16c5")
        buf.write("\5\u0292\u014a\2\u16c4\u16c3\3\2\2\2\u16c4\u16c5\3\2\2")
        buf.write("\2\u16c5\u16c7\3\2\2\2\u16c6\u16c8\5\u0294\u014b\2\u16c7")
        buf.write("\u16c6\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u0291\3\2\2\2")
        buf.write("\u16c9\u16ca\7\u01c9\2\2\u16ca\u16cb\tB\2\2\u16cb\u16cc")
        buf.write("\7\u00b8\2\2\u16cc\u16cd\7\65\2\2\u16cd\u16cf\5\u0404")
        buf.write("\u0203\2\u16ce\u16d0\7\27\2\2\u16cf\u16ce\3\2\2\2\u16cf")
        buf.write("\u16d0\3\2\2\2\u16d0\u16d2\3\2\2\2\u16d1\u16d3\7\u008a")
        buf.write("\2\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3\u16d6")
        buf.write("\3\2\2\2\u16d4\u16d5\7\u0158\2\2\u16d5\u16d7\7\u00b8\2")
        buf.write("\2\u16d6\u16d4\3\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u16da")
        buf.write("\3\2\2\2\u16d8\u16d9\7\u0158\2\2\u16d9\u16db\7\u0100\2")
        buf.write("\2\u16da\u16d8\3\2\2\2\u16da\u16db\3\2\2\2\u16db\u16ee")
        buf.write("\3\2\2\2\u16dc\u16dd\7\u028d\2\2\u16dd\u16df\5\u0404\u0203")
        buf.write("\2\u16de\u16e0\7\27\2\2\u16df\u16de\3\2\2\2\u16df\u16e0")
        buf.write("\3\2\2\2\u16e0\u16e2\3\2\2\2\u16e1\u16e3\7\u008a\2\2\u16e2")
        buf.write("\u16e1\3\2\2\2\u16e2\u16e3\3\2\2\2\u16e3\u16e6\3\2\2\2")
        buf.write("\u16e4\u16e5\7\u0158\2\2\u16e5\u16e7\7\u00b8\2\2\u16e6")
        buf.write("\u16e4\3\2\2\2\u16e6\u16e7\3\2\2\2\u16e7\u16ea\3\2\2\2")
        buf.write("\u16e8\u16e9\7\u0158\2\2\u16e9\u16eb\7\u0100\2\2\u16ea")
        buf.write("\u16e8\3\2\2\2\u16ea\u16eb\3\2\2\2\u16eb\u16ed\3\2\2\2")
        buf.write("\u16ec\u16dc\3\2\2\2\u16ed\u16f0\3\2\2\2\u16ee\u16ec\3")
        buf.write("\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u16f1\3\2\2\2\u16f0\u16ee")
        buf.write("\3\2\2\2\u16f1\u16f2\7\u01d6\2\2\u16f2\u16f3\5\u0404\u0203")
        buf.write("\2\u16f3\u0293\3\2\2\2\u16f4\u16f5\7o\2\2\u16f5\u16fa")
        buf.write("\5\u0404\u0203\2\u16f6\u16f7\7\u028d\2\2\u16f7\u16f9\5")
        buf.write("\u0404\u0203\2\u16f8\u16f6\3\2\2\2\u16f9\u16fc\3\2\2\2")
        buf.write("\u16fa\u16f8\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fd\3")
        buf.write("\2\2\2\u16fc\u16fa\3\2\2\2\u16fd\u16fe\7\u01d6\2\2\u16fe")
        buf.write("\u16ff\5\u0404\u0203\2\u16ff\u1700\7\u0210\2\2\u1700\u1701")
        buf.write("\5\u0346\u01a4\2\u1701\u1702\7\u0082\2\2\u1702\u1703\5")
        buf.write("\u0346\u01a4\2\u1703\u0295\3\2\2\2\u1704\u1705\b\u014c")
        buf.write("\1\2\u1705\u1706\7\u0287\2\2\u1706\u1707\5\u0296\u014c")
        buf.write("\2\u1707\u1708\7\u0288\2\2\u1708\u170b\3\2\2\2\u1709\u170b")
        buf.write("\5\u029a\u014e\2\u170a\u1704\3\2\2\2\u170a\u1709\3\2\2")
        buf.write("\2\u170b\u1714\3\2\2\2\u170c\u170d\f\4\2\2\u170d\u170e")
        buf.write("\5\u0298\u014d\2\u170e\u1710\5\u0296\u014c\2\u170f\u1711")
        buf.write("\5\u02f2\u017a\2\u1710\u170f\3\2\2\2\u1710\u1711\3\2\2")
        buf.write("\2\u1711\u1713\3\2\2\2\u1712\u170c\3\2\2\2\u1713\u1716")
        buf.write("\3\2\2\2\u1714\u1712\3\2\2\2\u1714\u1715\3\2\2\2\u1715")
        buf.write("\u0297\3\2\2\2\u1716\u1714\3\2\2\2\u1717\u1719\tC\2\2")
        buf.write("\u1718\u171a\7\13\2\2\u1719\u1718\3\2\2\2\u1719\u171a")
        buf.write("\3\2\2\2\u171a\u0299\3\2\2\2\u171b\u171d\7\u01ce\2\2\u171c")
        buf.write("\u171e\tD\2\2\u171d\u171c\3\2\2\2\u171d\u171e\3\2\2\2")
        buf.write("\u171e\u171f\3\2\2\2\u171f\u1724\5\u029c\u014f\2\u1720")
        buf.write("\u1721\7\u028d\2\2\u1721\u1723\5\u029c\u014f\2\u1722\u1720")
        buf.write("\3\2\2\2\u1723\u1726\3\2\2\2\u1724\u1722\3\2\2\2\u1724")
        buf.write("\u1725\3\2\2\2\u1725\u1728\3\2\2\2\u1726\u1724\3\2\2\2")
        buf.write("\u1727\u1729\5\u03c8\u01e5\2\u1728\u1727\3\2\2\2\u1728")
        buf.write("\u1729\3\2\2\2\u1729\u172b\3\2\2\2\u172a\u172c\5\u029e")
        buf.write("\u0150\2\u172b\u172a\3\2\2\2\u172b\u172c\3\2\2\2\u172c")
        buf.write("\u172e\3\2\2\2\u172d\u172f\5\u03c4\u01e3\2\u172e\u172d")
        buf.write("\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1731\3\2\2\2\u1730")
        buf.write("\u1732\5\u02c4\u0163\2\u1731\u1730\3\2\2\2\u1731\u1732")
        buf.write("\3\2\2\2\u1732\u1737\3\2\2\2\u1733\u1736\5\u02c8\u0165")
        buf.write("\2\u1734\u1736\5\u02d2\u016a\2\u1735\u1733\3\2\2\2\u1735")
        buf.write("\u1734\3\2\2\2\u1736\u1739\3\2\2\2\u1737\u1735\3\2\2\2")
        buf.write("\u1737\u1738\3\2\2\2\u1738\u173b\3\2\2\2\u1739\u1737\3")
        buf.write("\2\2\2\u173a\u173c\5\u02d4\u016b\2\u173b\u173a\3\2\2\2")
        buf.write("\u173b\u173c\3\2\2\2\u173c\u1742\3\2\2\2\u173d\u1741\5")
        buf.write("\u02f6\u017c\2\u173e\u1741\5\u02f2\u017a\2\u173f\u1741")
        buf.write("\5\u02fc\u017f\2\u1740\u173d\3\2\2\2\u1740\u173e\3\2\2")
        buf.write("\2\u1740\u173f\3\2\2\2\u1741\u1744\3\2\2\2\u1742\u1740")
        buf.write("\3\2\2\2\u1742\u1743\3\2\2\2\u1743\u029b\3\2\2\2\u1744")
        buf.write("\u1742\3\2\2\2\u1745\u1750\5\u040c\u0207\2\u1746\u1747")
        buf.write("\5\u040a\u0206\2\u1747\u1748\7\u0280\2\2\u1748\u1749\5")
        buf.write("\u040c\u0207\2\u1749\u1750\3\2\2\2\u174a\u1750\5\u0408")
        buf.write("\u0205\2\u174b\u174d\5\u0346\u01a4\2\u174c\u174e\5\u03be")
        buf.write("\u01e0\2\u174d\u174c\3\2\2\2\u174d\u174e\3\2\2\2\u174e")
        buf.write("\u1750\3\2\2\2\u174f\u1745\3\2\2\2\u174f\u1746\3\2\2\2")
        buf.write("\u174f\u174a\3\2\2\2\u174f\u174b\3\2\2\2\u1750\u029d\3")
        buf.write("\2\2\2\u1751\u1752\7\u00c6\2\2\u1752\u1757\5\u02a2\u0152")
        buf.write("\2\u1753\u1754\7\u028d\2\2\u1754\u1756\5\u02a2\u0152\2")
        buf.write("\u1755\u1753\3\2\2\2\u1756\u1759\3\2\2\2\u1757\u1755\3")
        buf.write("\2\2\2\u1757\u1758\3\2\2\2\u1758\u029f\3\2\2\2\u1759\u1757")
        buf.write("\3\2\2\2\u175a\u175d\5\u02a2\u0152\2\u175b\u175e\5\u02b2")
        buf.write("\u015a\2\u175c\u175e\5\u02be\u0160\2\u175d\u175b\3\2\2")
        buf.write("\2\u175d\u175c\3\2\2\2\u175d\u175e\3\2\2\2\u175e\u02a1")
        buf.write("\3\2\2\2\u175f\u1760\b\u0152\1\2\u1760\u1764\5\u02a4\u0153")
        buf.write("\2\u1761\u1763\5\u02b0\u0159\2\u1762\u1761\3\2\2\2\u1763")
        buf.write("\u1766\3\2\2\2\u1764\u1762\3\2\2\2\u1764\u1765\3\2\2\2")
        buf.write("\u1765\u1772\3\2\2\2\u1766\u1764\3\2\2\2\u1767\u176b\5")
        buf.write("\u02a4\u0153\2\u1768\u176a\5\u02b0\u0159\2\u1769\u1768")
        buf.write("\3\2\2\2\u176a\u176d\3\2\2\2\u176b\u1769\3\2\2\2\u176b")
        buf.write("\u176c\3\2\2\2\u176c\u176f\3\2\2\2\u176d\u176b\3\2\2\2")
        buf.write("\u176e\u1770\5\u03c0\u01e1\2\u176f\u176e\3\2\2\2\u176f")
        buf.write("\u1770\3\2\2\2\u1770\u1772\3\2\2\2\u1771\u175f\3\2\2\2")
        buf.write("\u1771\u1767\3\2\2\2\u1772\u1777\3\2\2\2\u1773\u1774\f")
        buf.write("\5\2\2\u1774\u1776\5\u02a6\u0154\2\u1775\u1773\3\2\2\2")
        buf.write("\u1776\u1779\3\2\2\2\u1777\u1775\3\2\2\2\u1777\u1778\3")
        buf.write("\2\2\2\u1778\u02a3\3\2\2\2\u1779\u1777\3\2\2\2\u177a\u177d")
        buf.write("\5\u0336\u019c\2\u177b\u177e\5\u02b2\u015a\2\u177c\u177e")
        buf.write("\5\u02be\u0160\2\u177d\u177b\3\2\2\2\u177d\u177c\3\2\2")
        buf.write("\2\u177d\u177e\3\2\2\2\u177e\u1785\3\2\2\2\u177f\u1780")
        buf.write("\7\u0165\2\2\u1780\u1781\7\u0287\2\2\u1781\u1782\5\u0336")
        buf.write("\u019c\2\u1782\u1783\7\u0288\2\2\u1783\u1785\3\2\2\2\u1784")
        buf.write("\u177a\3\2\2\2\u1784\u177f\3\2\2\2\u1785\u02a5\3\2\2\2")
        buf.write("\u1786\u1788\5\u02ae\u0158\2\u1787\u1786\3\2\2\2\u1787")
        buf.write("\u1788\3\2\2\2\u1788\u178a\3\2\2\2\u1789\u178b\5\u02ac")
        buf.write("\u0157\2\u178a\u1789\3\2\2\2\u178a\u178b\3\2\2\2\u178b")
        buf.write("\u178c\3\2\2\2\u178c\u178d\7\u00fb\2\2\u178d\u178f\5\u02a2")
        buf.write("\u0152\2\u178e\u1790\5\u02ae\u0158\2\u178f\u178e\3\2\2")
        buf.write("\2\u178f\u1790\3\2\2\2\u1790\u1793\3\2\2\2\u1791\u1794")
        buf.write("\5\u02a8\u0155\2\u1792\u1794\5\u02aa\u0156\2\u1793\u1791")
        buf.write("\3\2\2\2\u1793\u1792\3\2\2\2\u1793\u1794\3\2\2\2\u1794")
        buf.write("\u02a7\3\2\2\2\u1795\u1796\7\u0164\2\2\u1796\u1797\5\u0344")
        buf.write("\u01a3\2\u1797\u02a9\3\2\2\2\u1798\u1799\7\u022c\2\2\u1799")
        buf.write("\u179a\7\u0287\2\2\u179a\u179f\5\u0404\u0203\2\u179b\u179c")
        buf.write("\7\u028d\2\2\u179c\u179e\5\u0404\u0203\2\u179d\u179b\3")
        buf.write("\2\2\2\u179e\u17a1\3\2\2\2\u179f\u179d\3\2\2\2\u179f\u17a0")
        buf.write("\3\2\2\2\u17a0\u17a2\3\2\2\2\u17a1\u179f\3\2\2\2\u17a2")
        buf.write("\u17a3\7\u0288\2\2\u17a3\u02ab\3\2\2\2\u17a4\u17b0\7i")
        buf.write("\2\2\u17a5\u17a7\7\u0135\2\2\u17a6\u17a5\3\2\2\2\u17a6")
        buf.write("\u17a7\3\2\2\2\u17a7\u17ad\3\2\2\2\u17a8\u17ae\7\u00ea")
        buf.write("\2\2\u17a9\u17ab\tE\2\2\u17aa\u17ac\7\u016f\2\2\u17ab")
        buf.write("\u17aa\3\2\2\2\u17ab\u17ac\3\2\2\2\u17ac\u17ae\3\2\2\2")
        buf.write("\u17ad\u17a8\3\2\2\2\u17ad\u17a9\3\2\2\2\u17ae\u17b0\3")
        buf.write("\2\2\2\u17af\u17a4\3\2\2\2\u17af\u17a6\3\2\2\2\u17b0\u02ad")
        buf.write("\3\2\2\2\u17b1\u17b2\7\u0178\2\2\u17b2\u17c0\7\65\2\2")
        buf.write("\u17b3\u17b4\7\u0287\2\2\u17b4\u17b5\5\u0296\u014c\2\u17b5")
        buf.write("\u17b6\7\u0288\2\2\u17b6\u17c1\3\2\2\2\u17b7\u17c1\5\u0342")
        buf.write("\u01a2\2\u17b8\u17bd\5\u0346\u01a4\2\u17b9\u17ba\7\u028d")
        buf.write("\2\2\u17ba\u17bc\5\u0346\u01a4\2\u17bb\u17b9\3\2\2\2\u17bc")
        buf.write("\u17bf\3\2\2\2\u17bd\u17bb\3\2\2\2\u17bd\u17be\3\2\2\2")
        buf.write("\u17be\u17c1\3\2\2\2\u17bf\u17bd\3\2\2\2\u17c0\u17b3\3")
        buf.write("\2\2\2\u17c0\u17b7\3\2\2\2\u17c0\u17b8\3\2\2\2\u17c1\u02af")
        buf.write("\3\2\2\2\u17c2\u17c3\7\u0238\2\2\u17c3\u17c4\7%\2\2\u17c4")
        buf.write("\u17c5\tF\2\2\u17c5\u17cb\5\u0346\u01a4\2\u17c6\u17c7")
        buf.write("\7\26\2\2\u17c7\u17c8\7\u015e\2\2\u17c8\u17c9\tG\2\2\u17c9")
        buf.write("\u17cb\5\u0346\u01a4\2\u17ca\u17c2\3\2\2\2\u17ca\u17c6")
        buf.write("\3\2\2\2\u17cb\u02b1\3\2\2\2\u17cc\u17ce\7\u0183\2\2\u17cd")
        buf.write("\u17cf\7\u0249\2\2\u17ce\u17cd\3\2\2\2\u17ce\u17cf\3\2")
        buf.write("\2\2\u17cf\u17d0\3\2\2\2\u17d0\u17d1\7\u0287\2\2\u17d1")
        buf.write("\u17d6\5\u02b4\u015b\2\u17d2\u17d3\7\u028d\2\2\u17d3\u17d5")
        buf.write("\5\u02b4\u015b\2\u17d4\u17d2\3\2\2\2\u17d5\u17d8\3\2\2")
        buf.write("\2\u17d6\u17d4\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7\u17d9")
        buf.write("\3\2\2\2\u17d8\u17d6\3\2\2\2\u17d9\u17da\5\u02b6\u015c")
        buf.write("\2\u17da\u17db\5\u02b8\u015d\2\u17db\u17dc\7\u0288\2\2")
        buf.write("\u17dc\u02b3\3\2\2\2\u17dd\u17de\5\u03e4\u01f3\2\u17de")
        buf.write("\u17df\7\u0287\2\2\u17df\u17e0\5\u0346\u01a4\2\u17e0\u17e2")
        buf.write("\7\u0288\2\2\u17e1\u17e3\5\u03be\u01e0\2\u17e2\u17e1\3")
        buf.write("\2\2\2\u17e2\u17e3\3\2\2\2\u17e3\u02b5\3\2\2\2\u17e4\u17f1")
        buf.write("\7\u00bf\2\2\u17e5\u17f2\5\u0404\u0203\2\u17e6\u17e7\7")
        buf.write("\u0287\2\2\u17e7\u17ec\5\u0404\u0203\2\u17e8\u17e9\7\u028d")
        buf.write("\2\2\u17e9\u17eb\5\u0404\u0203\2\u17ea\u17e8\3\2\2\2\u17eb")
        buf.write("\u17ee\3\2\2\2\u17ec\u17ea\3\2\2\2\u17ec\u17ed\3\2\2\2")
        buf.write("\u17ed\u17ef\3\2\2\2\u17ee\u17ec\3\2\2\2\u17ef\u17f0\7")
        buf.write("\u0288\2\2\u17f0\u17f2\3\2\2\2\u17f1\u17e5\3\2\2\2\u17f1")
        buf.write("\u17e6\3\2\2\2\u17f2\u02b7\3\2\2\2\u17f3\u17f4\7\u00db")
        buf.write("\2\2\u17f4\u1806\7\u0287\2\2\u17f5\u1807\5\u0296\u014c")
        buf.write("\2\u17f6\u17fb\7\22\2\2\u17f7\u17f8\7\u028d\2\2\u17f8")
        buf.write("\u17fa\7\22\2\2\u17f9\u17f7\3\2\2\2\u17fa\u17fd\3\2\2")
        buf.write("\2\u17fb\u17f9\3\2\2\2\u17fb\u17fc\3\2\2\2\u17fc\u1807")
        buf.write("\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fe\u1803\5\u02ba\u015e")
        buf.write("\2\u17ff\u1800\7\u028d\2\2\u1800\u1802\5\u02ba\u015e\2")
        buf.write("\u1801\u17ff\3\2\2\2\u1802\u1805\3\2\2\2\u1803\u1801\3")
        buf.write("\2\2\2\u1803\u1804\3\2\2\2\u1804\u1807\3\2\2\2\u1805\u1803")
        buf.write("\3\2\2\2\u1806\u17f5\3\2\2\2\u1806\u17f6\3\2\2\2\u1806")
        buf.write("\u17fe\3\2\2\2\u1807\u1808\3\2\2\2\u1808\u1809\7\u0288")
        buf.write("\2\2\u1809\u02b9\3\2\2\2\u180a\u180c\5\u02bc\u015f\2\u180b")
        buf.write("\u180d\5\u03be\u01e0\2\u180c\u180b\3\2\2\2\u180c\u180d")
        buf.write("\3\2\2\2\u180d\u02bb\3\2\2\2\u180e\u1811\5\u0346\u01a4")
        buf.write("\2\u180f\u1811\5\u0342\u01a2\2\u1810\u180e\3\2\2\2\u1810")
        buf.write("\u180f\3\2\2\2\u1811\u02bd\3\2\2\2\u1812\u1815\7\u0222")
        buf.write("\2\2\u1813\u1814\tH\2\2\u1814\u1816\7\u0158\2\2\u1815")
        buf.write("\u1813\3\2\2\2\u1815\u1816\3\2\2\2\u1816\u1817\3\2\2\2")
        buf.write("\u1817\u1824\7\u0287\2\2\u1818\u1825\5\u0404\u0203\2\u1819")
        buf.write("\u181a\7\u0287\2\2\u181a\u181f\5\u0404\u0203\2\u181b\u181c")
        buf.write("\7\u028d\2\2\u181c\u181e\5\u0404\u0203\2\u181d\u181b\3")
        buf.write("\2\2\2\u181e\u1821\3\2\2\2\u181f\u181d\3\2\2\2\u181f\u1820")
        buf.write("\3\2\2\2\u1820\u1822\3\2\2\2\u1821\u181f\3\2\2\2\u1822")
        buf.write("\u1823\7\u0288\2\2\u1823\u1825\3\2\2\2\u1824\u1818\3\2")
        buf.write("\2\2\u1824\u1819\3\2\2\2\u1825\u1826\3\2\2\2\u1826\u1827")
        buf.write("\5\u02b6\u015c\2\u1827\u1828\5\u02c0\u0161\2\u1828\u1829")
        buf.write("\7\u0288\2\2\u1829\u02bf\3\2\2\2\u182a\u182b\7\u00db\2")
        buf.write("\2\u182b\u182c\7\u0287\2\2\u182c\u1831\5\u02c2\u0162\2")
        buf.write("\u182d\u182e\7\u028d\2\2\u182e\u1830\5\u02c2\u0162\2\u182f")
        buf.write("\u182d\3\2\2\2\u1830\u1833\3\2\2\2\u1831\u182f\3\2\2\2")
        buf.write("\u1831\u1832\3\2\2\2\u1832\u1834\3\2\2\2\u1833\u1831\3")
        buf.write("\2\2\2\u1834\u1835\7\u0288\2\2\u1835\u02c1\3\2\2\2\u1836")
        buf.write("\u1843\5\u0404\u0203\2\u1837\u1838\7\u0287\2\2\u1838\u183d")
        buf.write("\5\u0404\u0203\2\u1839\u183a\7\u028d\2\2\u183a\u183c\5")
        buf.write("\u0404\u0203\2\u183b\u1839\3\2\2\2\u183c\u183f\3\2\2\2")
        buf.write("\u183d\u183b\3\2\2\2\u183d\u183e\3\2\2\2\u183e\u1840\3")
        buf.write("\2\2\2\u183f\u183d\3\2\2\2\u1840\u1841\7\u0288\2\2\u1841")
        buf.write("\u1843\3\2\2\2\u1842\u1836\3\2\2\2\u1842\u1837\3\2\2\2")
        buf.write("\u1843\u1853\3\2\2\2\u1844\u1851\7\26\2\2\u1845\u1852")
        buf.write("\5\u0428\u0215\2\u1846\u1847\7\u0287\2\2\u1847\u184c\5")
        buf.write("\u0428\u0215\2\u1848\u1849\7\u028d\2\2\u1849\u184b\5\u0428")
        buf.write("\u0215\2\u184a\u1848\3\2\2\2\u184b\u184e\3\2\2\2\u184c")
        buf.write("\u184a\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u184f\3\2\2\2")
        buf.write("\u184e\u184c\3\2\2\2\u184f\u1850\7\u0288\2\2\u1850\u1852")
        buf.write("\3\2\2\2\u1851\u1845\3\2\2\2\u1851\u1846\3\2\2\2\u1852")
        buf.write("\u1854\3\2\2\2\u1853\u1844\3\2\2\2\u1853\u1854\3\2\2\2")
        buf.write("\u1854\u02c3\3\2\2\2\u1855\u1856\7W\2\2\u1856\u1858\7")
        buf.write("\65\2\2\u1857\u1859\7\u0144\2\2\u1858\u1857\3\2\2\2\u1858")
        buf.write("\u1859\3\2\2\2\u1859\u185a\3\2\2\2\u185a\u185c\5\u0344")
        buf.write("\u01a3\2\u185b\u185d\5\u02c6\u0164\2\u185c\u185b\3\2\2")
        buf.write("\2\u185c\u185d\3\2\2\2\u185d\u1867\3\2\2\2\u185e\u185f")
        buf.write("\5\u02c6\u0164\2\u185f\u1860\7W\2\2\u1860\u1862\7\65\2")
        buf.write("\2\u1861\u1863\7\u0144\2\2\u1862\u1861\3\2\2\2\u1862\u1863")
        buf.write("\3\2\2\2\u1863\u1864\3\2\2\2\u1864\u1865\5\u0344\u01a3")
        buf.write("\2\u1865\u1867\3\2\2\2\u1866\u1855\3\2\2\2\u1866\u185e")
        buf.write("\3\2\2\2\u1867\u02c5\3\2\2\2\u1868\u1869\7\u01ec\2\2\u1869")
        buf.write("\u186a\7\u0243\2\2\u186a\u186b\5\u0344\u01a3\2\u186b\u02c7")
        buf.write("\3\2\2\2\u186c\u186d\7\u00cd\2\2\u186d\u186e\7\65\2\2")
        buf.write("\u186e\u1873\5\u02ca\u0166\2\u186f\u1870\7\u028d\2\2\u1870")
        buf.write("\u1872\5\u02ca\u0166\2\u1871\u186f\3\2\2\2\u1872\u1875")
        buf.write("\3\2\2\2\u1873\u1871\3\2\2\2\u1873\u1874\3\2\2\2\u1874")
        buf.write("\u02c9\3\2\2\2\u1875\u1873\3\2\2\2\u1876\u187a\5\u02ce")
        buf.write("\u0168\2\u1877\u187a\5\u02cc\u0167\2\u1878\u187a\5\u0346")
        buf.write("\u01a4\2\u1879\u1876\3\2\2\2\u1879\u1877\3\2\2\2\u1879")
        buf.write("\u1878\3\2\2\2\u187a\u02cb\3\2\2\2\u187b\u187c\tI\2\2")
        buf.write("\u187c\u187d\7\u0287\2\2\u187d\u1882\5\u02d0\u0169\2\u187e")
        buf.write("\u187f\7\u028d\2\2\u187f\u1881\5\u02d0\u0169\2\u1880\u187e")
        buf.write("\3\2\2\2\u1881\u1884\3\2\2\2\u1882\u1880\3\2\2\2\u1882")
        buf.write("\u1883\3\2\2\2\u1883\u1885\3\2\2\2\u1884\u1882\3\2\2\2")
        buf.write("\u1885\u1886\7\u0288\2\2\u1886\u02cd\3\2\2\2\u1887\u1888")
        buf.write("\7\u00cf\2\2\u1888\u1889\7\u01d7\2\2\u1889\u188a\7\u0287")
        buf.write("\2\2\u188a\u188f\5\u02d0\u0169\2\u188b\u188c\7\u028d\2")
        buf.write("\2\u188c\u188e\5\u02d0\u0169\2\u188d\u188b\3\2\2\2\u188e")
        buf.write("\u1891\3\2\2\2\u188f\u188d\3\2\2\2\u188f\u1890\3\2\2\2")
        buf.write("\u1890\u1892\3\2\2\2\u1891\u188f\3\2\2\2\u1892\u1893\7")
        buf.write("\u0288\2\2\u1893\u02cf\3\2\2\2\u1894\u1898\5\u02cc\u0167")
        buf.write("\2\u1895\u1898\5\u0342\u01a2\2\u1896\u1898\5\u0346\u01a4")
        buf.write("\2\u1897\u1894\3\2\2\2\u1897\u1895\3\2\2\2\u1897\u1896")
        buf.write("\3\2\2\2\u1898\u02d1\3\2\2\2\u1899\u189a\7\u00d1\2\2\u189a")
        buf.write("\u189b\5\u0344\u01a3\2\u189b\u02d3\3\2\2\2\u189c\u18a0")
        buf.write("\7\u012e\2\2\u189d\u189f\5\u02d6\u016c\2\u189e\u189d\3")
        buf.write("\2\2\2\u189f\u18a2\3\2\2\2\u18a0\u189e\3\2\2\2\u18a0\u18a1")
        buf.write("\3\2\2\2\u18a1\u18a4\3\2\2\2\u18a2\u18a0\3\2\2\2\u18a3")
        buf.write("\u18a5\5\u02d8\u016d\2\u18a4\u18a3\3\2\2\2\u18a4\u18a5")
        buf.write("\3\2\2\2\u18a5\u18a9\3\2\2\2\u18a6\u18a8\5\u02da\u016e")
        buf.write("\2\u18a7\u18a6\3\2\2\2\u18a8\u18ab\3\2\2\2\u18a9\u18a7")
        buf.write("\3\2\2\2\u18a9\u18aa\3\2\2\2\u18aa\u18ac\3\2\2\2\u18ab")
        buf.write("\u18a9\3\2\2\2\u18ac\u18ad\5\u02dc\u016f\2\u18ad\u02d5")
        buf.write("\3\2\2\2\u18ae\u18af\tJ\2\2\u18af\u18b7\7\u0137\2\2\u18b0")
        buf.write("\u18b4\7\u0220\2\2\u18b1\u18b5\7\u008c\2\2\u18b2\u18b3")
        buf.write("\7\u01e0\2\2\u18b3\u18b5\7\u01a2\2\2\u18b4\u18b1\3\2\2")
        buf.write("\2\u18b4\u18b2\3\2\2\2\u18b5\u18b7\3\2\2\2\u18b6\u18ae")
        buf.write("\3\2\2\2\u18b6\u18b0\3\2\2\2\u18b7\u02d7\3\2\2\2\u18b8")
        buf.write("\u18b9\7\u01b2\2\2\u18b9\u18ba\tK\2\2\u18ba\u18bb\7\u01bf")
        buf.write("\2\2\u18bb\u02d9\3\2\2\2\u18bc\u18bd\7\u01a2\2\2\u18bd")
        buf.write("\u18be\5\u03e0\u01f1\2\u18be\u18bf\7\u0164\2\2\u18bf\u18c0")
        buf.write("\7\u0287\2\2\u18c0\u18c1\5\u0296\u014c\2\u18c1\u18c2\7")
        buf.write("\u0288\2\2\u18c2\u18c6\5\u02de\u0170\2\u18c3\u18c5\5\u02d6")
        buf.write("\u016c\2\u18c4\u18c3\3\2\2\2\u18c5\u18c8\3\2\2\2\u18c6")
        buf.write("\u18c4\3\2\2\2\u18c6\u18c7\3\2\2\2\u18c7\u02db\3\2\2\2")
        buf.write("\u18c8\u18c6\3\2\2\2\u18c9\u18ca\7\u011c\2\2\u18ca\u18cc")
        buf.write("\5\u03e2\u01f2\2\u18cb\u18c9\3\2\2\2\u18cb\u18cc\3\2\2")
        buf.write("\2\u18cc\u18cd\3\2\2\2\u18cd\u18d1\5\u02de\u0170\2\u18ce")
        buf.write("\u18d0\5\u02d6\u016c\2\u18cf\u18ce\3\2\2\2\u18d0\u18d3")
        buf.write("\3\2\2\2\u18d1\u18cf\3\2\2\2\u18d1\u18d2\3\2\2\2\u18d2")
        buf.write("\u18d4\3\2\2\2\u18d3\u18d1\3\2\2\2\u18d4\u18d5\5\u02e6")
        buf.write("\u0174\2\u18d5\u02dd\3\2\2\2\u18d6\u18d8\5\u02e0\u0171")
        buf.write("\2\u18d7\u18d6\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18d9")
        buf.write("\3\2\2\2\u18d9\u18da\7\u008c\2\2\u18da\u18db\7\65\2\2")
        buf.write("\u18db\u18dc\5\u02e2\u0172\2\u18dc\u18dd\7\u0123\2\2\u18dd")
        buf.write("\u18de\5\u02e2\u0172\2\u18de\u02df\3\2\2\2\u18df\u18e0")
        buf.write("\7\u0178\2\2\u18e0\u18e1\7\65\2\2\u18e1\u18e2\5\u02e2")
        buf.write("\u0172\2\u18e2\u02e1\3\2\2\2\u18e3\u18e4\7\u0287\2\2\u18e4")
        buf.write("\u18e9\5\u02e4\u0173\2\u18e5\u18e6\7\u028d\2\2\u18e6\u18e8")
        buf.write("\5\u02e4\u0173\2\u18e7\u18e5\3\2\2\2\u18e8\u18eb\3\2\2")
        buf.write("\2\u18e9\u18e7\3\2\2\2\u18e9\u18ea\3\2\2\2\u18ea\u18ec")
        buf.write("\3\2\2\2\u18eb\u18e9\3\2\2\2\u18ec\u18ed\7\u0288\2\2\u18ed")
        buf.write("\u02e3\3\2\2\2\u18ee\u18f0\5\u0346\u01a4\2\u18ef\u18f1")
        buf.write("\5\u03c0\u01e1\2\u18f0\u18ef\3\2\2\2\u18f0\u18f1\3\2\2")
        buf.write("\2\u18f1\u02e5\3\2\2\2\u18f2\u18f4\5\u02e8\u0175\2\u18f3")
        buf.write("\u18f2\3\2\2\2\u18f3\u18f4\3\2\2\2\u18f4\u18f5\3\2\2\2")
        buf.write("\u18f5\u18f6\7\u0287\2\2\u18f6\u18fb\5\u02ea\u0176\2\u18f7")
        buf.write("\u18f8\7\u028d\2\2\u18f8\u18fa\5\u02ea\u0176\2\u18f9\u18f7")
        buf.write("\3\2\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb")
        buf.write("\u18fc\3\2\2\2\u18fc\u18fe\3\2\2\2\u18fd\u18fb\3\2\2\2")
        buf.write("\u18fe\u18ff\7\u0288\2\2\u18ff\u02e7\3\2\2\2\u1900\u1906")
        buf.write("\7\u01c0\2\2\u1901\u1907\7\u0226\2\2\u1902\u1904\7\u0229")
        buf.write("\2\2\u1903\u1905\7\13\2\2\u1904\u1903\3\2\2\2\u1904\u1905")
        buf.write("\3\2\2\2\u1905\u1907\3\2\2\2\u1906\u1901\3\2\2\2\u1906")
        buf.write("\u1902\3\2\2\2\u1906\u1907\3\2\2\2\u1907\u190a\3\2\2\2")
        buf.write("\u1908\u1909\tL\2\2\u1909\u190b\7\u016b\2\2\u190a\u1908")
        buf.write("\3\2\2\2\u190a\u190b\3\2\2\2\u190b\u190d\3\2\2\2\u190c")
        buf.write("\u190e\5\u02ee\u0178\2\u190d\u190c\3\2\2\2\u190d\u190e")
        buf.write("\3\2\2\2\u190e\u02e9\3\2\2\2\u190f\u1915\7\u0226\2\2\u1910")
        buf.write("\u1912\7\u0229\2\2\u1911\u1913\7\13\2\2\u1912\u1911\3")
        buf.write("\2\2\2\u1912\u1913\3\2\2\2\u1913\u1915\3\2\2\2\u1914\u190f")
        buf.write("\3\2\2\2\u1914\u1910\3\2\2\2\u1914\u1915\3\2\2\2\u1915")
        buf.write("\u1916\3\2\2\2\u1916\u1918\5\u02ec\u0177\2\u1917\u1919")
        buf.write("\5\u02f2\u017a\2\u1918\u1917\3\2\2\2\u1918\u1919\3\2\2")
        buf.write("\2\u1919\u191a\3\2\2\2\u191a\u191b\7\u029e\2\2\u191b\u191c")
        buf.write("\5\u0346\u01a4\2\u191c\u02eb\3\2\2\2\u191d\u191e\5\u035c")
        buf.write("\u01af\2\u191e\u02ed\3\2\2\2\u191f\u1920\7\u00f9\2\2\u1920")
        buf.write("\u1921\7\u0287\2\2\u1921\u1922\5\u0346\u01a4\2\u1922\u1924")
        buf.write("\7\u0288\2\2\u1923\u1925\5\u02f0\u0179\2\u1924\u1923\3")
        buf.write("\2\2\2\u1924\u1925\3\2\2\2\u1925\u02ef\3\2\2\2\u1926\u1927")
        buf.write("\7\u0223\2\2\u1927\u1928\7\u0287\2\2\u1928\u1929\5\u0344")
        buf.write("\u01a3\2\u1929\u192a\7\u0288\2\2\u192a\u02f1\3\2\2\2\u192b")
        buf.write("\u192d\7\u016b\2\2\u192c\u192e\7\u01dd\2\2\u192d\u192c")
        buf.write("\3\2\2\2\u192d\u192e\3\2\2\2\u192e\u192f\3\2\2\2\u192f")
        buf.write("\u1930\7\65\2\2\u1930\u1935\5\u02f4\u017b\2\u1931\u1932")
        buf.write("\7\u028d\2\2\u1932\u1934\5\u02f4\u017b\2\u1933\u1931\3")
        buf.write("\2\2\2\u1934\u1937\3\2\2\2\u1935\u1933\3\2\2\2\u1935\u1936")
        buf.write("\3\2\2\2\u1936\u02f3\3\2\2\2\u1937\u1935\3\2\2\2\u1938")
        buf.write("\u193a\5\u0346\u01a4\2\u1939\u193b\t\20\2\2\u193a\u1939")
        buf.write("\3\2\2\2\u193a\u193b\3\2\2\2\u193b\u193e\3\2\2\2\u193c")
        buf.write("\u193d\7\u0158\2\2\u193d\u193f\tM\2\2\u193e\u193c\3\2")
        buf.write("\2\2\u193e\u193f\3\2\2\2\u193f\u02f5\3\2\2\2\u1940\u1941")
        buf.write("\7\u00bf\2\2\u1941\u1943\7\u0226\2\2\u1942\u1944\5\u02f8")
        buf.write("\u017d\2\u1943\u1942\3\2\2\2\u1943\u1944\3\2\2\2\u1944")
        buf.write("\u1946\3\2\2\2\u1945\u1947\5\u02fa\u017e\2\u1946\u1945")
        buf.write("\3\2\2\2\u1946\u1947\3\2\2\2\u1947\u02f7\3\2\2\2\u1948")
        buf.write("\u1949\7\u015e\2\2\u1949\u194e\5\u0404\u0203\2\u194a\u194b")
        buf.write("\7\u028d\2\2\u194b\u194d\5\u0404\u0203\2\u194c\u194a\3")
        buf.write("\2\2\2\u194d\u1950\3\2\2\2\u194e\u194c\3\2\2\2\u194e\u194f")
        buf.write("\3\2\2\2\u194f\u02f9\3\2\2\2\u1950\u194e\3\2\2\2\u1951")
        buf.write("\u1952\7\u01e2\2\2\u1952\u1957\7\u0113\2\2\u1953\u1957")
        buf.write("\7\u0155\2\2\u1954\u1955\7\u023c\2\2\u1955\u1957\5\u0346")
        buf.write("\u01a4\2\u1956\u1951\3\2\2\2\u1956\u1953\3\2\2\2\u1956")
        buf.write("\u1954\3\2\2\2\u1957\u02fb\3\2\2\2\u1958\u1959\7\u010c")
        buf.write("\2\2\u1959\u195a\5\u0346\u01a4\2\u195a\u02fd\3\2\2\2\u195b")
        buf.write("\u195c\7\u0226\2\2\u195c\u195d\5\u032c\u0197\2\u195d\u195f")
        buf.write("\5\u0300\u0181\2\u195e\u1960\5\u029e\u0150\2\u195f\u195e")
        buf.write("\3\2\2\2\u195f\u1960\3\2\2\2\u1960\u1962\3\2\2\2\u1961")
        buf.write("\u1963\5\u03c4\u01e3\2\u1962\u1961\3\2\2\2\u1962\u1963")
        buf.write("\3\2\2\2\u1963\u1965\3\2\2\2\u1964\u1966\5\u032e\u0198")
        buf.write("\2\u1965\u1964\3\2\2\2\u1965\u1966\3\2\2\2\u1966\u1968")
        buf.write("\3\2\2\2\u1967\u1969\5\u0330\u0199\2\u1968\u1967\3\2\2")
        buf.write("\2\u1968\u1969\3\2\2\2\u1969\u02ff\3\2\2\2\u196a\u197a")
        buf.write("\7\u01d6\2\2\u196b\u1970\5\u0302\u0182\2\u196c\u196d\7")
        buf.write("\u028d\2\2\u196d\u196f\5\u0302\u0182\2\u196e\u196c\3\2")
        buf.write("\2\2\u196f\u1972\3\2\2\2\u1970\u196e\3\2\2\2\u1970\u1971")
        buf.write("\3\2\2\2\u1971\u197b\3\2\2\2\u1972\u1970\3\2\2\2\u1973")
        buf.write("\u1974\7\u022e\2\2\u1974\u1975\7\u0287\2\2\u1975\u1976")
        buf.write("\5\u0430\u0219\2\u1976\u1977\7\u0288\2\2\u1977\u1978\7")
        buf.write("\u029e\2\2\u1978\u1979\5\u0346\u01a4\2\u1979\u197b\3\2")
        buf.write("\2\2\u197a\u196b\3\2\2\2\u197a\u1973\3\2\2\2\u197b\u0301")
        buf.write("\3\2\2\2\u197c\u197d\5\u0404\u0203\2\u197d\u197e\7\u029e")
        buf.write("\2\2\u197e\u197f\5\u0346\u01a4\2\u197f\u1985\3\2\2\2\u1980")
        buf.write("\u1981\5\u00b0Y\2\u1981\u1982\7\u029e\2\2\u1982\u1983")
        buf.write("\5\u0296\u014c\2\u1983\u1985\3\2\2\2\u1984\u197c\3\2\2")
        buf.write("\2\u1984\u1980\3\2\2\2\u1985\u0303\3\2\2\2\u1986\u1988")
        buf.write("\7\u0087\2\2\u1987\u1989\7\u00c6\2\2\u1988\u1987\3\2\2")
        buf.write("\2\u1988\u1989\3\2\2\2\u1989\u198a\3\2\2\2\u198a\u198c")
        buf.write("\5\u032c\u0197\2\u198b\u198d\5\u03c4\u01e3\2\u198c\u198b")
        buf.write("\3\2\2\2\u198c\u198d\3\2\2\2\u198d\u198f\3\2\2\2\u198e")
        buf.write("\u1990\5\u032e\u0198\2\u198f\u198e\3\2\2\2\u198f\u1990")
        buf.write("\3\2\2\2\u1990\u1992\3\2\2\2\u1991\u1993\5\u0330\u0199")
        buf.write("\2\u1992\u1991\3\2\2\2\u1992\u1993\3\2\2\2\u1993\u0305")
        buf.write("\3\2\2\2\u1994\u1997\7\u00ec\2\2\u1995\u1998\5\u0308\u0185")
        buf.write("\2\u1996\u1998\5\u030a\u0186\2\u1997\u1995\3\2\2\2\u1997")
        buf.write("\u1996\3\2\2\2\u1998\u0307\3\2\2\2\u1999\u199f\5\u0314")
        buf.write("\u018b\2\u199a\u199c\5\u0316\u018c\2\u199b\u199d\5\u032e")
        buf.write("\u0198\2\u199c\u199b\3\2\2\2\u199c\u199d\3\2\2\2\u199d")
        buf.write("\u19a0\3\2\2\2\u199e\u19a0\5\u028c\u0147\2\u199f\u199a")
        buf.write("\3\2\2\2\u199f\u199e\3\2\2\2\u19a0\u19a2\3\2\2\2\u19a1")
        buf.write("\u19a3\5\u0330\u0199\2\u19a2\u19a1\3\2\2\2\u19a2\u19a3")
        buf.write("\3\2\2\2\u19a3\u0309\3\2\2\2\u19a4\u19a6\7\13\2\2\u19a5")
        buf.write("\u19a7\5\u030c\u0187\2\u19a6\u19a5\3\2\2\2\u19a7\u19a8")
        buf.write("\3\2\2\2\u19a8\u19a6\3\2\2\2\u19a8\u19a9\3\2\2\2\u19a9")
        buf.write("\u19ac\3\2\2\2\u19aa\u19ac\5\u030e\u0188\2\u19ab\u19a4")
        buf.write("\3\2\2\2\u19ab\u19aa\3\2\2\2\u19ac\u19ad\3\2\2\2\u19ad")
        buf.write("\u19ae\5\u028c\u0147\2\u19ae\u030b\3\2\2\2\u19af\u19b1")
        buf.write("\5\u0314\u018b\2\u19b0\u19b2\5\u0316\u018c\2\u19b1\u19b0")
        buf.write("\3\2\2\2\u19b1\u19b2\3\2\2\2\u19b2\u19b4\3\2\2\2\u19b3")
        buf.write("\u19b5\5\u0330\u0199\2\u19b4\u19b3\3\2\2\2\u19b4\u19b5")
        buf.write("\3\2\2\2\u19b5\u030d\3\2\2\2\u19b6\u19b8\tN\2\2\u19b7")
        buf.write("\u19b6\3\2\2\2\u19b7\u19b8\3\2\2\2\u19b8\u19ba\3\2\2\2")
        buf.write("\u19b9\u19bb\5\u0310\u0189\2\u19ba\u19b9\3\2\2\2\u19bb")
        buf.write("\u19bc\3\2\2\2\u19bc\u19ba\3\2\2\2\u19bc\u19bd\3\2\2\2")
        buf.write("\u19bd\u19bf\3\2\2\2\u19be\u19c0\5\u0312\u018a\2\u19bf")
        buf.write("\u19be\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u030f\3\2\2\2")
        buf.write("\u19c1\u19c2\7\u023f\2\2\u19c2\u19c3\5\u0344\u01a3\2\u19c3")
        buf.write("\u19c5\7\u0206\2\2\u19c4\u19c6\5\u030c\u0187\2\u19c5\u19c4")
        buf.write("\3\2\2\2\u19c6\u19c7\3\2\2\2\u19c7\u19c5\3\2\2\2\u19c7")
        buf.write("\u19c8\3\2\2\2\u19c8\u0311\3\2\2\2\u19c9\u19cb\7\u0098")
        buf.write("\2\2\u19ca\u19cc\5\u030c\u0187\2\u19cb\u19ca\3\2\2\2\u19cc")
        buf.write("\u19cd\3\2\2\2\u19cd\u19cb\3\2\2\2\u19cd\u19ce\3\2\2\2")
        buf.write("\u19ce\u0313\3\2\2\2\u19cf\u19d0\7\u00f4\2\2\u19d0\u19d2")
        buf.write("\5\u032c\u0197\2\u19d1\u19d3\5\u00b0Y\2\u19d2\u19d1\3")
        buf.write("\2\2\2\u19d2\u19d3\3\2\2\2\u19d3\u0315\3\2\2\2\u19d4\u19d5")
        buf.write("\7\u022f\2\2\u19d5\u19da\5\u0342\u01a2\2\u19d6\u19d7\7")
        buf.write("\u028d\2\2\u19d7\u19d9\5\u0342\u01a2\2\u19d8\u19d6\3\2")
        buf.write("\2\2\u19d9\u19dc\3\2\2\2\u19da\u19d8\3\2\2\2\u19da\u19db")
        buf.write("\3\2\2\2\u19db\u0317\3\2\2\2\u19dc\u19da\3\2\2\2\u19dd")
        buf.write("\u19de\7\u0126\2\2\u19de\u19df\7\u00f4\2\2\u19df\u19e1")
        buf.write("\5\u0408\u0205\2\u19e0\u19e2\5\u03c0\u01e1\2\u19e1\u19e0")
        buf.write("\3\2\2\2\u19e1\u19e2\3\2\2\2\u19e2\u19e3\3\2\2\2\u19e3")
        buf.write("\u19e4\7\u022c\2\2\u19e4\u19e5\5\u0322\u0192\2\u19e5\u19e6")
        buf.write("\7\u0164\2\2\u19e6\u19e7\7\u0287\2\2\u19e7\u19e8\5\u0344")
        buf.write("\u01a3\2\u19e8\u19f1\7\u0288\2\2\u19e9\u19eb\5\u031a\u018e")
        buf.write("\2\u19ea\u19ec\5\u0320\u0191\2\u19eb\u19ea\3\2\2\2\u19eb")
        buf.write("\u19ec\3\2\2\2\u19ec\u19f2\3\2\2\2\u19ed\u19ef\5\u0320")
        buf.write("\u0191\2\u19ee\u19f0\5\u031a\u018e\2\u19ef\u19ee\3\2\2")
        buf.write("\2\u19ef\u19f0\3\2\2\2\u19f0\u19f2\3\2\2\2\u19f1\u19e9")
        buf.write("\3\2\2\2\u19f1\u19ed\3\2\2\2\u19f1\u19f2\3\2\2\2\u19f2")
        buf.write("\u19f4\3\2\2\2\u19f3\u19f5\5\u0330\u0199\2\u19f4\u19f3")
        buf.write("\3\2\2\2\u19f4\u19f5\3\2\2\2\u19f5\u0319\3\2\2\2\u19f6")
        buf.write("\u19f7\7\u023f\2\2\u19f7\u19f8\7\u0120\2\2\u19f8\u19f9")
        buf.write("\7\u0206\2\2\u19f9\u19fa\7\u0226\2\2\u19fa\u19fb\7\u01d6")
        buf.write("\2\2\u19fb\u1a00\5\u031c\u018f\2\u19fc\u19fd\7\u028d\2")
        buf.write("\2\u19fd\u19ff\5\u031c\u018f\2\u19fe\u19fc\3\2\2\2\u19ff")
        buf.write("\u1a02\3\2\2\2\u1a00\u19fe\3\2\2\2\u1a00\u1a01\3\2\2\2")
        buf.write("\u1a01\u1a04\3\2\2\2\u1a02\u1a00\3\2\2\2\u1a03\u1a05\5")
        buf.write("\u03c4\u01e3\2\u1a04\u1a03\3\2\2\2\u1a04\u1a05\3\2\2\2")
        buf.write("\u1a05\u1a07\3\2\2\2\u1a06\u1a08\5\u031e\u0190\2\u1a07")
        buf.write("\u1a06\3\2\2\2\u1a07\u1a08\3\2\2\2\u1a08\u031b\3\2\2\2")
        buf.write("\u1a09\u1a0a\5\u0404\u0203\2\u1a0a\u1a0b\7\u029e\2\2\u1a0b")
        buf.write("\u1a0c\5\u0346\u01a4\2\u1a0c\u031d\3\2\2\2\u1a0d\u1a0e")
        buf.write("\7\u0087\2\2\u1a0e\u1a0f\5\u03c4\u01e3\2\u1a0f\u031f\3")
        buf.write("\2\2\2\u1a10\u1a11\7\u023f\2\2\u1a11\u1a12\7\u0153\2\2")
        buf.write("\u1a12\u1a13\7\u0120\2\2\u1a13\u1a14\7\u0206\2\2\u1a14")
        buf.write("\u1a16\7\u00ec\2\2\u1a15\u1a17\5\u00b0Y\2\u1a16\u1a15")
        buf.write("\3\2\2\2\u1a16\u1a17\3\2\2\2\u1a17\u1a18\3\2\2\2\u1a18")
        buf.write("\u1a19\7\u022f\2\2\u1a19\u1a1b\5\u0342\u01a2\2\u1a1a\u1a1c")
        buf.write("\5\u03c4\u01e3\2\u1a1b\u1a1a\3\2\2\2\u1a1b\u1a1c\3\2\2")
        buf.write("\2\u1a1c\u0321\3\2\2\2\u1a1d\u1a23\5\u0408\u0205\2\u1a1e")
        buf.write("\u1a1f\7\u0287\2\2\u1a1f\u1a20\5\u028c\u0147\2\u1a20\u1a21")
        buf.write("\7\u0288\2\2\u1a21\u1a23\3\2\2\2\u1a22\u1a1d\3\2\2\2\u1a22")
        buf.write("\u1a1e\3\2\2\2\u1a23\u1a25\3\2\2\2\u1a24\u1a26\5\u03c0")
        buf.write("\u01e1\2\u1a25\u1a24\3\2\2\2\u1a25\u1a26\3\2\2\2\u1a26")
        buf.write("\u0323\3\2\2\2\u1a27\u1a28\7\u0112\2\2\u1a28\u1a29\7\u01ff")
        buf.write("\2\2\u1a29\u1a2e\5\u0328\u0195\2\u1a2a\u1a2b\7\u028d\2")
        buf.write("\2\u1a2b\u1a2d\5\u0328\u0195\2\u1a2c\u1a2a\3\2\2\2\u1a2d")
        buf.write("\u1a30\3\2\2\2\u1a2e\u1a2c\3\2\2\2\u1a2e\u1a2f\3\2\2\2")
        buf.write("\u1a2f\u1a31\3\2\2\2\u1a30\u1a2e\3\2\2\2\u1a31\u1a32\7")
        buf.write("\u00db\2\2\u1a32\u1a33\5\u032a\u0196\2\u1a33\u1a35\7\u012d")
        buf.write("\2\2\u1a34\u1a36\5\u0326\u0194\2\u1a35\u1a34\3\2\2\2\u1a35")
        buf.write("\u1a36\3\2\2\2\u1a36\u0325\3\2\2\2\u1a37\u1a38\7\u023c")
        buf.write("\2\2\u1a38\u1a3b\5\u0346\u01a4\2\u1a39\u1a3b\7\u0155\2")
        buf.write("\2\u1a3a\u1a37\3\2\2\2\u1a3a\u1a39\3\2\2\2\u1a3b\u0327")
        buf.write("\3\2\2\2\u1a3c\u1a3e\5\u0408\u0205\2\u1a3d\u1a3f\5\u03bc")
        buf.write("\u01df\2\u1a3e\u1a3d\3\2\2\2\u1a3e\u1a3f\3\2\2\2\u1a3f")
        buf.write("\u0329\3\2\2\2\u1a40\u1a41\7\u01bc\2\2\u1a41\u1a4d\7\u01d9")
        buf.write("\2\2\u1a42\u1a43\7\u01bc\2\2\u1a43\u1a4d\7\u00aa\2\2\u1a44")
        buf.write("\u1a46\7\u01d9\2\2\u1a45\u1a47\7\u0226\2\2\u1a46\u1a45")
        buf.write("\3\2\2\2\u1a46\u1a47\3\2\2\2\u1a47\u1a4d\3\2\2\2\u1a48")
        buf.write("\u1a49\7\u01d9\2\2\u1a49\u1a4a\7\u01bc\2\2\u1a4a\u1a4d")
        buf.write("\7\u00aa\2\2\u1a4b\u1a4d\7\u00aa\2\2\u1a4c\u1a40\3\2\2")
        buf.write("\2\u1a4c\u1a42\3\2\2\2\u1a4c\u1a44\3\2\2\2\u1a4c\u1a48")
        buf.write("\3\2\2\2\u1a4c\u1a4b\3\2\2\2\u1a4d\u032b\3\2\2\2\u1a4e")
        buf.write("\u1a55\5\u0336\u019c\2\u1a4f\u1a50\7\u0165\2\2\u1a50\u1a51")
        buf.write("\7\u0287\2\2\u1a51\u1a52\5\u0336\u019c\2\u1a52\u1a53\7")
        buf.write("\u0288\2\2\u1a53\u1a55\3\2\2\2\u1a54\u1a4e\3\2\2\2\u1a54")
        buf.write("\u1a4f\3\2\2\2\u1a55\u1a57\3\2\2\2\u1a56\u1a58\5\u03c0")
        buf.write("\u01e1\2\u1a57\u1a56\3\2\2\2\u1a57\u1a58\3\2\2\2\u1a58")
        buf.write("\u032d\3\2\2\2\u1a59\u1a5a\t=\2\2\u1a5a\u1a5f\5\u0346")
        buf.write("\u01a4\2\u1a5b\u1a5c\7\u028d\2\2\u1a5c\u1a5e\5\u0346\u01a4")
        buf.write("\2\u1a5d\u1a5b\3\2\2\2\u1a5e\u1a61\3\2\2\2\u1a5f\u1a5d")
        buf.write("\3\2\2\2\u1a5f\u1a60\3\2\2\2\u1a60\u1a62\3\2\2\2\u1a61")
        buf.write("\u1a5f\3\2\2\2\u1a62\u1a63\5\u03c8\u01e5\2\u1a63\u032f")
        buf.write("\3\2\2\2\u1a64\u1a65\7\u0114\2\2\u1a65\u1a67\7\u00a2\2")
        buf.write("\2\u1a66\u1a68\5\u0332\u019a\2\u1a67\u1a66\3\2\2\2\u1a67")
        buf.write("\u1a68\3\2\2\2\u1a68\u1a6a\3\2\2\2\u1a69\u1a6b\5\u0346")
        buf.write("\u01a4\2\u1a6a\u1a69\3\2\2\2\u1a6a\u1a6b\3\2\2\2\u1a6b")
        buf.write("\u1a6d\3\2\2\2\u1a6c\u1a6e\5\u0334\u019b\2\u1a6d\u1a6c")
        buf.write("\3\2\2\2\u1a6d\u1a6e\3\2\2\2\u1a6e\u0331\3\2\2\2\u1a6f")
        buf.write("\u1a70\7\u00f4\2\2\u1a70\u1a71\5\u0408\u0205\2\u1a71\u0333")
        buf.write("\3\2\2\2\u1a72\u1a73\7\u01a6\2\2\u1a73\u1a76\7\u010c\2")
        buf.write("\2\u1a74\u1a77\7\u0221\2\2\u1a75\u1a77\5\u0346\u01a4\2")
        buf.write("\u1a76\u1a74\3\2\2\2\u1a76\u1a75\3\2\2\2\u1a77\u0335\3")
        buf.write("\2\2\2\u1a78\u1a85\5\u0338\u019d\2\u1a79\u1a7a\7\u0287")
        buf.write("\2\2\u1a7a\u1a7c\5\u028c\u0147\2\u1a7b\u1a7d\5\u033a\u019e")
        buf.write("\2\u1a7c\u1a7b\3\2\2\2\u1a7c\u1a7d\3\2\2\2\u1a7d\u1a7e")
        buf.write("\3\2\2\2\u1a7e\u1a7f\7\u0288\2\2\u1a7f\u1a85\3\2\2\2\u1a80")
        buf.write("\u1a82\5\u0408\u0205\2\u1a81\u1a83\5\u033c\u019f\2\u1a82")
        buf.write("\u1a81\3\2\2\2\u1a82\u1a83\3\2\2\2\u1a83\u1a85\3\2\2\2")
        buf.write("\u1a84\u1a78\3\2\2\2\u1a84\u1a79\3\2\2\2\u1a84\u1a80\3")
        buf.write("\2\2\2\u1a85\u0337\3\2\2\2\u1a86\u1a93\tO\2\2\u1a87\u1a88")
        buf.write("\7\u0287\2\2\u1a88\u1a89\5\u0296\u014c\2\u1a89\u1a8a\7")
        buf.write("\u0288\2\2\u1a8a\u1a94\3\2\2\2\u1a8b\u1a8c\7\u0287\2\2")
        buf.write("\u1a8c\u1a8d\5\u0346\u01a4\2\u1a8d\u1a91\7\u0288\2\2\u1a8e")
        buf.write("\u1a8f\7\u0287\2\2\u1a8f\u1a90\7\u028b\2\2\u1a90\u1a92")
        buf.write("\7\u0288\2\2\u1a91\u1a8e\3\2\2\2\u1a91\u1a92\3\2\2\2\u1a92")
        buf.write("\u1a94\3\2\2\2\u1a93\u1a87\3\2\2\2\u1a93\u1a8b\3\2\2\2")
        buf.write("\u1a94\u0339\3\2\2\2\u1a95\u1a9e\7\u0243\2\2\u1a96\u1a97")
        buf.write("\7\u0199\2\2\u1a97\u1a9f\7\u0165\2\2\u1a98\u1a99\7A\2")
        buf.write("\2\u1a99\u1a9c\7\u0168\2\2\u1a9a\u1a9b\7Z\2\2\u1a9b\u1a9d")
        buf.write("\5\u03e8\u01f5\2\u1a9c\u1a9a\3\2\2\2\u1a9c\u1a9d\3\2\2")
        buf.write("\2\u1a9d\u1a9f\3\2\2\2\u1a9e\u1a96\3\2\2\2\u1a9e\u1a98")
        buf.write("\3\2\2\2\u1a9f\u033b\3\2\2\2\u1aa0\u1aa2\7\u01c2\2\2\u1aa1")
        buf.write("\u1aa3\7/\2\2\u1aa2\u1aa1\3\2\2\2\u1aa2\u1aa3\3\2\2\2")
        buf.write("\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa5\7\u0287\2\2\u1aa5\u1aa8")
        buf.write("\5\u0346\u01a4\2\u1aa6\u1aa7\7\u028d\2\2\u1aa7\u1aa9\5")
        buf.write("\u0346\u01a4\2\u1aa8\u1aa6\3\2\2\2\u1aa8\u1aa9\3\2\2\2")
        buf.write("\u1aa9\u1aaa\3\2\2\2\u1aaa\u1aac\7\u0288\2\2\u1aab\u1aad")
        buf.write("\5\u033e\u01a0\2\u1aac\u1aab\3\2\2\2\u1aac\u1aad\3\2\2")
        buf.write("\2\u1aad\u033d\3\2\2\2\u1aae\u1aaf\7\u01cc\2\2\u1aaf\u1ab0")
        buf.write("\7\u0287\2\2\u1ab0\u1ab1\5\u0346\u01a4\2\u1ab1\u1ab2\7")
        buf.write("\u0288\2\2\u1ab2\u033f\3\2\2\2\u1ab3\u1ab4\7m\2\2\u1ab4")
        buf.write("\u1ab5\7\u0287\2\2\u1ab5\u1ab6\5\u0296\u014c\2\u1ab6\u1ab7")
        buf.write("\7\u0288\2\2\u1ab7\u0341\3\2\2\2\u1ab8\u1aba\7\u0287\2")
        buf.write("\2\u1ab9\u1abb\5\u0346\u01a4\2\u1aba\u1ab9\3\2\2\2\u1aba")
        buf.write("\u1abb\3\2\2\2\u1abb\u1ac0\3\2\2\2\u1abc\u1abd\7\u028d")
        buf.write("\2\2\u1abd\u1abf\5\u0346\u01a4\2\u1abe\u1abc\3\2\2\2\u1abf")
        buf.write("\u1ac2\3\2\2\2\u1ac0\u1abe\3\2\2\2\u1ac0\u1ac1\3\2\2\2")
        buf.write("\u1ac1\u1ac3\3\2\2\2\u1ac2\u1ac0\3\2\2\2\u1ac3\u1ac4\7")
        buf.write("\u0288\2\2\u1ac4\u0343\3\2\2\2\u1ac5\u1ac6\5\u0346\u01a4")
        buf.write("\2\u1ac6\u0345\3\2\2\2\u1ac7\u1ac8\b\u01a4\1\2\u1ac8\u1ac9")
        buf.write("\7m\2\2\u1ac9\u1ad2\5\u034a\u01a6\2\u1aca\u1acb\7\u0153")
        buf.write("\2\2\u1acb\u1ad2\5\u0346\u01a4\7\u1acc\u1ad2\5\u0358\u01ad")
        buf.write("\2\u1acd\u1ace\7\u0287\2\2\u1ace\u1acf\5\u0346\u01a4\2")
        buf.write("\u1acf\u1ad0\7\u0288\2\2\u1ad0\u1ad2\3\2\2\2\u1ad1\u1ac7")
        buf.write("\3\2\2\2\u1ad1\u1aca\3\2\2\2\u1ad1\u1acc\3\2\2\2\u1ad1")
        buf.write("\u1acd\3\2\2\2\u1ad2\u1b07\3\2\2\2\u1ad3\u1ad5\f\f\2\2")
        buf.write("\u1ad4\u1ad6\7\u0153\2\2\u1ad5\u1ad4\3\2\2\2\u1ad5\u1ad6")
        buf.write("\3\2\2\2\u1ad6\u1ad7\3\2\2\2\u1ad7\u1ad8\7%\2\2\u1ad8")
        buf.write("\u1ad9\5\u0346\u01a4\2\u1ad9\u1ada\7\21\2\2\u1ada\u1adb")
        buf.write("\5\u0346\u01a4\r\u1adb\u1b06\3\2\2\2\u1adc\u1add\f\n\2")
        buf.write("\2\u1add\u1ade\5\u034e\u01a8\2\u1ade\u1adf\5\u0346\u01a4")
        buf.write("\13\u1adf\u1b06\3\2\2\2\u1ae0\u1ae1\f\6\2\2\u1ae1\u1ae2")
        buf.write("\7\21\2\2\u1ae2\u1b06\5\u0346\u01a4\7\u1ae3\u1ae4\f\5")
        buf.write("\2\2\u1ae4\u1ae5\7\u0169\2\2\u1ae5\u1b06\5\u0346\u01a4")
        buf.write("\6\u1ae6\u1ae7\f\16\2\2\u1ae7\u1ae8\7\u00f7\2\2\u1ae8")
        buf.write("\u1b06\5\u0348\u01a5\2\u1ae9\u1aeb\f\r\2\2\u1aea\u1aec")
        buf.write("\7\u0153\2\2\u1aeb\u1aea\3\2\2\2\u1aeb\u1aec\3\2\2\2\u1aec")
        buf.write("\u1aed\3\2\2\2\u1aed\u1af3\7\u00db\2\2\u1aee\u1aef\7\u0287")
        buf.write("\2\2\u1aef\u1af0\5\u0296\u014c\2\u1af0\u1af1\7\u0288\2")
        buf.write("\2\u1af1\u1af4\3\2\2\2\u1af2\u1af4\5\u0342\u01a2\2\u1af3")
        buf.write("\u1aee\3\2\2\2\u1af3\u1af2\3\2\2\2\u1af4\u1b06\3\2\2\2")
        buf.write("\u1af5\u1af7\f\13\2\2\u1af6\u1af8\7\u0153\2\2\u1af7\u1af6")
        buf.write("\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9")
        buf.write("\u1afa\5\u0350\u01a9\2\u1afa\u1afd\5\u0346\u01a4\2\u1afb")
        buf.write("\u1afc\7\u00a3\2\2\u1afc\u1afe\5\u0346\u01a4\2\u1afd\u1afb")
        buf.write("\3\2\2\2\u1afd\u1afe\3\2\2\2\u1afe\u1b06\3\2\2\2\u1aff")
        buf.write("\u1b00\f\t\2\2\u1b00\u1b02\tP\2\2\u1b01\u1b03\7\u015e")
        buf.write("\2\2\u1b02\u1b01\3\2\2\2\u1b02\u1b03\3\2\2\2\u1b03\u1b04")
        buf.write("\3\2\2\2\u1b04\u1b06\5\u0358\u01ad\2\u1b05\u1ad3\3\2\2")
        buf.write("\2\u1b05\u1adc\3\2\2\2\u1b05\u1ae0\3\2\2\2\u1b05\u1ae3")
        buf.write("\3\2\2\2\u1b05\u1ae6\3\2\2\2\u1b05\u1ae9\3\2\2\2\u1b05")
        buf.write("\u1af5\3\2\2\2\u1b05\u1aff\3\2\2\2\u1b06\u1b09\3\2\2\2")
        buf.write("\u1b07\u1b05\3\2\2\2\u1b07\u1b08\3\2\2\2\u1b08\u0347\3")
        buf.write("\2\2\2\u1b09\u1b07\3\2\2\2\u1b0a\u1b0c\7\u0153\2\2\u1b0b")
        buf.write("\u1b0a\3\2\2\2\u1b0b\u1b0c\3\2\2\2\u1b0c\u1b26\3\2\2\2")
        buf.write("\u1b0d\u1b27\7\u0157\2\2\u1b0e\u1b27\7\u0134\2\2\u1b0f")
        buf.write("\u1b27\7\u018e\2\2\u1b10\u1b27\7\u00e5\2\2\u1b11\u1b12")
        buf.write("\7\6\2\2\u1b12\u1b27\7\u01d6\2\2\u1b13\u1b27\7\u009a\2")
        buf.write("\2\u1b14\u1b16\7\u015e\2\2\u1b15\u1b17\7\u021c\2\2\u1b16")
        buf.write("\u1b15\3\2\2\2\u1b16\u1b17\3\2\2\2\u1b17\u1b18\3\2\2\2")
        buf.write("\u1b18\u1b1a\7\u0287\2\2\u1b19\u1b1b\7\u0165\2\2\u1b1a")
        buf.write("\u1b19\3\2\2\2\u1b1a\u1b1b\3\2\2\2\u1b1b\u1b1c\3\2\2\2")
        buf.write("\u1b1c\u1b21\5\u041a\u020e\2\u1b1d\u1b1e\7\u028d\2\2\u1b1e")
        buf.write("\u1b20\5\u041a\u020e\2\u1b1f\u1b1d\3\2\2\2\u1b20\u1b23")
        buf.write("\3\2\2\2\u1b21\u1b1f\3\2\2\2\u1b21\u1b22\3\2\2\2\u1b22")
        buf.write("\u1b24\3\2\2\2\u1b23\u1b21\3\2\2\2\u1b24\u1b25\7\u0288")
        buf.write("\2\2\u1b25\u1b27\3\2\2\2\u1b26\u1b0d\3\2\2\2\u1b26\u1b0e")
        buf.write("\3\2\2\2\u1b26\u1b0f\3\2\2\2\u1b26\u1b10\3\2\2\2\u1b26")
        buf.write("\u1b11\3\2\2\2\u1b26\u1b13\3\2\2\2\u1b26\u1b14\3\2\2\2")
        buf.write("\u1b27\u0349\3\2\2\2\u1b28\u1b29\7\u0287\2\2\u1b29\u1b2a")
        buf.write("\5\u0296\u014c\2\u1b2a\u1b2b\7\u0288\2\2\u1b2b\u034b\3")
        buf.write("\2\2\2\u1b2c\u1b2d\tP\2\2\u1b2d\u034d\3\2\2\2\u1b2e\u1b35")
        buf.write("\7\u029e\2\2\u1b2f\u1b35\5\u0434\u021b\2\u1b30\u1b35\7")
        buf.write("\u0295\2\2\u1b31\u1b35\7\u029b\2\2\u1b32\u1b35\5\u0438")
        buf.write("\u021d\2\u1b33\u1b35\5\u0436\u021c\2\u1b34\u1b2e\3\2\2")
        buf.write("\2\u1b34\u1b2f\3\2\2\2\u1b34\u1b30\3\2\2\2\u1b34\u1b31")
        buf.write("\3\2\2\2\u1b34\u1b32\3\2\2\2\u1b34\u1b33\3\2\2\2\u1b35")
        buf.write("\u034f\3\2\2\2\u1b36\u1b37\tQ\2\2\u1b37\u0351\3\2\2\2")
        buf.write("\u1b38\u1b39\7\u00a3\2\2\u1b39\u1b3a\5\u0356\u01ac\2\u1b3a")
        buf.write("\u0353\3\2\2\2\u1b3b\u1b3c\5\u0356\u01ac\2\u1b3c\u1b3d")
        buf.write("\7\21\2\2\u1b3d\u1b3e\5\u0356\u01ac\2\u1b3e\u0355\3\2")
        buf.write("\2\2\u1b3f\u1b40\5\u0358\u01ad\2\u1b40\u0357\3\2\2\2\u1b41")
        buf.write("\u1b42\b\u01ad\1\2\u1b42\u1b43\7\u0287\2\2\u1b43\u1b44")
        buf.write("\5\u0358\u01ad\2\u1b44\u1b45\7\u0288\2\2\u1b45\u1b48\3")
        buf.write("\2\2\2\u1b46\u1b48\5\u0368\u01b5\2\u1b47\u1b41\3\2\2\2")
        buf.write("\u1b47\u1b46\3\2\2\2\u1b48\u1b62\3\2\2\2\u1b49\u1b4a\f")
        buf.write("\b\2\2\u1b4a\u1b4b\tR\2\2\u1b4b\u1b61\5\u0358\u01ad\t")
        buf.write("\u1b4c\u1b4d\f\7\2\2\u1b4d\u1b4e\tS\2\2\u1b4e\u1b61\5")
        buf.write("\u0358\u01ad\b\u1b4f\u1b50\f\6\2\2\u1b50\u1b51\7\u029c")
        buf.write("\2\2\u1b51\u1b61\5\u0358\u01ad\7\u1b52\u1b53\f\5\2\2\u1b53")
        buf.write("\u1b54\7\4\2\2\u1b54\u1b61\5\u0358\u01ad\6\u1b55\u1b5e")
        buf.write("\f\t\2\2\u1b56\u1b5b\7\31\2\2\u1b57\u1b5c\7\u010e\2\2")
        buf.write("\u1b58\u1b59\7\u0207\2\2\u1b59\u1b5a\7\u025e\2\2\u1b5a")
        buf.write("\u1b5c\5\u0358\u01ad\2\u1b5b\u1b57\3\2\2\2\u1b5b\u1b58")
        buf.write("\3\2\2\2\u1b5c\u1b5f\3\2\2\2\u1b5d\u1b5f\5\u035a\u01ae")
        buf.write("\2\u1b5e\u1b56\3\2\2\2\u1b5e\u1b5d\3\2\2\2\u1b5f\u1b61")
        buf.write("\3\2\2\2\u1b60\u1b49\3\2\2\2\u1b60\u1b4c\3\2\2\2\u1b60")
        buf.write("\u1b4f\3\2\2\2\u1b60\u1b52\3\2\2\2\u1b60\u1b55\3\2\2\2")
        buf.write("\u1b61\u1b64\3\2\2\2\u1b62\u1b60\3\2\2\2\u1b62\u1b63\3")
        buf.write("\2\2\2\u1b63\u0359\3\2\2\2\u1b64\u1b62\3\2\2\2\u1b65\u1b6a")
        buf.write("\7t\2\2\u1b66\u1b67\7\u0287\2\2\u1b67\u1b68\5\u0356\u01ac")
        buf.write("\2\u1b68\u1b69\7\u0288\2\2\u1b69\u1b6b\3\2\2\2\u1b6a\u1b66")
        buf.write("\3\2\2\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b6c\3\2\2\2\u1b6c")
        buf.write("\u1b6d\7\u0210\2\2\u1b6d\u1b72\7\u01ca\2\2\u1b6e\u1b6f")
        buf.write("\7\u0287\2\2\u1b6f\u1b70\5\u0356\u01ac\2\u1b70\u1b71\7")
        buf.write("\u0288\2\2\u1b71\u1b73\3\2\2\2\u1b72\u1b6e\3\2\2\2\u1b72")
        buf.write("\u1b73\3\2\2\2\u1b73\u1b7e\3\2\2\2\u1b74\u1b79\7\u025b")
        buf.write("\2\2\u1b75\u1b76\7\u0287\2\2\u1b76\u1b77\5\u0356\u01ac")
        buf.write("\2\u1b77\u1b78\7\u0288\2\2\u1b78\u1b7a\3\2\2\2\u1b79\u1b75")
        buf.write("\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b")
        buf.write("\u1b7c\7\u0210\2\2\u1b7c\u1b7e\7\u0130\2\2\u1b7d\u1b65")
        buf.write("\3\2\2\2\u1b7d\u1b74\3\2\2\2\u1b7e\u035b\3\2\2\2\u1b7f")
        buf.write("\u1b80\5\u0368\u01b5\2\u1b80\u1b81\7\u029f\2\2\u1b81\u1b82")
        buf.write("\5\u035e\u01b0\2\u1b82\u1b83\7\u02a0\2\2\u1b83\u035d\3")
        buf.write("\2\2\2\u1b84\u1b87\7\22\2\2\u1b85\u1b87\5\u0346\u01a4")
        buf.write("\2\u1b86\u1b84\3\2\2\2\u1b86\u1b85\3\2\2\2\u1b87\u1b8f")
        buf.write("\3\2\2\2\u1b88\u1b8b\7\u028d\2\2\u1b89\u1b8c\7\22\2\2")
        buf.write("\u1b8a\u1b8c\5\u0346\u01a4\2\u1b8b\u1b89\3\2\2\2\u1b8b")
        buf.write("\u1b8a\3\2\2\2\u1b8c\u1b8e\3\2\2\2\u1b8d\u1b88\3\2\2\2")
        buf.write("\u1b8e\u1b91\3\2\2\2\u1b8f\u1b8d\3\2\2\2\u1b8f\u1b90\3")
        buf.write("\2\2\2\u1b90\u1b9c\3\2\2\2\u1b91\u1b8f\3\2\2\2\u1b92\u1b97")
        buf.write("\5\u0360\u01b1\2\u1b93\u1b94\7\u028d\2\2\u1b94\u1b96\5")
        buf.write("\u0360\u01b1\2\u1b95\u1b93\3\2\2\2\u1b96\u1b99\3\2\2\2")
        buf.write("\u1b97\u1b95\3\2\2\2\u1b97\u1b98\3\2\2\2\u1b98\u1b9c\3")
        buf.write("\2\2\2\u1b99\u1b97\3\2\2\2\u1b9a\u1b9c\5\u0366\u01b4\2")
        buf.write("\u1b9b\u1b86\3\2\2\2\u1b9b\u1b92\3\2\2\2\u1b9b\u1b9a\3")
        buf.write("\2\2\2\u1b9c\u035f\3\2\2\2\u1b9d\u1b9e\7\u00bf\2\2\u1b9e")
        buf.write("\u1bab\5\u0404\u0203\2\u1b9f\u1ba0\7\u00db\2\2\u1ba0\u1bac")
        buf.write("\5\u0342\u01a2\2\u1ba1\u1ba3\5\u0362\u01b2\2\u1ba2\u1ba1")
        buf.write("\3\2\2\2\u1ba2\u1ba3\3\2\2\2\u1ba3\u1ba4\3\2\2\2\u1ba4")
        buf.write("\u1ba5\7\u00c6\2\2\u1ba5\u1ba6\5\u0346\u01a4\2\u1ba6\u1ba7")
        buf.write("\7\u0210\2\2\u1ba7\u1ba8\5\u0346\u01a4\2\u1ba8\u1ba9\5")
        buf.write("\u0364\u01b3\2\u1ba9\u1baa\5\u0346\u01a4\2\u1baa\u1bac")
        buf.write("\3\2\2\2\u1bab\u1b9f\3\2\2\2\u1bab\u1ba2\3\2\2\2\u1bac")
        buf.write("\u0361\3\2\2\2\u1bad\u1bae\7\u0108\2\2\u1bae\u1baf\5\u0346")
        buf.write("\u01a4\2\u1baf\u0363\3\2\2\2\u1bb0\u1bb1\tT\2\2\u1bb1")
        buf.write("\u0365\3\2\2\2\u1bb2\u1bb3\7\u00bf\2\2\u1bb3\u1bb4\7\u0287")
        buf.write("\2\2\u1bb4\u1bb9\5\u0404\u0203\2\u1bb5\u1bb6\7\u028d\2")
        buf.write("\2\u1bb6\u1bb8\5\u0404\u0203\2\u1bb7\u1bb5\3\2\2\2\u1bb8")
        buf.write("\u1bbb\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bba\3\2\2\2")
        buf.write("\u1bba\u1bbc\3\2\2\2\u1bbb\u1bb9\3\2\2\2\u1bbc\u1bbd\7")
        buf.write("\u0288\2\2\u1bbd\u1bbe\7\u00db\2\2\u1bbe\u1bcb\7\u0287")
        buf.write("\2\2\u1bbf\u1bcc\5\u0296\u014c\2\u1bc0\u1bc1\7\u0287\2")
        buf.write("\2\u1bc1\u1bc6\5\u0342\u01a2\2\u1bc2\u1bc3\7\u028d\2\2")
        buf.write("\u1bc3\u1bc5\5\u0342\u01a2\2\u1bc4\u1bc2\3\2\2\2\u1bc5")
        buf.write("\u1bc8\3\2\2\2\u1bc6\u1bc4\3\2\2\2\u1bc6\u1bc7\3\2\2\2")
        buf.write("\u1bc7\u1bc9\3\2\2\2\u1bc8\u1bc6\3\2\2\2\u1bc9\u1bca\7")
        buf.write("\u0288\2\2\u1bca\u1bcc\3\2\2\2\u1bcb\u1bbf\3\2\2\2\u1bcb")
        buf.write("\u1bc0\3\2\2\2\u1bcc\u1bcd\3\2\2\2\u1bcd\u1bce\7\u0288")
        buf.write("\2\2\u1bce\u0367\3\2\2\2\u1bcf\u1bd0\b\u01b5\1\2\u1bd0")
        buf.write("\u1bd1\tS\2\2\u1bd1\u1be1\5\u0368\u01b5\f\u1bd2\u1bd3")
        buf.write("\7\u0191\2\2\u1bd3\u1be1\5\u0368\u01b5\13\u1bd4\u1bd5")
        buf.write("\7X\2\2\u1bd5\u1be1\5\u0368\u01b5\n\u1bd6\u1bd7\7\u013d")
        buf.write("\2\2\u1bd7\u1be1\5\u0368\u01b5\t\u1bd8\u1bd9\7\u0090\2")
        buf.write("\2\u1bd9\u1be1\5\u0368\u01b5\b\u1bda\u1bdb\7\13\2\2\u1bdb")
        buf.write("\u1be1\5\u0368\u01b5\7\u1bdc\u1be1\5\u036a\u01b6\2\u1bdd")
        buf.write("\u1be1\5\u037c\u01bf\2\u1bde\u1be1\5\u037e\u01c0\2\u1bdf")
        buf.write("\u1be1\5\u0376\u01bc\2\u1be0\u1bcf\3\2\2\2\u1be0\u1bd2")
        buf.write("\3\2\2\2\u1be0\u1bd4\3\2\2\2\u1be0\u1bd6\3\2\2\2\u1be0")
        buf.write("\u1bd8\3\2\2\2\u1be0\u1bda\3\2\2\2\u1be0\u1bdc\3\2\2\2")
        buf.write("\u1be0\u1bdd\3\2\2\2\u1be0\u1bde\3\2\2\2\u1be0\u1bdf\3")
        buf.write("\2\2\2\u1be1\u1be9\3\2\2\2\u1be2\u1be3\f\r\2\2\u1be3\u1be4")
        buf.write("\7\u029f\2\2\u1be4\u1be5\5\u035e\u01b0\2\u1be5\u1be6\7")
        buf.write("\u02a0\2\2\u1be6\u1be8\3\2\2\2\u1be7\u1be2\3\2\2\2\u1be8")
        buf.write("\u1beb\3\2\2\2\u1be9\u1be7\3\2\2\2\u1be9\u1bea\3\2\2\2")
        buf.write("\u1bea\u0369\3\2\2\2\u1beb\u1be9\3\2\2\2\u1bec\u1bef\5")
        buf.write("\u0370\u01b9\2\u1bed\u1bef\5\u036c\u01b7\2\u1bee\u1bec")
        buf.write("\3\2\2\2\u1bee\u1bed\3\2\2\2\u1bef\u036b\3\2\2\2\u1bf0")
        buf.write("\u1bf2\5\u03ea\u01f6\2\u1bf1\u1bf0\3\2\2\2\u1bf1\u1bf2")
        buf.write("\3\2\2\2\u1bf2\u1bf3\3\2\2\2\u1bf3\u1bf4\7<\2\2\u1bf4")
        buf.write("\u1bf6\5\u0376\u01bc\2\u1bf5\u1bf7\5\u036e\u01b8\2\u1bf6")
        buf.write("\u1bf5\3\2\2\2\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bf6\3\2\2\2")
        buf.write("\u1bf8\u1bf9\3\2\2\2\u1bf9\u1bfb\3\2\2\2\u1bfa\u1bfc\5")
        buf.write("\u0374\u01bb\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2")
        buf.write("\u1bfc\u1bfd\3\2\2\2\u1bfd\u1bff\7\u009e\2\2\u1bfe\u1c00")
        buf.write("\7<\2\2\u1bff\u1bfe\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00")
        buf.write("\u1c02\3\2\2\2\u1c01\u1c03\5\u03ea\u01f6\2\u1c02\u1c01")
        buf.write("\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03\u036d\3\2\2\2\u1c04")
        buf.write("\u1c05\7\u023f\2\2\u1c05\u1c06\5\u0346\u01a4\2\u1c06\u1c09")
        buf.write("\7\u0206\2\2\u1c07\u1c0a\5\u0238\u011d\2\u1c08\u1c0a\5")
        buf.write("\u0346\u01a4\2\u1c09\u1c07\3\2\2\2\u1c09\u1c08\3\2\2\2")
        buf.write("\u1c0a\u036f\3\2\2\2\u1c0b\u1c0d\5\u03ea\u01f6\2\u1c0c")
        buf.write("\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\3\2\2\2")
        buf.write("\u1c0e\u1c10\7<\2\2\u1c0f\u1c11\5\u0372\u01ba\2\u1c10")
        buf.write("\u1c0f\3\2\2\2\u1c11\u1c12\3\2\2\2\u1c12\u1c10\3\2\2\2")
        buf.write("\u1c12\u1c13\3\2\2\2\u1c13\u1c15\3\2\2\2\u1c14\u1c16\5")
        buf.write("\u0374\u01bb\2\u1c15\u1c14\3\2\2\2\u1c15\u1c16\3\2\2\2")
        buf.write("\u1c16\u1c17\3\2\2\2\u1c17\u1c19\7\u009e\2\2\u1c18\u1c1a")
        buf.write("\7<\2\2\u1c19\u1c18\3\2\2\2\u1c19\u1c1a\3\2\2\2\u1c1a")
        buf.write("\u1c1c\3\2\2\2\u1c1b\u1c1d\5\u03ea\u01f6\2\u1c1c\u1c1b")
        buf.write("\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d\u0371\3\2\2\2\u1c1e")
        buf.write("\u1c1f\7\u023f\2\2\u1c1f\u1c20\5\u0346\u01a4\2\u1c20\u1c23")
        buf.write("\7\u0206\2\2\u1c21\u1c24\5\u0238\u011d\2\u1c22\u1c24\5")
        buf.write("\u0346\u01a4\2\u1c23\u1c21\3\2\2\2\u1c23\u1c22\3\2\2\2")
        buf.write("\u1c24\u0373\3\2\2\2\u1c25\u1c28\7\u0098\2\2\u1c26\u1c29")
        buf.write("\5\u0238\u011d\2\u1c27\u1c29\5\u0346\u01a4\2\u1c28\u1c26")
        buf.write("\3\2\2\2\u1c28\u1c27\3\2\2\2\u1c29\u0375\3\2\2\2\u1c2a")
        buf.write("\u1c2b\5\u0426\u0214\2\u1c2b\u1c2c\5\u043c\u021f\2\u1c2c")
        buf.write("\u1c3d\3\2\2\2\u1c2d\u1c3d\5\u0422\u0212\2\u1c2e\u1c3d")
        buf.write("\5\u0428\u0215\2\u1c2f\u1c3d\5B\"\2\u1c30\u1c3d\5\u0424")
        buf.write("\u0213\2\u1c31\u1c32\7\u0287\2\2\u1c32\u1c33\5\u0376\u01bc")
        buf.write("\2\u1c33\u1c34\7\u0288\2\2\u1c34\u1c3d\3\2\2\2\u1c35\u1c36")
        buf.write("\7\u0287\2\2\u1c36\u1c37\5\u0296\u014c\2\u1c37\u1c38\7")
        buf.write("\u0288\2\2\u1c38\u1c3b\3\2\2\2\u1c39\u1c3b\5\u0342\u01a2")
        buf.write("\2\u1c3a\u1c35\3\2\2\2\u1c3a\u1c39\3\2\2\2\u1c3b\u1c3d")
        buf.write("\3\2\2\2\u1c3c\u1c2a\3\2\2\2\u1c3c\u1c2d\3\2\2\2\u1c3c")
        buf.write("\u1c2e\3\2\2\2\u1c3c\u1c2f\3\2\2\2\u1c3c\u1c30\3\2\2\2")
        buf.write("\u1c3c\u1c31\3\2\2\2\u1c3c\u1c3a\3\2\2\2\u1c3d\u0377\3")
        buf.write("\2\2\2\u1c3e\u1c40\5\u0346\u01a4\2\u1c3f\u1c41\5\u037a")
        buf.write("\u01be\2\u1c40\u1c3f\3\2\2\2\u1c40\u1c41\3\2\2\2\u1c41")
        buf.write("\u0379\3\2\2\2\u1c42\u1c43\7\u028d\2\2\u1c43\u1c48\5\u0346")
        buf.write("\u01a4\2\u1c44\u1c45\7\u028d\2\2\u1c45\u1c47\5\u0346\u01a4")
        buf.write("\2\u1c46\u1c44\3\2\2\2\u1c47\u1c4a\3\2\2\2\u1c48\u1c46")
        buf.write("\3\2\2\2\u1c48\u1c49\3\2\2\2\u1c49\u037b\3\2\2\2\u1c4a")
        buf.write("\u1c48\3\2\2\2\u1c4b\u1c54\tU\2\2\u1c4c\u1c4d\7\u0287")
        buf.write("\2\2\u1c4d\u1c4e\5\u0296\u014c\2\u1c4e\u1c4f\7\u0288\2")
        buf.write("\2\u1c4f\u1c55\3\2\2\2\u1c50\u1c51\7\u0287\2\2\u1c51\u1c52")
        buf.write("\5\u0346\u01a4\2\u1c52\u1c53\7\u0288\2\2\u1c53\u1c55\3")
        buf.write("\2\2\2\u1c54\u1c4c\3\2\2\2\u1c54\u1c50\3\2\2\2\u1c55\u037d")
        buf.write("\3\2\2\2\u1c56\u1c57\b\u01c0\1\2\u1c57\u1d93\5\u0380\u01c1")
        buf.write("\2\u1c58\u1c59\5\u043e\u0220\2\u1c59\u1c5b\5\u0414\u020b")
        buf.write("\2\u1c5a\u1c5c\5\u0390\u01c9\2\u1c5b\u1c5a\3\2\2\2\u1c5b")
        buf.write("\u1c5c\3\2\2\2\u1c5c\u1d93\3\2\2\2\u1c5d\u1c5e\tV\2\2")
        buf.write("\u1c5e\u1c66\7\u0287\2\2\u1c5f\u1c60\7\u0132\2\2\u1c60")
        buf.write("\u1c61\7\u0287\2\2\u1c61\u1c62\5\u0296\u014c\2\u1c62\u1c63")
        buf.write("\7\u0288\2\2\u1c63\u1c67\3\2\2\2\u1c64\u1c67\5\u0356\u01ac")
        buf.write("\2\u1c65\u1c67\5\u0346\u01a4\2\u1c66\u1c5f\3\2\2\2\u1c66")
        buf.write("\u1c64\3\2\2\2\u1c66\u1c65\3\2\2\2\u1c67\u1c68\3\2\2\2")
        buf.write("\u1c68\u1c69\7\26\2\2\u1c69\u1c6a\5\u041a\u020e\2\u1c6a")
        buf.write("\u1c6b\7\u0288\2\2\u1c6b\u1d93\3\2\2\2\u1c6c\u1c6f\5\u0296")
        buf.write("\u014c\2\u1c6d\u1c6f\5\u0376\u01bc\2\u1c6e\u1c6c\3\2\2")
        buf.write("\2\u1c6e\u1c6d\3\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u1c71")
        buf.write("\7\5\2\2\u1c71\u1c72\5\u041a\u020e\2\u1c72\u1d93\3\2\2")
        buf.write("\2\u1c73\u1c74\7C\2\2\u1c74\u1c75\7\u0287\2\2\u1c75\u1c76")
        buf.write("\5\u0356\u01ac\2\u1c76\u1c77\7\u022c\2\2\u1c77\u1c78\7")
        buf.write("\u0139\2\2\u1c78\u1c79\7\u0288\2\2\u1c79\u1d93\3\2\2\2")
        buf.write("\u1c7a\u1c7b\7I\2\2\u1c7b\u1c7d\7\u0287\2\2\u1c7c\u1c7e")
        buf.write("\tW\2\2\u1c7d\u1c7c\3\2\2\2\u1c7d\u1c7e\3\2\2\2\u1c7e")
        buf.write("\u1c7f\3\2\2\2\u1c7f\u1c81\5\u0356\u01ac\2\u1c80\u1c82")
        buf.write("\5\u0394\u01cb\2\u1c81\u1c80\3\2\2\2\u1c81\u1c82\3\2\2")
        buf.write("\2\u1c82\u1c83\3\2\2\2\u1c83\u1c84\7\u0288\2\2\u1c84\u1d93")
        buf.write("\3\2\2\2\u1c85\u1c86\5\u0384\u01c3\2\u1c86\u1c88\5\u0410")
        buf.write("\u0209\2\u1c87\u1c89\5\u0396\u01cc\2\u1c88\u1c87\3\2\2")
        buf.write("\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c88\3\2\2\2\u1c8a\u1c8b")
        buf.write("\3\2\2\2\u1c8b\u1d93\3\2\2\2\u1c8c\u1c8d\7~\2\2\u1c8d")
        buf.write("\u1c8e\7\u0287\2\2\u1c8e\u1c90\5\u0356\u01ac\2\u1c8f\u1c91")
        buf.write("\tX\2\2\u1c90\u1c8f\3\2\2\2\u1c90\u1c91\3\2\2\2\u1c91")
        buf.write("\u1c92\3\2\2\2\u1c92\u1c93\7\u0288\2\2\u1c93\u1d93\3\2")
        buf.write("\2\2\u1c94\u1c95\7\u00b1\2\2\u1c95\u1c98\7\u0287\2\2\u1c96")
        buf.write("\u1c99\5\u043e\u0220\2\u1c97\u1c99\5\u0346\u01a4\2\u1c98")
        buf.write("\u1c96\3\2\2\2\u1c98\u1c97\3\2\2\2\u1c99\u1c9a\3\2\2\2")
        buf.write("\u1c9a\u1c9b\7\u00c6\2\2\u1c9b\u1c9c\5\u0356\u01ac\2\u1c9c")
        buf.write("\u1c9d\7\u0288\2\2\u1c9d\u1d93\3\2\2\2\u1c9e\u1c9f\tY")
        buf.write("\2\2\u1c9f\u1ca1\5\u0412\u020a\2\u1ca0\u1ca2\5\u0416\u020c")
        buf.write("\2\u1ca1\u1ca0\3\2\2\2\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca3")
        buf.write("\3\2\2\2\u1ca3\u1ca4\5\u0388\u01c5\2\u1ca4\u1d93\3\2\2")
        buf.write("\2\u1ca5\u1ca6\5\u0386\u01c4\2\u1ca6\u1ca7\7\u0287\2\2")
        buf.write("\u1ca7\u1cac\5\u0346\u01a4\2\u1ca8\u1ca9\7\u028d\2\2\u1ca9")
        buf.write("\u1cab\5\u0346\u01a4\2\u1caa\u1ca8\3\2\2\2\u1cab\u1cae")
        buf.write("\3\2\2\2\u1cac\u1caa\3\2\2\2\u1cac\u1cad\3\2\2\2\u1cad")
        buf.write("\u1cb0\3\2\2\2\u1cae\u1cac\3\2\2\2\u1caf\u1cb1\5\u0398")
        buf.write("\u01cd\2\u1cb0\u1caf\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1")
        buf.write("\u1cb3\3\2\2\2\u1cb2\u1cb4\5\u0390\u01c9\2\u1cb3\u1cb2")
        buf.write("\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb5\3\2\2\2\u1cb5")
        buf.write("\u1cb6\7\u0288\2\2\u1cb6\u1d93\3\2\2\2\u1cb7\u1cb8\7\u0187")
        buf.write("\2\2\u1cb8\u1cb9\7\u0287\2\2\u1cb9\u1cba\5\u0346\u01a4")
        buf.write("\2\u1cba\u1cbb\7\u00db\2\2\u1cbb\u1cbc\5\u0346\u01a4\2")
        buf.write("\u1cbc\u1cbd\7\u0288\2\2\u1cbd\u1d93\3\2\2\2\u1cbe\u1cbf")
        buf.write("\7\u0215\2\2\u1cbf\u1cc0\7\u0287\2\2\u1cc0\u1cc3\5\u0346")
        buf.write("\u01a4\2\u1cc1\u1cc2\7\u022c\2\2\u1cc2\u1cc4\tZ\2\2\u1cc3")
        buf.write("\u1cc1\3\2\2\2\u1cc3\u1cc4\3\2\2\2\u1cc4\u1cc9\3\2\2\2")
        buf.write("\u1cc5\u1cc6\7\u028d\2\2\u1cc6\u1cc8\5\u0346\u01a4\2\u1cc7")
        buf.write("\u1cc5\3\2\2\2\u1cc8\u1ccb\3\2\2\2\u1cc9\u1cc7\3\2\2\2")
        buf.write("\u1cc9\u1cca\3\2\2\2\u1cca\u1ccc\3\2\2\2\u1ccb\u1cc9\3")
        buf.write("\2\2\2\u1ccc\u1ccd\7\u0288\2\2\u1ccd\u1d93\3\2\2\2\u1cce")
        buf.write("\u1ccf\7\u0216\2\2\u1ccf\u1cd0\7\u0287\2\2\u1cd0\u1cd1")
        buf.write("\5\u0346\u01a4\2\u1cd1\u1cd3\7\26\2\2\u1cd2\u1cd4\7\u01a1")
        buf.write("\2\2\u1cd3\u1cd2\3\2\2\2\u1cd3\u1cd4\3\2\2\2\u1cd4\u1cd5")
        buf.write("\3\2\2\2\u1cd5\u1cd6\5\u041a\u020e\2\u1cd6\u1cd7\7\u0288")
        buf.write("\2\2\u1cd7\u1d93\3\2\2\2\u1cd8\u1cd9\7\u0218\2\2\u1cd9")
        buf.write("\u1ce1\7\u0287\2\2\u1cda\u1cdc\t\21\2\2\u1cdb\u1cda\3")
        buf.write("\2\2\2\u1cdb\u1cdc\3\2\2\2\u1cdc\u1cde\3\2\2\2\u1cdd\u1cdf")
        buf.write("\5\u042e\u0218\2\u1cde\u1cdd\3\2\2\2\u1cde\u1cdf\3\2\2")
        buf.write("\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce2\7\u00c6\2\2\u1ce1\u1cdb")
        buf.write("\3\2\2\2\u1ce1\u1ce2\3\2\2\2\u1ce2\u1ce3\3\2\2\2\u1ce3")
        buf.write("\u1ce4\5\u0356\u01ac\2\u1ce4\u1ce5\7\u0288\2\2\u1ce5\u1d93")
        buf.write("\3\2\2\2\u1ce6\u1ce7\7\u024a\2\2\u1ce7\u1ce8\7\u0287\2")
        buf.write("\2\u1ce8\u1cea\5\u0346\u01a4\2\u1ce9\u1ceb\5\u02f2\u017a")
        buf.write("\2\u1cea\u1ce9\3\2\2\2\u1cea\u1ceb\3\2\2\2\u1ceb\u1cec")
        buf.write("\3\2\2\2\u1cec\u1cef\7\u0288\2\2\u1ced\u1cee\7\u0280\2")
        buf.write("\2\u1cee\u1cf0\5\u0424\u0213\2\u1cef\u1ced\3\2\2\2\u1cef")
        buf.write("\u1cf0\3\2\2\2\u1cf0\u1d93\3\2\2\2\u1cf1\u1cf2\t[\2\2")
        buf.write("\u1cf2\u1cf3\7\u0287\2\2\u1cf3\u1cf8\5\u03a4\u01d3\2\u1cf4")
        buf.write("\u1cf5\7\u028d\2\2\u1cf5\u1cf7\5\u03a4\u01d3\2\u1cf6\u1cf4")
        buf.write("\3\2\2\2\u1cf7\u1cfa\3\2\2\2\u1cf8\u1cf6\3\2\2\2\u1cf8")
        buf.write("\u1cf9\3\2\2\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cf8\3\2\2\2")
        buf.write("\u1cfb\u1cfe\7\u0288\2\2\u1cfc\u1cfd\7\u0280\2\2\u1cfd")
        buf.write("\u1cff\5\u0424\u0213\2\u1cfe\u1cfc\3\2\2\2\u1cfe\u1cff")
        buf.write("\3\2\2\2\u1cff\u1d93\3\2\2\2\u1d00\u1d01\7\u024e\2\2\u1d01")
        buf.write("\u1d03\7\u0287\2\2\u1d02\u1d04\t\\\2\2\u1d03\u1d02\3\2")
        buf.write("\2\2\u1d03\u1d04\3\2\2\2\u1d04\u1d06\3\2\2\2\u1d05\u1d07")
        buf.write("\t]\2\2\u1d06\u1d05\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07")
        buf.write("\u1d08\3\2\2\2\u1d08\u1d0b\5\u0346\u01a4\2\u1d09\u1d0a")
        buf.write("\7\u028d\2\2\u1d0a\u1d0c\5\u039c\u01cf\2\u1d0b\u1d09\3")
        buf.write("\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d14\3\2\2\2\u1d0d\u1d0e")
        buf.write("\7\u028d\2\2\u1d0e\u1d10\5\u0346\u01a4\2\u1d0f\u1d11\5")
        buf.write("\u03be\u01e0\2\u1d10\u1d0f\3\2\2\2\u1d10\u1d11\3\2\2\2")
        buf.write("\u1d11\u1d13\3\2\2\2\u1d12\u1d0d\3\2\2\2\u1d13\u1d16\3")
        buf.write("\2\2\2\u1d14\u1d12\3\2\2\2\u1d14\u1d15\3\2\2\2\u1d15\u1d17")
        buf.write("\3\2\2\2\u1d16\u1d14\3\2\2\2\u1d17\u1d1a\7\u0288\2\2\u1d18")
        buf.write("\u1d19\7\u0280\2\2\u1d19\u1d1b\5\u0424\u0213\2\u1d1a\u1d18")
        buf.write("\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d93\3\2\2\2\u1d1c")
        buf.write("\u1d1d\7\u024f\2\2\u1d1d\u1d1e\7\u0287\2\2\u1d1e\u1d20")
        buf.write("\5\u0346\u01a4\2\u1d1f\u1d21\5\u039a\u01ce\2\u1d20\u1d1f")
        buf.write("\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21\u1d22\3\2\2\2\u1d22")
        buf.write("\u1d23\7\u0288\2\2\u1d23\u1d93\3\2\2\2\u1d24\u1d25\7\u0253")
        buf.write("\2\2\u1d25\u1d26\7\u0287\2\2\u1d26\u1d27\t^\2\2\u1d27")
        buf.write("\u1d29\5\u0356\u01ac\2\u1d28\u1d2a\7\u023e\2\2\u1d29\u1d28")
        buf.write("\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b")
        buf.write("\u1d2e\7\u0288\2\2\u1d2c\u1d2d\7\u0280\2\2\u1d2d\u1d2f")
        buf.write("\5\u0424\u0213\2\u1d2e\u1d2c\3\2\2\2\u1d2e\u1d2f\3\2\2")
        buf.write("\2\u1d2f\u1d93\3\2\2\2\u1d30\u1d31\7\u0254\2\2\u1d31\u1d36")
        buf.write("\7\u0287\2\2\u1d32\u1d33\7\u0133\2\2\u1d33\u1d37\5\u0430")
        buf.write("\u0219\2\u1d34\u1d35\7\u00a4\2\2\u1d35\u1d37\5\u0356\u01ac")
        buf.write("\2\u1d36\u1d32\3\2\2\2\u1d36\u1d34\3\2\2\2\u1d37\u1d3a")
        buf.write("\3\2\2\2\u1d38\u1d39\7\u028d\2\2\u1d39\u1d3b\5\u0356\u01ac")
        buf.write("\2\u1d3a\u1d38\3\2\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b\u1d3c")
        buf.write("\3\2\2\2\u1d3c\u1d3f\7\u0288\2\2\u1d3d\u1d3e\7\u0280\2")
        buf.write("\2\u1d3e\u1d40\5\u0424\u0213\2\u1d3f\u1d3d\3\2\2\2\u1d3f")
        buf.write("\u1d40\3\2\2\2\u1d40\u1d93\3\2\2\2\u1d41\u1d42\7\u0255")
        buf.write("\2\2\u1d42\u1d43\7\u0287\2\2\u1d43\u1d45\5\u0356\u01ac")
        buf.write("\2\u1d44\u1d46\5\u039a\u01ce\2\u1d45\u1d44\3\2\2\2\u1d45")
        buf.write("\u1d46\3\2\2\2\u1d46\u1d47\3\2\2\2\u1d47\u1d48\7\u01b3")
        buf.write("\2\2\u1d48\u1d4c\7]\2\2\u1d49\u1d4a\7\u0157\2\2\u1d4a")
        buf.write("\u1d4b\7\u0164\2\2\u1d4b\u1d4d\7\u009a\2\2\u1d4c\u1d49")
        buf.write("\3\2\2\2\u1d4c\u1d4d\3\2\2\2\u1d4d\u1d4e\3\2\2\2\u1d4e")
        buf.write("\u1d51\7\u0288\2\2\u1d4f\u1d50\7\u0280\2\2\u1d50\u1d52")
        buf.write("\5\u0424\u0213\2\u1d51\u1d4f\3\2\2\2\u1d51\u1d52\3\2\2")
        buf.write("\2\u1d52\u1d93\3\2\2\2\u1d53\u1d54\7\u0256\2\2\u1d54\u1d55")
        buf.write("\7\u0287\2\2\u1d55\u1d58\5\u0356\u01ac\2\u1d56\u1d57\7")
        buf.write("\u028d\2\2\u1d57\u1d59\5\u03a6\u01d4\2\u1d58\u1d56\3\2")
        buf.write("\2\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5c\3\2\2\2\u1d5a\u1d5b")
        buf.write("\7\u028d\2\2\u1d5b\u1d5d\5\u03a8\u01d5\2\u1d5c\u1d5a\3")
        buf.write("\2\2\2\u1d5c\u1d5d\3\2\2\2\u1d5d\u1d5e\3\2\2\2\u1d5e\u1d61")
        buf.write("\7\u0288\2\2\u1d5f\u1d60\7\u0280\2\2\u1d60\u1d62\5\u0424")
        buf.write("\u0213\2\u1d61\u1d5f\3\2\2\2\u1d61\u1d62\3\2\2\2\u1d62")
        buf.write("\u1d93\3\2\2\2\u1d63\u1d64\7\u0258\2\2\u1d64\u1d65\7\u0287")
        buf.write("\2\2\u1d65\u1d66\t^\2\2\u1d66\u1d69\5\u0356\u01ac\2\u1d67")
        buf.write("\u1d68\7\26\2\2\u1d68\u1d6a\5\u041a\u020e\2\u1d69\u1d67")
        buf.write("\3\2\2\2\u1d69\u1d6a\3\2\2\2\u1d6a\u1d6c\3\2\2\2\u1d6b")
        buf.write("\u1d6d\5\u03aa\u01d6\2\u1d6c\u1d6b\3\2\2\2\u1d6c\u1d6d")
        buf.write("\3\2\2\2\u1d6d\u1d6f\3\2\2\2\u1d6e\u1d70\5\u03ac\u01d7")
        buf.write("\2\u1d6f\u1d6e\3\2\2\2\u1d6f\u1d70\3\2\2\2\u1d70\u1d72")
        buf.write("\3\2\2\2\u1d71\u1d73\5\u03ae\u01d8\2\u1d72\u1d71\3\2\2")
        buf.write("\2\u1d72\u1d73\3\2\2\2\u1d73\u1d76\3\2\2\2\u1d74\u1d75")
        buf.write("\t_\2\2\u1d75\u1d77\7\u0083\2\2\u1d76\u1d74\3\2\2\2\u1d76")
        buf.write("\u1d77\3\2\2\2\u1d77\u1d78\3\2\2\2\u1d78\u1d7b\7\u0288")
        buf.write("\2\2\u1d79\u1d7a\7\u0280\2\2\u1d7a\u1d7c\5\u0424\u0213")
        buf.write("\2\u1d7b\u1d79\3\2\2\2\u1d7b\u1d7c\3\2\2\2\u1d7c\u1d93")
        buf.write("\3\2\2\2\u1d7d\u1d7e\7\u0259\2\2\u1d7e\u1d80\7\u0287\2")
        buf.write("\2\u1d7f\u1d81\5\u039e\u01d0\2\u1d80\u1d7f\3\2\2\2\u1d80")
        buf.write("\u1d81\3\2\2\2\u1d81\u1d82\3\2\2\2\u1d82\u1d84\5\u0356")
        buf.write("\u01ac\2\u1d83\u1d85\5\u039a\u01ce\2\u1d84\u1d83\3\2\2")
        buf.write("\2\u1d84\u1d85\3\2\2\2\u1d85\u1d8b\3\2\2\2\u1d86\u1d87")
        buf.write("\7K\2\2\u1d87\u1d88\5\u03a0\u01d1\2\u1d88\u1d89\7\u028d")
        buf.write("\2\2\u1d89\u1d8a\5\u03a0\u01d1\2\u1d8a\u1d8c\3\2\2\2\u1d8b")
        buf.write("\u1d86\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\3\2\2\2")
        buf.write("\u1d8d\u1d90\7\u0288\2\2\u1d8e\u1d8f\7\u0280\2\2\u1d8f")
        buf.write("\u1d91\5\u0424\u0213\2\u1d90\u1d8e\3\2\2\2\u1d90\u1d91")
        buf.write("\3\2\2\2\u1d91\u1d93\3\2\2\2\u1d92\u1c56\3\2\2\2\u1d92")
        buf.write("\u1c58\3\2\2\2\u1d92\u1c5d\3\2\2\2\u1d92\u1c6e\3\2\2\2")
        buf.write("\u1d92\u1c73\3\2\2\2\u1d92\u1c7a\3\2\2\2\u1d92\u1c85\3")
        buf.write("\2\2\2\u1d92\u1c8c\3\2\2\2\u1d92\u1c94\3\2\2\2\u1d92\u1c9e")
        buf.write("\3\2\2\2\u1d92\u1ca5\3\2\2\2\u1d92\u1cb7\3\2\2\2\u1d92")
        buf.write("\u1cbe\3\2\2\2\u1d92\u1cce\3\2\2\2\u1d92\u1cd8\3\2\2\2")
        buf.write("\u1d92\u1ce6\3\2\2\2\u1d92\u1cf1\3\2\2\2\u1d92\u1d00\3")
        buf.write("\2\2\2\u1d92\u1d1c\3\2\2\2\u1d92\u1d24\3\2\2\2\u1d92\u1d30")
        buf.write("\3\2\2\2\u1d92\u1d41\3\2\2\2\u1d92\u1d53\3\2\2\2\u1d92")
        buf.write("\u1d63\3\2\2\2\u1d92\u1d7d\3\2\2\2\u1d93\u1d99\3\2\2\2")
        buf.write("\u1d94\u1d95\f\30\2\2\u1d95\u1d96\7\5\2\2\u1d96\u1d98")
        buf.write("\5\u041a\u020e\2\u1d97\u1d94\3\2\2\2\u1d98\u1d9b\3\2\2")
        buf.write("\2\u1d99\u1d97\3\2\2\2\u1d99\u1d9a\3\2\2\2\u1d9a\u037f")
        buf.write("\3\2\2\2\u1d9b\u1d99\3\2\2\2\u1d9c\u1d9d\5\u0382\u01c2")
        buf.write("\2\u1d9d\u1d9f\5\u0412\u020a\2\u1d9e\u1da0\5\u0388\u01c5")
        buf.write("\2\u1d9f\u1d9e\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0\u1daf")
        buf.write("\3\2\2\2\u1da1\u1da2\7d\2\2\u1da2\u1da8\7\u0287\2\2\u1da3")
        buf.write("\u1da9\5\u040c\u0207\2\u1da4\u1da6\tD\2\2\u1da5\u1da4")
        buf.write("\3\2\2\2\u1da5\u1da6\3\2\2\2\u1da6\u1da7\3\2\2\2\u1da7")
        buf.write("\u1da9\5\u0356\u01ac\2\u1da8\u1da3\3\2\2\2\u1da8\u1da5")
        buf.write("\3\2\2\2\u1da9\u1daa\3\2\2\2\u1daa\u1dac\7\u0288\2\2\u1dab")
        buf.write("\u1dad\5\u0388\u01c5\2\u1dac\u1dab\3\2\2\2\u1dac\u1dad")
        buf.write("\3\2\2\2\u1dad\u1daf\3\2\2\2\u1dae\u1d9c\3\2\2\2\u1dae")
        buf.write("\u1da1\3\2\2\2\u1daf\u0381\3\2\2\2\u1db0\u1db1\t`\2\2")
        buf.write("\u1db1\u0383\3\2\2\2\u1db2\u1db3\ta\2\2\u1db3\u0385\3")
        buf.write("\2\2\2\u1db4\u1db5\tb\2\2\u1db5\u0387\3\2\2\2\u1db6\u1db7")
        buf.write("\7\u0170\2\2\u1db7\u1db9\7\u0287\2\2\u1db8\u1dba\5\u02ae")
        buf.write("\u0158\2\u1db9\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba")
        buf.write("\u1dbf\3\2\2\2\u1dbb\u1dbd\5\u02f2\u017a\2\u1dbc\u1dbe")
        buf.write("\5\u038a\u01c6\2\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe\3\2\2")
        buf.write("\2\u1dbe\u1dc0\3\2\2\2\u1dbf\u1dbb\3\2\2\2\u1dbf\u1dc0")
        buf.write("\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1\u1dc2\7\u0288\2\2\u1dc2")
        buf.write("\u0389\3\2\2\2\u1dc3\u1dca\5\u038c\u01c7\2\u1dc4\u1dc5")
        buf.write("\7%\2\2\u1dc5\u1dc6\5\u038e\u01c8\2\u1dc6\u1dc7\7\21\2")
        buf.write("\2\u1dc7\u1dc8\5\u038e\u01c8\2\u1dc8\u1dcb\3\2\2\2\u1dc9")
        buf.write("\u1dcb\5\u038e\u01c8\2\u1dca\u1dc4\3\2\2\2\u1dca\u1dc9")
        buf.write("\3\2\2\2\u1dcb\u038b\3\2\2\2\u1dcc\u1dcd\tc\2\2\u1dcd")
        buf.write("\u038d\3\2\2\2\u1dce\u1dcf\7\u021d\2\2\u1dcf\u1dd6\7\u018c")
        buf.write("\2\2\u1dd0\u1dd1\7k\2\2\u1dd1\u1dd6\7\u01bc\2\2\u1dd2")
        buf.write("\u1dd3\5\u0356\u01ac\2\u1dd3\u1dd4\td\2\2\u1dd4\u1dd6")
        buf.write("\3\2\2\2\u1dd5\u1dce\3\2\2\2\u1dd5\u1dd0\3\2\2\2\u1dd5")
        buf.write("\u1dd2\3\2\2\2\u1dd6\u038f\3\2\2\2\u1dd7\u1de1\7\u022c")
        buf.write("\2\2\u1dd8\u1de2\5\u040c\u0207\2\u1dd9\u1dde\5\u0392\u01ca")
        buf.write("\2\u1dda\u1ddb\7\u028d\2\2\u1ddb\u1ddd\5\u0392\u01ca\2")
        buf.write("\u1ddc\u1dda\3\2\2\2\u1ddd\u1de0\3\2\2\2\u1dde\u1ddc\3")
        buf.write("\2\2\2\u1dde\u1ddf\3\2\2\2\u1ddf\u1de2\3\2\2\2\u1de0\u1dde")
        buf.write("\3\2\2\2\u1de1\u1dd8\3\2\2\2\u1de1\u1dd9\3\2\2\2\u1de2")
        buf.write("\u0391\3\2\2\2\u1de3\u1de5\7\u00db\2\2\u1de4\u1de6\7\u016e")
        buf.write("\2\2\u1de5\u1de4\3\2\2\2\u1de5\u1de6\3\2\2\2\u1de6\u1de9")
        buf.write("\3\2\2\2\u1de7\u1de9\7\u016e\2\2\u1de8\u1de3\3\2\2\2\u1de8")
        buf.write("\u1de7\3\2\2\2\u1de8\u1de9\3\2\2\2\u1de9\u1dea\3\2\2\2")
        buf.write("\u1dea\u1dec\5\u029c\u014f\2\u1deb\u1ded\5\u03be\u01e0")
        buf.write("\2\u1dec\u1deb\3\2\2\2\u1dec\u1ded\3\2\2\2\u1ded\u0393")
        buf.write("\3\2\2\2\u1dee\u1def\7\u016b\2\2\u1def\u1df0\7\65\2\2")
        buf.write("\u1df0\u1df1\5\u0356\u01ac\2\u1df1\u0395\3\2\2\2\u1df2")
        buf.write("\u1df3\7\u0245\2\2\u1df3\u1df4\7\u00cd\2\2\u1df4\u1df5")
        buf.write("\7\u0287\2\2\u1df5\u1df6\5\u02f2\u017a\2\u1df6\u1df7\7")
        buf.write("\u0288\2\2\u1df7\u1dfa\3\2\2\2\u1df8\u1dfa\5\u0388\u01c5")
        buf.write("\2\u1df9\u1df2\3\2\2\2\u1df9\u1df8\3\2\2\2\u1dfa\u0397")
        buf.write("\3\2\2\2\u1dfb\u1e0d\7c\2\2\u1dfc\u1dfe\7\u012e\2\2\u1dfd")
        buf.write("\u1dff\7\35\2\2\u1dfe\u1dfd\3\2\2\2\u1dfe\u1dff\3\2\2")
        buf.write("\2\u1dff\u1e0e\3\2\2\2\u1e00\u1e01\7\u0287\2\2\u1e01\u1e06")
        buf.write("\5\u03cc\u01e7\2\u1e02\u1e03\7\u028d\2\2\u1e03\u1e05\5")
        buf.write("\u03cc\u01e7\2\u1e04\u1e02\3\2\2\2\u1e05\u1e08\3\2\2\2")
        buf.write("\u1e06\u1e04\3\2\2\2\u1e06\u1e07\3\2\2\2\u1e07\u1e09\3")
        buf.write("\2\2\2\u1e08\u1e06\3\2\2\2\u1e09\u1e0a\7\u0288\2\2\u1e0a")
        buf.write("\u1e0b\7\u022f\2\2\u1e0b\u1e0c\5\u0342\u01a2\2\u1e0c\u1e0e")
        buf.write("\3\2\2\2\u1e0d\u1dfc\3\2\2\2\u1e0d\u1e00\3\2\2\2\u1e0e")
        buf.write("\u0399\3\2\2\2\u1e0f\u1e12\7\u0179\2\2\u1e10\u1e11\7\65")
        buf.write("\2\2\u1e11\u1e13\7\u022e\2\2\u1e12\u1e10\3\2\2\2\u1e12")
        buf.write("\u1e13\3\2\2\2\u1e13\u1e14\3\2\2\2\u1e14\u1e16\5\u0346")
        buf.write("\u01a4\2\u1e15\u1e17\5\u03be\u01e0\2\u1e16\u1e15\3\2\2")
        buf.write("\2\u1e16\u1e17\3\2\2\2\u1e17\u1e18\3\2\2\2\u1e18\u1e19")
        buf.write("\7\u028d\2\2\u1e19\u1e1b\5\u0346\u01a4\2\u1e1a\u1e1c\5")
        buf.write("\u03be\u01e0\2\u1e1b\u1e1a\3\2\2\2\u1e1b\u1e1c\3\2\2\2")
        buf.write("\u1e1c\u039b\3\2\2\2\u1e1d\u1e1e\7\u024b\2\2\u1e1e\u1e20")
        buf.write("\7\u0287\2\2\u1e1f\u1e21\t\\\2\2\u1e20\u1e1f\3\2\2\2\u1e20")
        buf.write("\u1e21\3\2\2\2\u1e21\u1e23\3\2\2\2\u1e22\u1e24\te\2\2")
        buf.write("\u1e23\u1e22\3\2\2\2\u1e23\u1e24\3\2\2\2\u1e24\u1e25\3")
        buf.write("\2\2\2\u1e25\u1e2a\5\u03a4\u01d3\2\u1e26\u1e27\7\u028d")
        buf.write("\2\2\u1e27\u1e29\5\u03a4\u01d3\2\u1e28\u1e26\3\2\2\2\u1e29")
        buf.write("\u1e2c\3\2\2\2\u1e2a\u1e28\3\2\2\2\u1e2a\u1e2b\3\2\2\2")
        buf.write("\u1e2b\u1e2d\3\2\2\2\u1e2c\u1e2a\3\2\2\2\u1e2d\u1e2e\7")
        buf.write("\u0288\2\2\u1e2e\u039d\3\2\2\2\u1e2f\u1e30\7\u0252\2\2")
        buf.write("\u1e30\u1e34\7\u0287\2\2\u1e31\u1e32\5\u0356\u01ac\2\u1e32")
        buf.write("\u1e33\5\u03be\u01e0\2\u1e33\u1e35\3\2\2\2\u1e34\u1e31")
        buf.write("\3\2\2\2\u1e34\u1e35\3\2\2\2\u1e35\u1e3c\3\2\2\2\u1e36")
        buf.write("\u1e37\7\u028d\2\2\u1e37\u1e38\5\u0356\u01ac\2\u1e38\u1e39")
        buf.write("\5\u03be\u01e0\2\u1e39\u1e3b\3\2\2\2\u1e3a\u1e36\3\2\2")
        buf.write("\2\u1e3b\u1e3e\3\2\2\2\u1e3c\u1e3a\3\2\2\2\u1e3c\u1e3d")
        buf.write("\3\2\2\2\u1e3d\u1e40\3\2\2\2\u1e3e\u1e3c\3\2\2\2\u1e3f")
        buf.write("\u1e41\5\u03a2\u01d2\2\u1e40\u1e3f\3\2\2\2\u1e40\u1e41")
        buf.write("\3\2\2\2\u1e41\u1e42\3\2\2\2\u1e42\u1e43\7\u0288\2\2\u1e43")
        buf.write("\u039f\3\2\2\2\u1e44\u1e4f\5\u03ca\u01e6\2\u1e45\u1e46")
        buf.write("\7\u00bf\2\2\u1e46\u1e50\7\u016c\2\2\u1e47\u1e4a\5\u041a")
        buf.write("\u020e\2\u1e48\u1e49\7\u017a\2\2\u1e49\u1e4b\5\u0356\u01ac")
        buf.write("\2\u1e4a\u1e48\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e4d")
        buf.write("\3\2\2\2\u1e4c\u1e4e\5\u03a2\u01d2\2\u1e4d\u1e4c\3\2\2")
        buf.write("\2\u1e4d\u1e4e\3\2\2\2\u1e4e\u1e50\3\2\2\2\u1e4f\u1e45")
        buf.write("\3\2\2\2\u1e4f\u1e47\3\2\2\2\u1e50\u03a1\3\2\2\2\u1e51")
        buf.write("\u1e52\7\u0082\2\2\u1e52\u1e53\5\u0356\u01ac\2\u1e53\u03a3")
        buf.write("\3\2\2\2\u1e54\u1e5b\5\u0346\u01a4\2\u1e55\u1e59\7\26")
        buf.write("\2\2\u1e56\u1e5a\5\u0432\u021a\2\u1e57\u1e58\7\u00a4\2")
        buf.write("\2\u1e58\u1e5a\5\u0356\u01ac\2\u1e59\u1e56\3\2\2\2\u1e59")
        buf.write("\u1e57\3\2\2\2\u1e5a\u1e5c\3\2\2\2\u1e5b\u1e55\3\2\2\2")
        buf.write("\u1e5b\u1e5c\3\2\2\2\u1e5c\u03a5\3\2\2\2\u1e5d\u1e61\7")
        buf.write("\u0237\2\2\u1e5e\u1e5f\7\u013f\2\2\u1e5f\u1e62\7\u022e")
        buf.write("\2\2\u1e60\u1e62\5\u0346\u01a4\2\u1e61\u1e5e\3\2\2\2\u1e61")
        buf.write("\u1e60\3\2\2\2\u1e62\u03a7\3\2\2\2\u1e63\u1e69\7\u01eb")
        buf.write("\2\2\u1e64\u1e6a\7\u025c\2\2\u1e65\u1e67\7\u013f\2\2\u1e66")
        buf.write("\u1e68\7\u022e\2\2\u1e67\u1e66\3\2\2\2\u1e67\u1e68\3\2")
        buf.write("\2\2\u1e68\u1e6a\3\2\2\2\u1e69\u1e64\3\2\2\2\u1e69\u1e65")
        buf.write("\3\2\2\2\u1e6a\u03a9\3\2\2\2\u1e6b\u1e6c\7\u009c\2\2\u1e6c")
        buf.write("\u1e6d\5\u0356\u01ac\2\u1e6d\u03ab\3\2\2\2\u1e6e\u1e6f")
        buf.write("\7\u0237\2\2\u1e6f\u1e70\5\u0356\u01ac\2\u1e70\u03ad\3")
        buf.write("\2\2\2\u1e71\u1e72\7\u013f\2\2\u1e72\u1e7a\7\u00df\2\2")
        buf.write("\u1e73\u1e77\7\u00df\2\2\u1e74\u1e75\7\u01e1\2\2\u1e75")
        buf.write("\u1e76\7\u029e\2\2\u1e76\u1e78\5\u0356\u01ac\2\u1e77\u1e74")
        buf.write("\3\2\2\2\u1e77\u1e78\3\2\2\2\u1e78\u1e7a\3\2\2\2\u1e79")
        buf.write("\u1e71\3\2\2\2\u1e79\u1e73\3\2\2\2\u1e7a\u03af\3\2\2\2")
        buf.write("\u1e7b\u1e82\7\u028e\2\2\u1e7c\u1e82\5\u03b2\u01da\2\u1e7d")
        buf.write("\u1e82\5\u03b6\u01dc\2\u1e7e\u1e82\5\u03b8\u01dd\2\u1e7f")
        buf.write("\u1e82\5\u03b4\u01db\2\u1e80\u1e82\5\u03ba\u01de\2\u1e81")
        buf.write("\u1e7b\3\2\2\2\u1e81\u1e7c\3\2\2\2\u1e81\u1e7d\3\2\2\2")
        buf.write("\u1e81\u1e7e\3\2\2\2\u1e81\u1e7f\3\2\2\2\u1e81\u1e80\3")
        buf.write("\2\2\2\u1e82\u03b1\3\2\2\2\u1e83\u1e84\7\u0240\2\2\u1e84")
        buf.write("\u1e8a\tf\2\2\u1e85\u1e86\7\u00ad\2\2\u1e86\u1e87\tg\2")
        buf.write("\2\u1e87\u1e8b\th\2\2\u1e88\u1e89\7_\2\2\u1e89\u1e8b\t")
        buf.write("i\2\2\u1e8a\u1e85\3\2\2\2\u1e8a\u1e88\3\2\2\2\u1e8b\u03b3")
        buf.write("\3\2\2\2\u1e8c\u1e8d\7\u01d6\2\2\u1e8d\u1e93\5\u043e\u0220")
        buf.write("\2\u1e8e\u1e94\7\u0283\2\2\u1e8f\u1e94\7\u0164\2\2\u1e90")
        buf.write("\u1e94\7\u015f\2\2\u1e91\u1e94\5\u042a\u0216\2\u1e92\u1e94")
        buf.write("\5\u043e\u0220\2\u1e93\u1e8e\3\2\2\2\u1e93\u1e8f\3\2\2")
        buf.write("\2\u1e93\u1e90\3\2\2\2\u1e93\u1e91\3\2\2\2\u1e93\u1e92")
        buf.write("\3\2\2\2\u1e94\u03b5\3\2\2\2\u1e95\u1e96\7\u00ad\2\2\u1e96")
        buf.write("\u03b7\3\2\2\2\u1e97\u1e98\7\u02a5\2\2\u1e98\u03b9\3\2")
        buf.write("\2\2\u1e99\u1e9a\7\u01da\2\2\u1e9a\u1e9e\7\u00a1\2\2\u1e9b")
        buf.write("\u1e9c\7\u01da\2\2\u1e9c\u1e9e\7\u00a2\2\2\u1e9d\u1e99")
        buf.write("\3\2\2\2\u1e9d\u1e9b\3\2\2\2\u1e9e\u03bb\3\2\2\2\u1e9f")
        buf.write("\u1ea1\tj\2\2\u1ea0\u1ea2\7\u00bf\2\2\u1ea1\u1ea0\3\2")
        buf.write("\2\2\u1ea1\u1ea2\3\2\2\2\u1ea2\u1ea3\3\2\2\2\u1ea3\u1ea4")
        buf.write("\5\u0342\u01a2\2\u1ea4\u03bd\3\2\2\2\u1ea5\u1ea7\7\26")
        buf.write("\2\2\u1ea6\u1ea5\3\2\2\2\u1ea6\u1ea7\3\2\2\2\u1ea7\u1eaa")
        buf.write("\3\2\2\2\u1ea8\u1eab\5\u0430\u0219\2\u1ea9\u1eab\5\u03c2")
        buf.write("\u01e2\2\u1eaa\u1ea8\3\2\2\2\u1eaa\u1ea9\3\2\2\2\u1eab")
        buf.write("\u1eae\3\2\2\2\u1eac\u1eae\7\26\2\2\u1ead\u1ea6\3\2\2")
        buf.write("\2\u1ead\u1eac\3\2\2\2\u1eae\u03bf\3\2\2\2\u1eaf\u1eb1")
        buf.write("\7\26\2\2\u1eb0\u1eaf\3\2\2\2\u1eb0\u1eb1\3\2\2\2\u1eb1")
        buf.write("\u1eb4\3\2\2\2\u1eb2\u1eb5\5\u0430\u0219\2\u1eb3\u1eb5")
        buf.write("\5\u03c2\u01e2\2\u1eb4\u1eb2\3\2\2\2\u1eb4\u1eb3\3\2\2")
        buf.write("\2\u1eb5\u03c1\3\2\2\2\u1eb6\u1eb7\5\u042e\u0218\2\u1eb7")
        buf.write("\u03c3\3\2\2\2\u1eb8\u1ebb\7\u0241\2\2\u1eb9\u1ebc\5\u03c6")
        buf.write("\u01e4\2\u1eba\u1ebc\5\u0346\u01a4\2\u1ebb\u1eb9\3\2\2")
        buf.write("\2\u1ebb\u1eba\3\2\2\2\u1ebc\u03c5\3\2\2\2\u1ebd\u1ebe")
        buf.write("\7k\2\2\u1ebe\u1ebf\7\u015e\2\2\u1ebf\u1ec0\5\u03fc\u01ff")
        buf.write("\2\u1ec0\u03c7\3\2\2\2\u1ec1\u1ec2\7\u00f4\2\2\u1ec2\u1ec7")
        buf.write("\5\u03f8\u01fd\2\u1ec3\u1ec4\7\u028d\2\2\u1ec4\u1ec6\5")
        buf.write("\u03f8\u01fd\2\u1ec5\u1ec3\3\2\2\2\u1ec6\u1ec9\3\2\2\2")
        buf.write("\u1ec7\u1ec5\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u1ed6\3")
        buf.write("\2\2\2\u1ec9\u1ec7\3\2\2\2\u1eca\u1ecb\7\64\2\2\u1ecb")
        buf.write("\u1ecc\7I\2\2\u1ecc\u1ecd\7\u00f4\2\2\u1ecd\u1ed2\5\u03f8")
        buf.write("\u01fd\2\u1ece\u1ecf\7\u028d\2\2\u1ecf\u1ed1\5\u03f8\u01fd")
        buf.write("\2\u1ed0\u1ece\3\2\2\2\u1ed1\u1ed4\3\2\2\2\u1ed2\u1ed0")
        buf.write("\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3\u1ed6\3\2\2\2\u1ed4")
        buf.write("\u1ed2\3\2\2\2\u1ed5\u1ec1\3\2\2\2\u1ed5\u1eca\3\2\2\2")
        buf.write("\u1ed6\u03c9\3\2\2\2\u1ed7\u1eda\5\u0430\u0219\2\u1ed8")
        buf.write("\u1eda\5\u042e\u0218\2\u1ed9\u1ed7\3\2\2\2\u1ed9\u1ed8")
        buf.write("\3\2\2\2\u1eda\u03cb\3\2\2\2\u1edb\u1edc\5\u0430\u0219")
        buf.write("\2\u1edc\u03cd\3\2\2\2\u1edd\u1ede\5\u0430\u0219\2\u1ede")
        buf.write("\u03cf\3\2\2\2\u1edf\u1ee0\5\u0430\u0219\2\u1ee0\u03d1")
        buf.write("\3\2\2\2\u1ee1\u1ee2\5\u0430\u0219\2\u1ee2\u03d3\3\2\2")
        buf.write("\2\u1ee3\u1ee4\5\u0430\u0219\2\u1ee4\u03d5\3\2\2\2\u1ee5")
        buf.write("\u1ee6\5\u0430\u0219\2\u1ee6\u03d7\3\2\2\2\u1ee7\u1eec")
        buf.write("\5\u0430\u0219\2\u1ee8\u1ee9\7\u0280\2\2\u1ee9\u1eeb\5")
        buf.write("\u0432\u021a\2\u1eea\u1ee8\3\2\2\2\u1eeb\u1eee\3\2\2\2")
        buf.write("\u1eec\u1eea\3\2\2\2\u1eec\u1eed\3\2\2\2\u1eed\u1ef1\3")
        buf.write("\2\2\2\u1eee\u1eec\3\2\2\2\u1eef\u1ef0\7\u028f\2\2\u1ef0")
        buf.write("\u1ef2\5\u0402\u0202\2\u1ef1\u1eef\3\2\2\2\u1ef1\u1ef2")
        buf.write("\3\2\2\2\u1ef2\u03d9\3\2\2\2\u1ef3\u1ef4\5\u0430\u0219")
        buf.write("\2\u1ef4\u03db\3\2\2\2\u1ef5\u1ef8\5\u0430\u0219\2\u1ef6")
        buf.write("\u1ef7\7\u0280\2\2\u1ef7\u1ef9\5\u0432\u021a\2\u1ef8\u1ef6")
        buf.write("\3\2\2\2\u1ef8\u1ef9\3\2\2\2\u1ef9\u03dd\3\2\2\2\u1efa")
        buf.write("\u1efb\5\u0430\u0219\2\u1efb\u03df\3\2\2\2\u1efc\u1efd")
        buf.write("\5\u0430\u0219\2\u1efd\u03e1\3\2\2\2\u1efe\u1eff\5\u0430")
        buf.write("\u0219\2\u1eff\u03e3\3\2\2\2\u1f00\u1f05\5\u0430\u0219")
        buf.write("\2\u1f01\u1f02\7\u0280\2\2\u1f02\u1f04\5\u0432\u021a\2")
        buf.write("\u1f03\u1f01\3\2\2\2\u1f04\u1f07\3\2\2\2\u1f05\u1f03\3")
        buf.write("\2\2\2\u1f05\u1f06\3\2\2\2\u1f06\u03e5\3\2\2\2\u1f07\u1f05")
        buf.write("\3\2\2\2\u1f08\u1f09\5\u0430\u0219\2\u1f09\u03e7\3\2\2")
        buf.write("\2\u1f0a\u1f0f\5\u0430\u0219\2\u1f0b\u1f0c\7\u0280\2\2")
        buf.write("\u1f0c\u1f0e\5\u0432\u021a\2\u1f0d\u1f0b\3\2\2\2\u1f0e")
        buf.write("\u1f11\3\2\2\2\u1f0f\u1f0d\3\2\2\2\u1f0f\u1f10\3\2\2\2")
        buf.write("\u1f10\u1f14\3\2\2\2\u1f11\u1f0f\3\2\2\2\u1f12\u1f13\7")
        buf.write("\u028f\2\2\u1f13\u1f15\5\u0402\u0202\2\u1f14\u1f12\3\2")
        buf.write("\2\2\u1f14\u1f15\3\2\2\2\u1f15\u03e9\3\2\2\2\u1f16\u1f17")
        buf.write("\5\u0432\u021a\2\u1f17\u03eb\3\2\2\2\u1f18\u1f1d\5\u0432")
        buf.write("\u021a\2\u1f19\u1f1a\7\u0280\2\2\u1f1a\u1f1c\5\u0432\u021a")
        buf.write("\2\u1f1b\u1f19\3\2\2\2\u1f1c\u1f1f\3\2\2\2\u1f1d\u1f1b")
        buf.write("\3\2\2\2\u1f1d\u1f1e\3\2\2\2\u1f1e\u03ed\3\2\2\2\u1f1f")
        buf.write("\u1f1d\3\2\2\2\u1f20\u1f25\5\u0432\u021a\2\u1f21\u1f22")
        buf.write("\7\u0280\2\2\u1f22\u1f24\5\u0432\u021a\2\u1f23\u1f21\3")
        buf.write("\2\2\2\u1f24\u1f27\3\2\2\2\u1f25\u1f23\3\2\2\2\u1f25\u1f26")
        buf.write("\3\2\2\2\u1f26\u03ef\3\2\2\2\u1f27\u1f25\3\2\2\2\u1f28")
        buf.write("\u1f2d\5\u0430\u0219\2\u1f29\u1f2a\7\u0280\2\2\u1f2a\u1f2c")
        buf.write("\5\u0432\u021a\2\u1f2b\u1f29\3\2\2\2\u1f2c\u1f2f\3\2\2")
        buf.write("\2\u1f2d\u1f2b\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e\u03f1")
        buf.write("\3\2\2\2\u1f2f\u1f2d\3\2\2\2\u1f30\u1f33\5\u0430\u0219")
        buf.write("\2\u1f31\u1f32\7\u0280\2\2\u1f32\u1f34\5\u0432\u021a\2")
        buf.write("\u1f33\u1f31\3\2\2\2\u1f33\u1f34\3\2\2\2\u1f34\u03f3\3")
        buf.write("\2\2\2\u1f35\u1f38\5\u0430\u0219\2\u1f36\u1f37\7\u0280")
        buf.write("\2\2\u1f37\u1f39\5\u0432\u021a\2\u1f38\u1f36\3\2\2\2\u1f38")
        buf.write("\u1f39\3\2\2\2\u1f39\u03f5\3\2\2\2\u1f3a\u1f3d\5\u0430")
        buf.write("\u0219\2\u1f3b\u1f3c\7\u0280\2\2\u1f3c\u1f3e\5\u0432\u021a")
        buf.write("\2\u1f3d\u1f3b\3\2\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u03f7")
        buf.write("\3\2\2\2\u1f3f\u1f42\5\u040a\u0206\2\u1f40\u1f42\5\u0422")
        buf.write("\u0212\2\u1f41\u1f3f\3\2\2\2\u1f41\u1f40\3\2\2\2\u1f42")
        buf.write("\u03f9\3\2\2\2\u1f43\u1f44\5\u0430\u0219\2\u1f44\u03fb")
        buf.write("\3\2\2\2\u1f45\u1f48\5\u0430\u0219\2\u1f46\u1f48\5\u0422")
        buf.write("\u0212\2\u1f47\u1f45\3\2\2\2\u1f47\u1f46\3\2\2\2\u1f48")
        buf.write("\u03fd\3\2\2\2\u1f49\u1f4c\5\u0430\u0219\2\u1f4a\u1f4c")
        buf.write("\5\u0422\u0212\2\u1f4b\u1f49\3\2\2\2\u1f4b\u1f4a\3\2\2")
        buf.write("\2\u1f4c\u03ff\3\2\2\2\u1f4d\u1f50\5\u0430\u0219\2\u1f4e")
        buf.write("\u1f4f\7\u0280\2\2\u1f4f\u1f51\5\u0432\u021a\2\u1f50\u1f4e")
        buf.write("\3\2\2\2\u1f50\u1f51\3\2\2\2\u1f51\u0401\3\2\2\2\u1f52")
        buf.write("\u1f53\5\u0430\u0219\2\u1f53\u0403\3\2\2\2\u1f54\u1f59")
        buf.write("\5\u0430\u0219\2\u1f55\u1f56\7\u0280\2\2\u1f56\u1f58\5")
        buf.write("\u0432\u021a\2\u1f57\u1f55\3\2\2\2\u1f58\u1f5b\3\2\2\2")
        buf.write("\u1f59\u1f57\3\2\2\2\u1f59\u1f5a\3\2\2\2\u1f5a\u0405\3")
        buf.write("\2\2\2\u1f5b\u1f59\3\2\2\2\u1f5c\u1f5d\5\u0430\u0219\2")
        buf.write("\u1f5d\u0407\3\2\2\2\u1f5e\u1f62\5\u040a\u0206\2\u1f5f")
        buf.write("\u1f60\7\u028f\2\2\u1f60\u1f63\5\u0402\u0202\2\u1f61\u1f63")
        buf.write("\5\u03bc\u01df\2\u1f62\u1f5f\3\2\2\2\u1f62\u1f61\3\2\2")
        buf.write("\2\u1f62\u1f63\3\2\2\2\u1f63\u0409\3\2\2\2\u1f64\u1f69")
        buf.write("\5\u0432\u021a\2\u1f65\u1f66\7\u0280\2\2\u1f66\u1f68\5")
        buf.write("\u0432\u021a\2\u1f67\u1f65\3\2\2\2\u1f68\u1f6b\3\2\2\2")
        buf.write("\u1f69\u1f67\3\2\2\2\u1f69\u1f6a\3\2\2\2\u1f6a\u040b\3")
        buf.write("\2\2\2\u1f6b\u1f69\3\2\2\2\u1f6c\u1f6d\7\u028a\2\2\u1f6d")
        buf.write("\u040d\3\2\2\2\u1f6e\u1f6f\7\u00fc\2\2\u1f6f\u1f70\7\u0287")
        buf.write("\2\2\u1f70\u1f71\7\u0266\2\2\u1f71\u1f72\tM\2\2\u1f72")
        buf.write("\u1f73\5\u02f2\u017a\2\u1f73\u1f75\7\u0288\2\2\u1f74\u1f76")
        buf.write("\5\u0388\u01c5\2\u1f75\u1f74\3\2\2\2\u1f75\u1f76\3\2\2")
        buf.write("\2\u1f76\u040f\3\2\2\2\u1f77\u1f79\7\u0287\2\2\u1f78\u1f7a")
        buf.write("\5\u0418\u020d\2\u1f79\u1f78\3\2\2\2\u1f79\u1f7a\3\2\2")
        buf.write("\2\u1f7a\u1f7f\3\2\2\2\u1f7b\u1f7c\7\u028d\2\2\u1f7c\u1f7e")
        buf.write("\5\u0418\u020d\2\u1f7d\u1f7b\3\2\2\2\u1f7e\u1f81\3\2\2")
        buf.write("\2\u1f7f\u1f7d\3\2\2\2\u1f7f\u1f80\3\2\2\2\u1f80\u1f82")
        buf.write("\3\2\2\2\u1f81\u1f7f\3\2\2\2\u1f82\u1f84\7\u0288\2\2\u1f83")
        buf.write("\u1f85\5\u040e\u0208\2\u1f84\u1f83\3\2\2\2\u1f84\u1f85")
        buf.write("\3\2\2\2\u1f85\u0411\3\2\2\2\u1f86\u1f8b\7\u0287\2\2\u1f87")
        buf.write("\u1f89\5\u0418\u020d\2\u1f88\u1f8a\5\u0416\u020c\2\u1f89")
        buf.write("\u1f88\3\2\2\2\u1f89\u1f8a\3\2\2\2\u1f8a\u1f8c\3\2\2\2")
        buf.write("\u1f8b\u1f87\3\2\2\2\u1f8b\u1f8c\3\2\2\2\u1f8c\u1f94\3")
        buf.write("\2\2\2\u1f8d\u1f8e\7\u028d\2\2\u1f8e\u1f90\5\u0418\u020d")
        buf.write("\2\u1f8f\u1f91\5\u0416\u020c\2\u1f90\u1f8f\3\2\2\2\u1f90")
        buf.write("\u1f91\3\2\2\2\u1f91\u1f93\3\2\2\2\u1f92\u1f8d\3\2\2\2")
        buf.write("\u1f93\u1f96\3\2\2\2\u1f94\u1f92\3\2\2\2\u1f94\u1f95\3")
        buf.write("\2\2\2\u1f95\u1f97\3\2\2\2\u1f96\u1f94\3\2\2\2\u1f97\u1f99")
        buf.write("\7\u0288\2\2\u1f98\u1f9a\5\u040e\u0208\2\u1f99\u1f98\3")
        buf.write("\2\2\2\u1f99\u1f9a\3\2\2\2\u1f9a\u0413\3\2\2\2\u1f9b\u1f9c")
        buf.write("\7\u0287\2\2\u1f9c\u1fa9\5\u0404\u0203\2\u1f9d\u1fa0\7")
        buf.write("\u028d\2\2\u1f9e\u1fa1\5\u042a\u0216\2\u1f9f\u1fa1\7\u0157")
        buf.write("\2\2\u1fa0\u1f9e\3\2\2\2\u1fa0\u1f9f\3\2\2\2\u1fa1\u1fa7")
        buf.write("\3\2\2\2\u1fa2\u1fa5\7\u028d\2\2\u1fa3\u1fa6\5\u042a\u0216")
        buf.write("\2\u1fa4\u1fa6\7\u0157\2\2\u1fa5\u1fa3\3\2\2\2\u1fa5\u1fa4")
        buf.write("\3\2\2\2\u1fa6\u1fa8\3\2\2\2\u1fa7\u1fa2\3\2\2\2\u1fa7")
        buf.write("\u1fa8\3\2\2\2\u1fa8\u1faa\3\2\2\2\u1fa9\u1f9d\3\2\2\2")
        buf.write("\u1fa9\u1faa\3\2\2\2\u1faa\u1fab\3\2\2\2\u1fab\u1fbf\7")
        buf.write("\u022c\2\2\u1fac\u1fad\5\u0408\u0205\2\u1fad\u1fae\7\u0280")
        buf.write("\2\2\u1fae\u1faf\5\u040c\u0207\2\u1faf\u1fc0\3\2\2\2\u1fb0")
        buf.write("\u1fc0\5\u040c\u0207\2\u1fb1\u1fb3\5\u0346\u01a4\2\u1fb2")
        buf.write("\u1fb4\5\u03be\u01e0\2\u1fb3\u1fb2\3\2\2\2\u1fb3\u1fb4")
        buf.write("\3\2\2\2\u1fb4\u1fbc\3\2\2\2\u1fb5\u1fb6\7\u028d\2\2\u1fb6")
        buf.write("\u1fb8\5\u0346\u01a4\2\u1fb7\u1fb9\5\u03be\u01e0\2\u1fb8")
        buf.write("\u1fb7\3\2\2\2\u1fb8\u1fb9\3\2\2\2\u1fb9\u1fbb\3\2\2\2")
        buf.write("\u1fba\u1fb5\3\2\2\2\u1fbb\u1fbe\3\2\2\2\u1fbc\u1fba\3")
        buf.write("\2\2\2\u1fbc\u1fbd\3\2\2\2\u1fbd\u1fc0\3\2\2\2\u1fbe\u1fbc")
        buf.write("\3\2\2\2\u1fbf\u1fac\3\2\2\2\u1fbf\u1fb0\3\2\2\2\u1fbf")
        buf.write("\u1fb1\3\2\2\2\u1fc0\u1fc1\3\2\2\2\u1fc1\u1fc3\7\u0288")
        buf.write("\2\2\u1fc2\u1fc4\5\u040e\u0208\2\u1fc3\u1fc2\3\2\2\2\u1fc3")
        buf.write("\u1fc4\3\2\2\2\u1fc4\u0415\3\2\2\2\u1fc5\u1fc6\tk\2\2")
        buf.write("\u1fc6\u1fc7\7\u0158\2\2\u1fc7\u0417\3\2\2\2\u1fc8\u1fc9")
        buf.write("\5\u0430\u0219\2\u1fc9\u1fca\7\u029e\2\2\u1fca\u1fcb\7")
        buf.write("\u029b\2\2\u1fcb\u1fcd\3\2\2\2\u1fcc\u1fc8\3\2\2\2\u1fcc")
        buf.write("\u1fcd\3\2\2\2\u1fcd\u1fce\3\2\2\2\u1fce\u1fcf\5\u0346")
        buf.write("\u01a4\2\u1fcf\u0419\3\2\2\2\u1fd0\u1fd9\5\u041c\u020f")
        buf.write("\2\u1fd1\u1fd3\7\u01a1\2\2\u1fd2\u1fd1\3\2\2\2\u1fd2\u1fd3")
        buf.write("\3\2\2\2\u1fd3\u1fd4\3\2\2\2\u1fd4\u1fd6\5\u03ec\u01f7")
        buf.write("\2\u1fd5\u1fd7\t;\2\2\u1fd6\u1fd5\3\2\2\2\u1fd6\u1fd7")
        buf.write("\3\2\2\2\u1fd7\u1fd9\3\2\2\2\u1fd8\u1fd0\3\2\2\2\u1fd8")
        buf.write("\u1fd2\3\2\2\2\u1fd9\u041b\3\2\2\2\u1fda\u1fdc\5\u0420")
        buf.write("\u0211\2\u1fdb\u1fdd\5\u041e\u0210\2\u1fdc\u1fdb\3\2\2")
        buf.write("\2\u1fdc\u1fdd\3\2\2\2\u1fdd\u1fe4\3\2\2\2\u1fde\u1fe0")
        buf.write("\7\u0243\2\2\u1fdf\u1fe1\7\u010e\2\2\u1fe0\u1fdf\3\2\2")
        buf.write("\2\u1fe0\u1fe1\3\2\2\2\u1fe1\u1fe2\3\2\2\2\u1fe2\u1fe3")
        buf.write("\7\u0207\2\2\u1fe3\u1fe5\7\u025e\2\2\u1fe4\u1fde\3\2\2")
        buf.write("\2\u1fe4\u1fe5\3\2\2\2\u1fe5\u1ff7\3\2\2\2\u1fe6\u1fe7")
        buf.write("\7\u00f3\2\2\u1fe7\u1fec\tl\2\2\u1fe8\u1fe9\7\u0287\2")
        buf.write("\2\u1fe9\u1fea\5\u0346\u01a4\2\u1fea\u1feb\7\u0288\2\2")
        buf.write("\u1feb\u1fed\3\2\2\2\u1fec\u1fe8\3\2\2\2\u1fec\u1fed\3")
        buf.write("\2\2\2\u1fed\u1fee\3\2\2\2\u1fee\u1fef\7\u0210\2\2\u1fef")
        buf.write("\u1ff4\tm\2\2\u1ff0\u1ff1\7\u0287\2\2\u1ff1\u1ff2\5\u0346")
        buf.write("\u01a4\2\u1ff2\u1ff3\7\u0288\2\2\u1ff3\u1ff5\3\2\2\2\u1ff4")
        buf.write("\u1ff0\3\2\2\2\u1ff4\u1ff5\3\2\2\2\u1ff5\u1ff7\3\2\2\2")
        buf.write("\u1ff6\u1fda\3\2\2\2\u1ff6\u1fe6\3\2\2\2\u1ff7\u041d\3")
        buf.write("\2\2\2\u1ff8\u1ff9\7\u0287\2\2\u1ff9\u1ffc\5\u042a\u0216")
        buf.write("\2\u1ffa\u1ffb\7\u028d\2\2\u1ffb\u1ffd\5\u042a\u0216\2")
        buf.write("\u1ffc\u1ffa\3\2\2\2\u1ffc\u1ffd\3\2\2\2\u1ffd\u1fff\3")
        buf.write("\2\2\2\u1ffe\u2000\tn\2\2\u1fff\u1ffe\3\2\2\2\u1fff\u2000")
        buf.write("\3\2\2\2\u2000\u2001\3\2\2\2\u2001\u2002\7\u0288\2\2\u2002")
        buf.write("\u041f\3\2\2\2\u2003\u2040\7*\2\2\u2004\u2040\7\u0185")
        buf.write("\2\2\u2005\u2040\7\u0135\2\2\u2006\u2040\7)\2\2\u2007")
        buf.write("\u2040\7(\2\2\u2008\u2040\7\u0136\2\2\u2009\u2040\7\u0188")
        buf.write("\2\2\u200a\u2040\7\u0189\2\2\u200b\u2040\7\u01de\2\2\u200c")
        buf.write("\u2040\7\u01df\2\2\u200d\u2040\7\u015b\2\2\u200e\u2040")
        buf.write("\7z\2\2\u200f\u2040\7\u00f1\2\2\u2010\u2040\7\u00f0\2")
        buf.write("\2\u2011\u2040\7\u015a\2\2\u2012\u2040\7\u01e3\2\2\u2013")
        buf.write("\u2040\7\u0159\2\2\u2014\u2040\7{\2\2\u2015\u2017\7\u0092")
        buf.write("\2\2\u2016\u2018\7\u018d\2\2\u2017\u2016\3\2\2\2\u2017")
        buf.write("\u2018\3\2\2\2\u2018\u2040\3\2\2\2\u2019\u2040\7\u00bc")
        buf.write("\2\2\u201a\u2040\7\u019b\2\2\u201b\u2040\7\u0138\2\2\u201c")
        buf.write("\u201e\7\u0119\2\2\u201d\u201f\7\u0198\2\2\u201e\u201d")
        buf.write("\3\2\2\2\u201e\u201f\3\2\2\2\u201f\u2040\3\2\2\2\u2020")
        buf.write("\u2040\7>\2\2\u2021\u2040\7@\2\2\u2022\u2040\7\u0231\2")
        buf.write("\2\u2023\u2040\7\u0230\2\2\u2024\u2040\7\u01f4\2\2\u2025")
        buf.write("\u2040\7\u0198\2\2\u2026\u2040\7\61\2\2\u2027\u2040\7")
        buf.write("s\2\2\u2028\u2040\7\u01be\2\2\u2029\u2040\7\u022a\2\2")
        buf.write("\u202a\u2040\7\u025b\2\2\u202b\u2040\7\u0130\2\2\u202c")
        buf.write("\u2040\7t\2\2\u202d\u2040\7\u00d4\2\2\u202e\u2040\7\u012a")
        buf.write("\2\2\u202f\u2040\7\u01ca\2\2\u2030\u2040\7\u020d\2\2\u2031")
        buf.write("\u2040\7\u020e\2\2\u2032\u2040\7\u020f\2\2\u2033\u2040")
        buf.write("\7\u020c\2\2\u2034\u2040\7\u0208\2\2\u2035\u2040\7\u020b")
        buf.write("\2\2\u2036\u2040\7\u020a\2\2\u2037\u2040\7\u0209\2\2\u2038")
        buf.write("\u2040\7\u025d\2\2\u2039\u2040\7\u0094\2\2\u203a\u2040")
        buf.write("\7&\2\2\u203b\u2040\7.\2\2\u203c\u2040\7E\2\2\u203d\u2040")
        buf.write("\7\u013a\2\2\u203e\u2040\7\u012c\2\2\u203f\u2003\3\2\2")
        buf.write("\2\u203f\u2004\3\2\2\2\u203f\u2005\3\2\2\2\u203f\u2006")
        buf.write("\3\2\2\2\u203f\u2007\3\2\2\2\u203f\u2008\3\2\2\2\u203f")
        buf.write("\u2009\3\2\2\2\u203f\u200a\3\2\2\2\u203f\u200b\3\2\2\2")
        buf.write("\u203f\u200c\3\2\2\2\u203f\u200d\3\2\2\2\u203f\u200e\3")
        buf.write("\2\2\2\u203f\u200f\3\2\2\2\u203f\u2010\3\2\2\2\u203f\u2011")
        buf.write("\3\2\2\2\u203f\u2012\3\2\2\2\u203f\u2013\3\2\2\2\u203f")
        buf.write("\u2014\3\2\2\2\u203f\u2015\3\2\2\2\u203f\u2019\3\2\2\2")
        buf.write("\u203f\u201a\3\2\2\2\u203f\u201b\3\2\2\2\u203f\u201c\3")
        buf.write("\2\2\2\u203f\u2020\3\2\2\2\u203f\u2021\3\2\2\2\u203f\u2022")
        buf.write("\3\2\2\2\u203f\u2023\3\2\2\2\u203f\u2024\3\2\2\2\u203f")
        buf.write("\u2025\3\2\2\2\u203f\u2026\3\2\2\2\u203f\u2027\3\2\2\2")
        buf.write("\u203f\u2028\3\2\2\2\u203f\u2029\3\2\2\2\u203f\u202a\3")
        buf.write("\2\2\2\u203f\u202b\3\2\2\2\u203f\u202c\3\2\2\2\u203f\u202d")
        buf.write("\3\2\2\2\u203f\u202e\3\2\2\2\u203f\u202f\3\2\2\2\u203f")
        buf.write("\u2030\3\2\2\2\u203f\u2031\3\2\2\2\u203f\u2032\3\2\2\2")
        buf.write("\u203f\u2033\3\2\2\2\u203f\u2034\3\2\2\2\u203f\u2035\3")
        buf.write("\2\2\2\u203f\u2036\3\2\2\2\u203f\u2037\3\2\2\2\u203f\u2038")
        buf.write("\3\2\2\2\u203f\u2039\3\2\2\2\u203f\u203a\3\2\2\2\u203f")
        buf.write("\u203b\3\2\2\2\u203f\u203c\3\2\2\2\u203f\u203d\3\2\2\2")
        buf.write("\u203f\u203e\3\2\2\2\u2040\u0421\3\2\2\2\u2041\u2045\7")
        buf.write("\u0291\2\2\u2042\u2043\7\u0292\2\2\u2043\u2045\7\u0281")
        buf.write("\2\2\u2044\u2041\3\2\2\2\u2044\u2042\3\2\2\2\u2045\u204e")
        buf.write("\3\2\2\2\u2046\u2048\7\u00e3\2\2\u2047\u2046\3\2\2\2\u2047")
        buf.write("\u2048\3\2\2\2\u2048\u204c\3\2\2\2\u2049\u204d\7\u0291")
        buf.write("\2\2\u204a\u204b\7\u0292\2\2\u204b\u204d\7\u0281\2\2\u204c")
        buf.write("\u2049\3\2\2\2\u204c\u204a\3\2\2\2\u204d\u204f\3\2\2\2")
        buf.write("\u204e\u2047\3\2\2\2\u204e\u204f\3\2\2\2\u204f\u2054\3")
        buf.write("\2\2\2\u2050\u2051\7\u0280\2\2\u2051\u2053\5\u0424\u0213")
        buf.write("\2\u2052\u2050\3\2\2\2\u2053\u2056\3\2\2\2\u2054\u2052")
        buf.write("\3\2\2\2\u2054\u2055\3\2\2\2\u2055\u0423\3\2\2\2\u2056")
        buf.write("\u2054\3\2\2\2\u2057\u2058\5\u040a\u0206\2\u2058\u2059")
        buf.write("\5\u0410\u0209\2\u2059\u205c\3\2\2\2\u205a\u205c\5\u040a")
        buf.write("\u0206\2\u205b\u2057\3\2\2\2\u205b\u205a\3\2\2\2\u205c")
        buf.write("\u0425\3\2\2\2\u205d\u205e\5\u040a\u0206\2\u205e\u0427")
        buf.write("\3\2\2\2\u205f\u2062\7\u0208\2\2\u2060\u2063\5\u042e\u0218")
        buf.write("\2\u2061\u2063\5\u0422\u0212\2\u2062\u2060\3\2\2\2\u2062")
        buf.write("\u2061\3\2\2\2\u2063\u2068\3\2\2\2\u2064\u2065\7\31\2")
        buf.write("\2\u2065\u2066\7\u0207\2\2\u2066\u2067\7\u025e\2\2\u2067")
        buf.write("\u2069\5\u042e\u0218\2\u2068\u2064\3\2\2\2\u2068\u2069")
        buf.write("\3\2\2\2\u2069\u209e\3\2\2\2\u206a\u206e\7\u00f3\2\2\u206b")
        buf.write("\u206f\5\u042e\u0218\2\u206c\u206f\5\u0422\u0212\2\u206d")
        buf.write("\u206f\5\u0424\u0213\2\u206e\u206b\3\2\2\2\u206e\u206c")
        buf.write("\3\2\2\2\u206e\u206d\3\2\2\2\u206f\u2070\3\2\2\2\u2070")
        buf.write("\u207e\to\2\2\u2071\u2074\7\u0287\2\2\u2072\u2075\7\u0281")
        buf.write("\2\2\u2073\u2075\5\u0422\u0212\2\u2074\u2072\3\2\2\2\u2074")
        buf.write("\u2073\3\2\2\2\u2075\u207b\3\2\2\2\u2076\u2079\7\u028d")
        buf.write("\2\2\u2077\u207a\7\u0281\2\2\u2078\u207a\5\u0422\u0212")
        buf.write("\2\u2079\u2077\3\2\2\2\u2079\u2078\3\2\2\2\u207a\u207c")
        buf.write("\3\2\2\2\u207b\u2076\3\2\2\2\u207b\u207c\3\2\2\2\u207c")
        buf.write("\u207d\3\2\2\2\u207d\u207f\7\u0288\2\2\u207e\u2071\3\2")
        buf.write("\2\2\u207e\u207f\3\2\2\2\u207f\u208f\3\2\2\2\u2080\u208d")
        buf.write("\7\u0210\2\2\u2081\u208e\7t\2\2\u2082\u208e\7\u00d4\2")
        buf.write("\2\u2083\u208e\7\u012a\2\2\u2084\u208b\7\u01ca\2\2\u2085")
        buf.write("\u2088\7\u0287\2\2\u2086\u2089\7\u0281\2\2\u2087\u2089")
        buf.write("\5\u0422\u0212\2\u2088\u2086\3\2\2\2\u2088\u2087\3\2\2")
        buf.write("\2\u2089\u208a\3\2\2\2\u208a\u208c\7\u0288\2\2\u208b\u2085")
        buf.write("\3\2\2\2\u208b\u208c\3\2\2\2\u208c\u208e\3\2\2\2\u208d")
        buf.write("\u2081\3\2\2\2\u208d\u2082\3\2\2\2\u208d\u2083\3\2\2\2")
        buf.write("\u208d\u2084\3\2\2\2\u208e\u2090\3\2\2\2\u208f\u2080\3")
        buf.write("\2\2\2\u208f\u2090\3\2\2\2\u2090\u209e\3\2\2\2\u2091\u209e")
        buf.write("\5\u042a\u0216\2\u2092\u2093\7s\2\2\u2093\u209e\5\u042e")
        buf.write("\u0218\2\u2094\u209e\5\u042e\u0218\2\u2095\u209e\7\u0157")
        buf.write("\2\2\u2096\u209e\7\u0219\2\2\u2097\u209e\7\u00b3\2\2\u2098")
        buf.write("\u209e\7v\2\2\u2099\u209e\7\u01d5\2\2\u209a\u209e\7\u012b")
        buf.write("\2\2\u209b\u209e\7\u0122\2\2\u209c\u209e\7\u0082\2\2\u209d")
        buf.write("\u205f\3\2\2\2\u209d\u206a\3\2\2\2\u209d\u2091\3\2\2\2")
        buf.write("\u209d\u2092\3\2\2\2\u209d\u2094\3\2\2\2\u209d\u2095\3")
        buf.write("\2\2\2\u209d\u2096\3\2\2\2\u209d\u2097\3\2\2\2\u209d\u2098")
        buf.write("\3\2\2\2\u209d\u2099\3\2\2\2\u209d\u209a\3\2\2\2\u209d")
        buf.write("\u209b\3\2\2\2\u209d\u209c\3\2\2\2\u209e\u0429\3\2\2\2")
        buf.write("\u209f\u20a0\tp\2\2\u20a0\u042b\3\2\2\2\u20a1\u20a2\7")
        buf.write("\u028c\2\2\u20a2\u20a3\5\u042a\u0216\2\u20a3\u042d\3\2")
        buf.write("\2\2\u20a4\u20a5\tq\2\2\u20a5\u042f\3\2\2\2\u20a6\u20a7")
        buf.write("\5\u040a\u0206\2\u20a7\u0431\3\2\2\2\u20a8\u20ab\5\u043e")
        buf.write("\u0220\2\u20a9\u20ab\7\u0284\2\2\u20aa\u20a8\3\2\2\2\u20aa")
        buf.write("\u20a9\3\2\2\2\u20ab\u0433\3\2\2\2\u20ac\u20b4\7\u0297")
        buf.write("\2\2\u20ad\u20ae\7\u0295\2\2\u20ae\u20b4\7\u029b\2\2\u20af")
        buf.write("\u20b0\7\u029a\2\2\u20b0\u20b4\7\u029e\2\2\u20b1\u20b2")
        buf.write("\7\u0298\2\2\u20b2\u20b4\7\u029e\2\2\u20b3\u20ac\3\2\2")
        buf.write("\2\u20b3\u20ad\3\2\2\2\u20b3\u20af\3\2\2\2\u20b3\u20b1")
        buf.write("\3\2\2\2\u20b4\u0435\3\2\2\2\u20b5\u20b9\7\u0296\2\2\u20b6")
        buf.write("\u20b7\7\u029b\2\2\u20b7\u20b9\7\u029e\2\2\u20b8\u20b5")
        buf.write("\3\2\2\2\u20b8\u20b6\3\2\2\2\u20b9\u0437\3\2\2\2\u20ba")
        buf.write("\u20be\7\u0294\2\2\u20bb\u20bc\7\u0295\2\2\u20bc\u20be")
        buf.write("\7\u029e\2\2\u20bd\u20ba\3\2\2\2\u20bd\u20bb\3\2\2\2\u20be")
        buf.write("\u0439\3\2\2\2\u20bf\u20c3\7\u029c\2\2\u20c0\u20c1\7\u029d")
        buf.write("\2\2\u20c1\u20c3\7\u029d\2\2\u20c2\u20bf\3\2\2\2\u20c2")
        buf.write("\u20c0\3\2\2\2\u20c3\u043b\3\2\2\2\u20c4\u20c5\7\u0287")
        buf.write("\2\2\u20c5\u20c6\7\u028b\2\2\u20c6\u20c7\7\u0288\2\2\u20c7")
        buf.write("\u043d\3\2\2\2\u20c8\u20c9\tr\2\2\u20c9\u043f\3\2\2\2")
        buf.write("\u04d5\u0443\u0448\u044f\u0454\u0458\u045c\u045e\u0464")
        buf.write("\u0467\u046a\u048a\u0490\u0495\u0497\u04a6\u04ae\u04b1")
        buf.write("\u04b4\u04b7\u04ba\u04bc\u04c3\u04c5\u04c9\u04cf\u04d2")
        buf.write("\u04d6\u04db\u04e9\u04ef\u04f4\u04f9\u04fe\u0503\u0505")
        buf.write("\u0507\u0510\u0515\u0519\u051f\u0524\u0528\u0530\u0539")
        buf.write("\u0542\u054b\u054e\u0551\u0556\u055b\u055e\u0561\u0564")
        buf.write("\u0569\u056e\u0574\u057a\u057e\u0582\u0588\u0590\u0593")
        buf.write("\u0598\u059d\u05a6\u05ad\u05af\u05b6\u05bf\u05c1\u05c5")
        buf.write("\u05c9\u05cd\u05d1\u05d5\u05d9\u05de\u05e0\u05e6\u05e8")
        buf.write("\u05f7\u05f9\u05fd\u0604\u0609\u060d\u0615\u061e\u0627")
        buf.write("\u062b\u0634\u0638\u063c\u0656\u0659\u065c\u0666\u066e")
        buf.write("\u0674\u0678\u067c\u0683\u0688\u068c\u068f\u0693\u069c")
        buf.write("\u06a6\u06ab\u06ad\u06b5\u06b7\u06b9\u06bc\u06c5\u06cd")
        buf.write("\u06d4\u06dd\u06e2\u06ec\u06f1\u06f5\u06f9\u0700\u0705")
        buf.write("\u0709\u0712\u0716\u071a\u071e\u0720\u0722\u0725\u0729")
        buf.write("\u072f\u0733\u0737\u0739\u073b\u073e\u0742\u074a\u074f")
        buf.write("\u0755\u0759\u075d\u0760\u0763\u0767\u076a\u0770\u0775")
        buf.write("\u0779\u077d\u0781\u0785\u0787\u0789\u078d\u0791\u0799")
        buf.write("\u079e\u07a4\u07a8\u07ac\u07af\u07b2\u07b6\u07b9\u07bf")
        buf.write("\u07c2\u07c9\u07ce\u07d7\u07e0\u07e4\u07e8\u07ec\u07f0")
        buf.write("\u07f3\u07f8\u07fe\u0802\u0807\u080b\u080f\u0813\u0818")
        buf.write("\u081f\u0823\u0826\u082a\u082d\u0834\u0838\u0846\u084c")
        buf.write("\u084e\u0854\u085a\u085d\u0860\u0863\u0866\u086d\u0870")
        buf.write("\u0873\u0878\u087a\u087d\u0880\u0883\u088a\u088e\u0893")
        buf.write("\u0896\u089a\u089f\u08a4\u08a7\u08aa\u08ad\u08af\u08b4")
        buf.write("\u08b8\u08bc\u08c5\u08c9\u08cb\u08cf\u08d3\u08da\u08df")
        buf.write("\u08e4\u08f1\u08f4\u08fb\u0902\u0915\u091b\u0920\u0925")
        buf.write("\u0927\u092d\u0933\u0938\u093c\u0940\u0947\u094f\u0953")
        buf.write("\u0959\u095d\u0967\u0969\u0972\u0974\u098a\u0991\u0993")
        buf.write("\u0999\u09a1\u09a4\u09ab\u09b0\u09b7\u09bd\u09c3\u09c6")
        buf.write("\u09c9\u09d5\u09d7\u09db\u09df\u09e2\u09e8\u09ec\u09ef")
        buf.write("\u09f4\u09f7\u09fc\u0a00\u0a03\u0a0b\u0a0e\u0a19\u0a1e")
        buf.write("\u0a25\u0a28\u0a31\u0a33\u0a3d\u0a42\u0a46\u0a4b\u0a4f")
        buf.write("\u0a56\u0a5c\u0a5f\u0a75\u0a78\u0a7a\u0a7c\u0a84\u0a8b")
        buf.write("\u0a8d\u0a91\u0a96\u0a99\u0a9c\u0a9f\u0aa4\u0aa9\u0ab3")
        buf.write("\u0ab5\u0ac2\u0ac4\u0ac6\u0aca\u0ace\u0ad1\u0ad8\u0add")
        buf.write("\u0ae4\u0aea\u0aec\u0af2\u0af6\u0afd\u0b02\u0b0e\u0b1c")
        buf.write("\u0b21\u0b25\u0b27\u0b2b\u0b2f\u0b36\u0b3f\u0b44\u0b49")
        buf.write("\u0b4c\u0b50\u0b54\u0b56\u0b5b\u0b65\u0b69\u0b70\u0b74")
        buf.write("\u0b79\u0b7e\u0b81\u0b8b\u0b99\u0b9e\u0ba2\u0ba4\u0ba9")
        buf.write("\u0bad\u0bb2\u0bbb\u0bc4\u0bca\u0bcf\u0bd2\u0bd7\u0bda")
        buf.write("\u0bdf\u0be1\u0be6\u0bea\u0bee\u0bf2\u0bf6\u0bfa\u0bfd")
        buf.write("\u0c0b\u0c10\u0c14\u0c17\u0c1b\u0c21\u0c26\u0c29\u0c2e")
        buf.write("\u0c31\u0c36\u0c38\u0c3d\u0c3f\u0c47\u0c4c\u0c50\u0c5b")
        buf.write("\u0c5f\u0c64\u0c6a\u0c70\u0c75\u0c78\u0c7d\u0c80\u0c85")
        buf.write("\u0c87\u0c8c\u0c8e\u0c98\u0c9e\u0ca2\u0cac\u0cb1\u0cb5")
        buf.write("\u0cb9\u0cc3\u0cc8\u0cca\u0cce\u0cd6\u0cd9\u0cdc\u0cdf")
        buf.write("\u0ce3\u0cea\u0cf5\u0cfa\u0cfe\u0d03\u0d07\u0d0d\u0d10")
        buf.write("\u0d13\u0d16\u0d19\u0d1c\u0d1f\u0d26\u0d29\u0d2c\u0d31")
        buf.write("\u0d33\u0d36\u0d39\u0d3c\u0d4a\u0d4e\u0d54\u0d56\u0d60")
        buf.write("\u0d64\u0d67\u0d6a\u0d70\u0d73\u0d76\u0d79\u0d7c\u0d7f")
        buf.write("\u0d82\u0d89\u0d8c\u0d8f\u0d94\u0d96\u0d99\u0d9c\u0da2")
        buf.write("\u0dac\u0db4\u0db8\u0dc1\u0dce\u0de1\u0de3\u0de6\u0dea")
        buf.write("\u0df0\u0df4\u0df9\u0e00\u0e04\u0e07\u0e12\u0e14\u0e17")
        buf.write("\u0e1d\u0e21\u0e29\u0e31\u0e37\u0e3a\u0e3f\u0e43\u0e47")
        buf.write("\u0e4f\u0e51\u0e53\u0e58\u0e5c\u0e60\u0e64\u0e67\u0e6c")
        buf.write("\u0e6f\u0e75\u0e7c\u0e80\u0e87\u0e8b\u0e94\u0e98\u0ea3")
        buf.write("\u0ea5\u0eb2\u0eb5\u0eb8\u0ebd\u0ebf\u0ec5\u0ecf\u0ed2")
        buf.write("\u0ed4\u0ed8\u0edc\u0ee0\u0ee3\u0ee5\u0eeb\u0eed\u0ef0")
        buf.write("\u0ef5\u0efa\u0f00\u0f04\u0f0e\u0f10\u0f14\u0f18\u0f1d")
        buf.write("\u0f22\u0f26\u0f2b\u0f32\u0f3a\u0f3f\u0f43\u0f48\u0f4a")
        buf.write("\u0f52\u0f57\u0f5b\u0f60\u0f62\u0f67\u0f6e\u0f72\u0f76")
        buf.write("\u0fa3\u0fa6\u0fab\u0fad\u0fb8\u0fbd\u0fc2\u0fc7\u0fc9")
        buf.write("\u0fd3\u0fd8\u0fe0\u0fe2\u0fe6\u0fea\u0fef\u0ff4\u0ff9")
        buf.write("\u0ffd\u100b\u1010\u1013\u1019\u1022\u1030\u1038\u1041")
        buf.write("\u1044\u1049\u104e\u1053\u1058\u1060\u1067\u1069\u106d")
        buf.write("\u1073\u1078\u1083\u108d\u1092\u109e\u10a3\u10a8\u10ab")
        buf.write("\u10b9\u10c4\u10c9\u10ce\u10d3\u10d5\u10df\u10e4\u10e7")
        buf.write("\u10eb\u10f0\u10f6\u1105\u110a\u110f\u1111\u1116\u111d")
        buf.write("\u1120\u1123\u1126\u1130\u113c\u1140\u1143\u114c\u1154")
        buf.write("\u115c\u115f\u1166\u116a\u1171\u1177\u11a0\u11bc\u11c3")
        buf.write("\u11c8\u11d3\u11d6\u11e1\u11e9\u11ed\u11f7\u11fa\u11fe")
        buf.write("\u1201\u1206\u120b\u120f\u1219\u1223\u1229\u1234\u1239")
        buf.write("\u123d\u1245\u124d\u1252\u1255\u1257\u125a\u1263\u1268")
        buf.write("\u126d\u1270\u1273\u1277\u127a\u1282\u1287\u128c\u1293")
        buf.write("\u129d\u12ad\u12b3\u12bd\u12c7\u12ce\u12d3\u12d9\u12e3")
        buf.write("\u12e8\u12ef\u12f4\u12fa\u12fd\u1300\u1311\u1316\u131f")
        buf.write("\u1324\u132a\u132d\u1334\u1337\u133e\u1343\u1347\u134c")
        buf.write("\u1351\u135b\u1361\u136b\u1370\u1377\u137d\u1381\u1384")
        buf.write("\u1387\u1398\u139d\u13a5\u13b3\u13ba\u13c9\u13d0\u13d2")
        buf.write("\u13e5\u13f5\u13fe\u1403\u1407\u140a\u1414\u1420\u1426")
        buf.write("\u142e\u1432\u1435\u1443\u1447\u144c\u144f\u145c\u1460")
        buf.write("\u146c\u1471\u1475\u1479\u147f\u1482\u1485\u14a0\u14a6")
        buf.write("\u14aa\u14b0\u14bc\u14c5\u14c7\u14cd\u14d1\u14d4\u14dd")
        buf.write("\u14e8\u14ec\u14ef\u14f3\u14fb\u1504\u150d\u150f\u151d")
        buf.write("\u1531\u1535\u153c\u1540\u1544\u1548\u1554\u1558\u1566")
        buf.write("\u156c\u1573\u1578\u1582\u1588\u158a\u1593\u159d\u15a2")
        buf.write("\u15b1\u15b5\u15b8\u15bc\u15c4\u15c6\u15ca\u15d2\u15d9")
        buf.write("\u15de\u15e0\u15e5\u15ea\u15f2\u15f9\u15fd\u1600\u160c")
        buf.write("\u1612\u161a\u1624\u162f\u1632\u1639\u163c\u1643\u164e")
        buf.write("\u1654\u1658\u1662\u1665\u166b\u1676\u1678\u167a\u167d")
        buf.write("\u1681\u1684\u1688\u168c\u1691\u169c\u16a0\u16a8\u16ab")
        buf.write("\u16b5\u16ba\u16c0\u16c4\u16c7\u16cf\u16d2\u16d6\u16da")
        buf.write("\u16df\u16e2\u16e6\u16ea\u16ee\u16fa\u170a\u1710\u1714")
        buf.write("\u1719\u171d\u1724\u1728\u172b\u172e\u1731\u1735\u1737")
        buf.write("\u173b\u1740\u1742\u174d\u174f\u1757\u175d\u1764\u176b")
        buf.write("\u176f\u1771\u1777\u177d\u1784\u1787\u178a\u178f\u1793")
        buf.write("\u179f\u17a6\u17ab\u17ad\u17af\u17bd\u17c0\u17ca\u17ce")
        buf.write("\u17d6\u17e2\u17ec\u17f1\u17fb\u1803\u1806\u180c\u1810")
        buf.write("\u1815\u181f\u1824\u1831\u183d\u1842\u184c\u1851\u1853")
        buf.write("\u1858\u185c\u1862\u1866\u1873\u1879\u1882\u188f\u1897")
        buf.write("\u18a0\u18a4\u18a9\u18b4\u18b6\u18c6\u18cb\u18d1\u18d7")
        buf.write("\u18e9\u18f0\u18f3\u18fb\u1904\u1906\u190a\u190d\u1912")
        buf.write("\u1914\u1918\u1924\u192d\u1935\u193a\u193e\u1943\u1946")
        buf.write("\u194e\u1956\u195f\u1962\u1965\u1968\u1970\u197a\u1984")
        buf.write("\u1988\u198c\u198f\u1992\u1997\u199c\u199f\u19a2\u19a8")
        buf.write("\u19ab\u19b1\u19b4\u19b7\u19bc\u19bf\u19c7\u19cd\u19d2")
        buf.write("\u19da\u19e1\u19eb\u19ef\u19f1\u19f4\u1a00\u1a04\u1a07")
        buf.write("\u1a16\u1a1b\u1a22\u1a25\u1a2e\u1a35\u1a3a\u1a3e\u1a46")
        buf.write("\u1a4c\u1a54\u1a57\u1a5f\u1a67\u1a6a\u1a6d\u1a76\u1a7c")
        buf.write("\u1a82\u1a84\u1a91\u1a93\u1a9c\u1a9e\u1aa2\u1aa8\u1aac")
        buf.write("\u1aba\u1ac0\u1ad1\u1ad5\u1aeb\u1af3\u1af7\u1afd\u1b02")
        buf.write("\u1b05\u1b07\u1b0b\u1b16\u1b1a\u1b21\u1b26\u1b34\u1b47")
        buf.write("\u1b5b\u1b5e\u1b60\u1b62\u1b6a\u1b72\u1b79\u1b7d\u1b86")
        buf.write("\u1b8b\u1b8f\u1b97\u1b9b\u1ba2\u1bab\u1bb9\u1bc6\u1bcb")
        buf.write("\u1be0\u1be9\u1bee\u1bf1\u1bf8\u1bfb\u1bff\u1c02\u1c09")
        buf.write("\u1c0c\u1c12\u1c15\u1c19\u1c1c\u1c23\u1c28\u1c3a\u1c3c")
        buf.write("\u1c40\u1c48\u1c54\u1c5b\u1c66\u1c6e\u1c7d\u1c81\u1c8a")
        buf.write("\u1c90\u1c98\u1ca1\u1cac\u1cb0\u1cb3\u1cc3\u1cc9\u1cd3")
        buf.write("\u1cdb\u1cde\u1ce1\u1cea\u1cef\u1cf8\u1cfe\u1d03\u1d06")
        buf.write("\u1d0b\u1d10\u1d14\u1d1a\u1d20\u1d29\u1d2e\u1d36\u1d3a")
        buf.write("\u1d3f\u1d45\u1d4c\u1d51\u1d58\u1d5c\u1d61\u1d69\u1d6c")
        buf.write("\u1d6f\u1d72\u1d76\u1d7b\u1d80\u1d84\u1d8b\u1d90\u1d92")
        buf.write("\u1d99\u1d9f\u1da5\u1da8\u1dac\u1dae\u1db9\u1dbd\u1dbf")
        buf.write("\u1dca\u1dd5\u1dde\u1de1\u1de5\u1de8\u1dec\u1df9\u1dfe")
        buf.write("\u1e06\u1e0d\u1e12\u1e16\u1e1b\u1e20\u1e23\u1e2a\u1e34")
        buf.write("\u1e3c\u1e40\u1e4a\u1e4d\u1e4f\u1e59\u1e5b\u1e61\u1e67")
        buf.write("\u1e69\u1e77\u1e79\u1e81\u1e8a\u1e93\u1e9d\u1ea1\u1ea6")
        buf.write("\u1eaa\u1ead\u1eb0\u1eb4\u1ebb\u1ec7\u1ed2\u1ed5\u1ed9")
        buf.write("\u1eec\u1ef1\u1ef8\u1f05\u1f0f\u1f14\u1f1d\u1f25\u1f2d")
        buf.write("\u1f33\u1f38\u1f3d\u1f41\u1f47\u1f4b\u1f50\u1f59\u1f62")
        buf.write("\u1f69\u1f75\u1f79\u1f7f\u1f84\u1f89\u1f8b\u1f90\u1f94")
        buf.write("\u1f99\u1fa0\u1fa5\u1fa7\u1fa9\u1fb3\u1fb8\u1fbc\u1fbf")
        buf.write("\u1fc3\u1fcc\u1fd2\u1fd6\u1fd8\u1fdc\u1fe0\u1fe4\u1fec")
        buf.write("\u1ff4\u1ff6\u1ffc\u1fff\u2017\u201e\u203f\u2044\u2047")
        buf.write("\u204c\u204e\u2054\u205b\u2062\u2068\u206e\u2074\u2079")
        buf.write("\u207b\u207e\u2088\u208b\u208d\u208f\u209d\u20aa\u20b3")
        buf.write("\u20b8\u20bd\u20c2")
        return buf.getvalue()


class plsqlParser ( Parser ):

    grammarFileName = "plsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'..'", "'@@'", "'::'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
                     "','", "'/'", "'@'", "':='", "<INVALID>", "':'", "';'", 
                     "'<='", "'<'", "'>='", "<INVALID>", "'^'", "'~'", "'!'", 
                     "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
                      "ALL", "ALLOCATE", "ALLOW", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "ANY", "ANYSCHEMA", "ARCHIVE", "ARRAY", "AS", 
                      "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", "AUTHID", 
                      "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BASIC", 
                      "BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", 
                      "BFILE", "BINARY", "BINARY_DOUBLE", "BINARY_FLOAT", 
                      "BINARY_INTEGER", "BITMAP", "BUFFER_POOL", "BUILD", 
                      "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", 
                      "BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", 
                      "CANONICAL", "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", 
                      "CHARACTER", "CHECK", "CHECKPOINT", "CHR", "CHUNK", 
                      "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", 
                      "COLUMN", "COLUMNS", "COLUMN_VALUE", "COMMENT", "COMMIT", 
                      "COMMITTED", "COMPACT", "COMPATIBILITY", "COMPILE", 
                      "COMPLETE", "COMPOUND", "COMPRESS", "CONCAT", "CONNECT", 
                      "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
                      "CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", 
                      "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", 
                      "CREATE", "CREATEDB", "CREATEROLE", "CREATION", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
                      "CYCLE", "DATA", "DATABASE", "DATAFILE", "DATE", "DAY", 
                      "DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", "DEBUG", "DEALLOCATE", 
                      "DEC", "DECIMAL", "DECLARE", "DECODE", "DECOMPOSE", 
                      "DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", 
                      "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE", 
                      "DEMAND", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", 
                      "DISABLE", "DISALLOW", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "EDITIONING", "ELEMENT", "ELSE", "ELSIF", 
                      "EMPTY", "ENABLE", "ENCODING", "ENCRYPT", "END", "ENFORCED", 
                      "ENTITYESCAPING", "ERR", "ERRORS", "ESCAPE", "EVALNAME", 
                      "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
                      "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", 
                      "EXPLAIN", "EXTENT", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FAST", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
                      "FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", 
                      "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
                      "FORCE", "FOREIGN", "FREELIST", "FREELISTS", "FREEPOOLS", 
                      "FROM", "FULL", "FUNCTION", "GENERATED", "GLOBAL", 
                      "GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", "HASH", 
                      "HAVING", "HIDE", "HIGH", "HOUR", "IDENTIFIED", "IDENTIFIER", 
                      "IF", "IGNORE", "ILIKE", "IMMEDIATE", "IN", "INCLUDE", 
                      "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", 
                      "INDEXTYPE", "INDICATOR", "INDICES", "INFINITE", "INITIAL", 
                      "INITIALLY", "INITRANS", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD", "INT", 
                      "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", 
                      "INVISIBLE", "IS", "ISOLATION", "ITERATE", "JAVA", 
                      "JOIN", "KEEP", "KEEP_DUPLICATES", "KEY", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LESS", "LEVEL", 
                      "LEVELS", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", 
                      "LIMIT", "LIST", "LOCAL", "LOB", "LOBS", "LOCATOR", 
                      "LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGIN", 
                      "LOGON", "LONG", "LOOP", "LOW", "MAIN", "MAP", "MAPPING", 
                      "MASTER", "MATCHED", "MAXEXTENTS", "MAXVALUE", "MEASURES", 
                      "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINIMIZE", 
                      "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", 
                      "MODEL", "MODIFY", "MONTH", "MOVEMENT", "MULTISET", 
                      "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", 
                      "NCHAR_CS", "NCLOB", "NESTED", "NEVER", "NEW", "NEXT", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", 
                      "NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", "NOMAPPING", 
                      "NOMAXVALUE", "NOMINIMIZE", "NOMINVALUE", "NONE", 
                      "NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", "NOROWDEPENDENCIES", 
                      "NOSCHEMACHECK", "NOSORT", "NOT", "NOVALIDATE", "NOWAIT", 
                      "NVL", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", 
                      "MATERIALIZED", "OBJECT", "OF", "OFF", "OID", "OIDINDEX", 
                      "OLD", "OLTP", "ON", "ONLY", "OPEN", "OPTIMAL", "OPTION", 
                      "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", 
                      "OUT", "OUTER", "OVER", "OVERFLOW", "OVERRIDING", 
                      "PACKAGE", "PARALLEL", "PARALLEL_ENABLE", "PARAMETERS", 
                      "PARENT", "PARTITION", "PASSING", "PATH", "PCTFREE", 
                      "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", 
                      "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", 
                      "PLAN", "PLS_INTEGER", "PARTITIONS", "POSITION", "POSITIVE", 
                      "POSITIVEN", "PRAGMA", "PREBUILT", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRESERVE", "PRIMARY", "PRIOR", "PROCEDURE", 
                      "PUBLIC", "PURGE", "QUERY", "RAISE", "RANGE", "RAW", 
                      "READ", "READS", "REAL", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", 
                      "RECYCLE", "REDUCED", "REF", "REFERENCE", "REFERENCES", 
                      "REFERENCING", "REFRESH", "REJECT", "REKEY", "RELATIONAL", 
                      "RELIES_ON", "RELY", "RENAME", "REPLACE", "RESPECT", 
                      "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", "RETENTION", 
                      "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
                      "REWRITE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWDEPENDENCIES", "ROWID", "ROWS", "RULES", 
                      "SALT", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", 
                      "SCN", "SCOPE", "SEARCH", "SECOND", "SECUREFILE", 
                      "SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", 
                      "SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", "SMALLINT", 
                      "SNAPSHOT", "SOME", "SORT", "SPACE_KEYWORD", "SPECIFICATION", 
                      "SQLDATA", "SQLERROR", "STANDALONE", "START", "STARTUP", 
                      "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", 
                      "STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBPARTITIONS", "SUBSTITUTABLE", "SUBSTRING", "SUBTYPE", 
                      "SUCCESS", "SUPPLEMENTAL", "SUSPEND", "SYSTEM", "TABLE", 
                      "TABLES", "TABLESPACE", "TEMPLATE", "TEMPORARY", "THAN", 
                      "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TO_CHAR", "TO_DATE", "TRAILING", 
                      "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRIM", 
                      "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "UNBOUNDED", 
                      "UNDER", "UNION", "UNIQUE", "UNLIMITED", "UNPIVOT", 
                      "UNTIL", "UNUSABLE", "UNUSED", "UPDATE", "UPDATED", 
                      "UPGRADE", "UPSERT", "UROWID", "USE", "USING", "VALIDATE", 
                      "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", 
                      "VARRAY", "VARRAYS", "VARYING", "VERBOSE", "VERSION", 
                      "VERSIONS", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
                      "WARNING", "WELLFORMED", "WHEN", "WHENEVER", "WHERE", 
                      "WHILE", "WITH", "WITHOUT", "WITHIN", "WORK", "WRITE", 
                      "XDB", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", 
                      "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
                      "XMLINDEX", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLROOT", "XMLSCHEMA", "XMLSERIALIZE", 
                      "XMLTABLE", "XMLTYPE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
                      "ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID", "ZV" ]

    RULE_swallow_to_semi = 0
    RULE_compilation_unit = 1
    RULE_sql_script = 2
    RULE_sql_explain = 3
    RULE_unit_statement = 4
    RULE_unit_statement_body = 5
    RULE_create_role = 6
    RULE_role_option = 7
    RULE_refresh_materialized_view = 8
    RULE_create_materialized_view = 9
    RULE_create_mv_refresh = 10
    RULE_build_clause = 11
    RULE_alter_permission = 12
    RULE_permission_options = 13
    RULE_create_view = 14
    RULE_view_options = 15
    RULE_view_alias_constraint = 16
    RULE_create_index = 17
    RULE_cluster_index_clause = 18
    RULE_cluster_name = 19
    RULE_index_attributes = 20
    RULE_tablespace = 21
    RULE_key_compression = 22
    RULE_sort_or_nosort = 23
    RULE_visible_or_invisible = 24
    RULE_parallel_clause = 25
    RULE_table_index_clause = 26
    RULE_index_expr = 27
    RULE_index_properties = 28
    RULE_global_partitioned_index = 29
    RULE_index_partitioning_clause = 30
    RULE_partition_name = 31
    RULE_literal = 32
    RULE_string_function = 33
    RULE_expressions = 34
    RULE_individual_hash_partitions = 35
    RULE_partitioning_storage_clause = 36
    RULE_table_compression = 37
    RULE_lob_partitioning_storage = 38
    RULE_lob_item = 39
    RULE_lob_segname = 40
    RULE_varray_item = 41
    RULE_hash_partitions_by_quantity = 42
    RULE_hash_partition_quantity = 43
    RULE_local_partitioned_index = 44
    RULE_on_range_partitioned_table = 45
    RULE_on_list_partitioned_table = 46
    RULE_on_hash_partitioned_table = 47
    RULE_on_comp_partitioned_table = 48
    RULE_index_subpartition_clause = 49
    RULE_subpartition_name = 50
    RULE_domain_index_clause = 51
    RULE_indextype = 52
    RULE_odci_parameters = 53
    RULE_local_domain_index_clause = 54
    RULE_xmlindex_clause = 55
    RULE_local_xmlindex_clause = 56
    RULE_bitmap_join_index_clause = 57
    RULE_create_table = 58
    RULE_relational_table = 59
    RULE_relational_properties = 60
    RULE_column_definition = 61
    RULE_inline_ref_constraint = 62
    RULE_virtual_column_definition = 63
    RULE_out_of_line_constraint = 64
    RULE_foreign_key_clause = 65
    RULE_on_delete_clause = 66
    RULE_out_of_line_ref_constraint = 67
    RULE_supplemental_logging_props = 68
    RULE_supplemental_log_grp_clause = 69
    RULE_log_grp = 70
    RULE_supplemental_id_key_clause = 71
    RULE_physical_properties = 72
    RULE_deferred_segment_creation = 73
    RULE_segment_attributes_clause = 74
    RULE_physical_attributes_clause = 75
    RULE_storage_clause = 76
    RULE_size_clause = 77
    RULE_logging_clause = 78
    RULE_column_properties = 79
    RULE_object_type_col_properties = 80
    RULE_substitutable_column_clause = 81
    RULE_nested_table_col_properties = 82
    RULE_nested_item = 83
    RULE_object_properties = 84
    RULE_inline_constraint = 85
    RULE_references_clause = 86
    RULE_paren_column_list = 87
    RULE_column_list = 88
    RULE_check_constraint = 89
    RULE_constraint_state = 90
    RULE_using_index_clause = 91
    RULE_varray_col_properties = 92
    RULE_varray_storage_clause = 93
    RULE_lob_storage_parameters = 94
    RULE_lob_parameters = 95
    RULE_lob_retention_clause = 96
    RULE_lob_deduplicate_clause = 97
    RULE_lob_compression_clause = 98
    RULE_encryption_spec = 99
    RULE_lob_storage_clause = 100
    RULE_xmltype_column_properties = 101
    RULE_xmltype_storage = 102
    RULE_xmlschema_spec = 103
    RULE_allow_or_disallow = 104
    RULE_table_partitioning_clauses = 105
    RULE_range_partitions = 106
    RULE_range_values_clause = 107
    RULE_table_partition_description = 108
    RULE_list_partitions = 109
    RULE_list_values_clause = 110
    RULE_hash_partitions = 111
    RULE_composite_range_partitions = 112
    RULE_subpartition_by_range = 113
    RULE_subpartition_by_list = 114
    RULE_subpartition_template = 115
    RULE_range_subpartition_desc = 116
    RULE_list_subpartition_desc = 117
    RULE_individual_hash_subparts = 118
    RULE_hash_subpartition_quantity = 119
    RULE_subpartition_by_hash = 120
    RULE_range_partition_desc = 121
    RULE_hash_subparts_by_quantity = 122
    RULE_composite_list_partitions = 123
    RULE_list_partition_desc = 124
    RULE_composite_hash_partitions = 125
    RULE_reference_partitioning = 126
    RULE_reference_partition_desc = 127
    RULE_system_partitioning = 128
    RULE_enable_disable_clause = 129
    RULE_exceptions_clause = 130
    RULE_row_movement_clause = 131
    RULE_flashback_archive_clause = 132
    RULE_object_table = 133
    RULE_object_table_substitution = 134
    RULE_oid_clause = 135
    RULE_oid_index_clause = 136
    RULE_xmltype_table = 137
    RULE_xmltype_virtual_columns = 138
    RULE_drop_table = 139
    RULE_alter_table = 140
    RULE_alter_table_properties = 141
    RULE_alter_table_properties_1 = 142
    RULE_supplemental_table_logging = 143
    RULE_allocate_extent_clause = 144
    RULE_deallocate_unused_clause = 145
    RULE_upgrade_table_clause = 146
    RULE_records_per_block_clause = 147
    RULE_alter_iot_clauses = 148
    RULE_index_org_table_clause = 149
    RULE_mapping_table_clause = 150
    RULE_index_org_overflow_clause = 151
    RULE_alter_overflow_clause = 152
    RULE_add_overflow_clause = 153
    RULE_shrink_clause = 154
    RULE_alter_mapping_table_clause = 155
    RULE_constraint_clauses = 156
    RULE_old_constraint_name = 157
    RULE_new_constraint_name = 158
    RULE_drop_constraint_clause = 159
    RULE_drop_primary_key_or_unique_or_generic_clause = 160
    RULE_column_clauses = 161
    RULE_add_modify_drop_column_clauses = 162
    RULE_add_column_clause = 163
    RULE_modify_column_clauses = 164
    RULE_alter_column_clause = 165
    RULE_modify_col_properties = 166
    RULE_modify_col_substitutable = 167
    RULE_drop_column_clause = 168
    RULE_rename_column_clause = 169
    RULE_old_column_name = 170
    RULE_new_column_name = 171
    RULE_modify_collection_retrieval = 172
    RULE_collection_item = 173
    RULE_modify_lob_storage_clause = 174
    RULE_modify_lob_parameters = 175
    RULE_drop_function = 176
    RULE_alter_function = 177
    RULE_create_function_body = 178
    RULE_parallel_enable_clause = 179
    RULE_partition_by_clause = 180
    RULE_result_cache_clause = 181
    RULE_relies_on_part = 182
    RULE_streaming_clause = 183
    RULE_drop_package = 184
    RULE_alter_package = 185
    RULE_create_package = 186
    RULE_package_body = 187
    RULE_package_spec = 188
    RULE_package_obj_spec = 189
    RULE_procedure_spec = 190
    RULE_function_spec = 191
    RULE_package_obj_body = 192
    RULE_drop_procedure = 193
    RULE_alter_procedure = 194
    RULE_create_procedure_body = 195
    RULE_drop_trigger = 196
    RULE_alter_trigger = 197
    RULE_create_trigger = 198
    RULE_trigger_follows_clause = 199
    RULE_trigger_when_clause = 200
    RULE_simple_dml_trigger = 201
    RULE_for_each_row = 202
    RULE_compound_dml_trigger = 203
    RULE_non_dml_trigger = 204
    RULE_trigger_body = 205
    RULE_routine_clause = 206
    RULE_compound_trigger_block = 207
    RULE_timing_point_section = 208
    RULE_non_dml_event = 209
    RULE_dml_event_clause = 210
    RULE_dml_event_element = 211
    RULE_dml_event_nested_clause = 212
    RULE_referencing_clause = 213
    RULE_referencing_element = 214
    RULE_drop_type = 215
    RULE_alter_type = 216
    RULE_compile_type_clause = 217
    RULE_replace_type_clause = 218
    RULE_alter_method_spec = 219
    RULE_alter_method_element = 220
    RULE_alter_attribute_definition = 221
    RULE_attribute_definition = 222
    RULE_alter_collection_clauses = 223
    RULE_dependent_handling_clause = 224
    RULE_dependent_exceptions_part = 225
    RULE_create_type = 226
    RULE_type_definition = 227
    RULE_object_type_def = 228
    RULE_object_as_part = 229
    RULE_object_under_part = 230
    RULE_nested_table_type_def = 231
    RULE_sqlj_object_type = 232
    RULE_type_body = 233
    RULE_type_body_elements = 234
    RULE_map_order_func_declaration = 235
    RULE_subprog_decl_in_type = 236
    RULE_proc_decl_in_type = 237
    RULE_func_decl_in_type = 238
    RULE_constructor_declaration = 239
    RULE_modifier_clause = 240
    RULE_object_member_spec = 241
    RULE_sqlj_object_type_attr = 242
    RULE_element_spec = 243
    RULE_element_spec_options = 244
    RULE_subprogram_spec = 245
    RULE_type_procedure_spec = 246
    RULE_type_function_spec = 247
    RULE_constructor_spec = 248
    RULE_map_order_function_spec = 249
    RULE_pragma_clause = 250
    RULE_pragma_elements = 251
    RULE_type_elements_parameter = 252
    RULE_drop_sequence = 253
    RULE_alter_sequence = 254
    RULE_create_sequence = 255
    RULE_sequence_spec = 256
    RULE_sequence_start_clause = 257
    RULE_invoker_rights_clause = 258
    RULE_compiler_parameters_clause = 259
    RULE_call_spec = 260
    RULE_java_spec = 261
    RULE_c_spec = 262
    RULE_c_agent_in_clause = 263
    RULE_c_parameters_clause = 264
    RULE_parameter = 265
    RULE_default_value_part = 266
    RULE_declare_spec = 267
    RULE_variable_declaration = 268
    RULE_subtype_declaration = 269
    RULE_cursor_declaration = 270
    RULE_parameter_spec = 271
    RULE_exception_declaration = 272
    RULE_pragma_declaration = 273
    RULE_record_declaration = 274
    RULE_record_type_dec = 275
    RULE_field_spec = 276
    RULE_record_var_dec = 277
    RULE_table_declaration = 278
    RULE_table_type_dec = 279
    RULE_table_indexed_by_part = 280
    RULE_varray_type_def = 281
    RULE_table_var_dec = 282
    RULE_seq_of_statements = 283
    RULE_label_declaration = 284
    RULE_statement = 285
    RULE_assignment_statement = 286
    RULE_continue_statement = 287
    RULE_exit_statement = 288
    RULE_goto_statement = 289
    RULE_if_statement = 290
    RULE_elsif_part = 291
    RULE_else_part = 292
    RULE_loop_statement = 293
    RULE_cursor_loop_param = 294
    RULE_forall_statement = 295
    RULE_bounds_clause = 296
    RULE_between_bound = 297
    RULE_lower_bound = 298
    RULE_upper_bound = 299
    RULE_null_statement = 300
    RULE_raise_statement = 301
    RULE_return_statement = 302
    RULE_function_call = 303
    RULE_body = 304
    RULE_exception_handler = 305
    RULE_trigger_block = 306
    RULE_block = 307
    RULE_sql_statement = 308
    RULE_execute_immediate = 309
    RULE_dynamic_returning_clause = 310
    RULE_data_manipulation_language_statements = 311
    RULE_cursor_manipulation_statements = 312
    RULE_close_statement = 313
    RULE_open_statement = 314
    RULE_fetch_statement = 315
    RULE_open_for_statement = 316
    RULE_transaction_control_statements = 317
    RULE_set_transaction_command = 318
    RULE_set_constraint_command = 319
    RULE_commit_statement = 320
    RULE_write_clause = 321
    RULE_rollback_statement = 322
    RULE_savepoint_statement = 323
    RULE_explain_statement = 324
    RULE_select_statement = 325
    RULE_subquery_factoring_clause = 326
    RULE_factoring_element = 327
    RULE_search_clause = 328
    RULE_cycle_clause = 329
    RULE_subquery = 330
    RULE_subquery_operation_part = 331
    RULE_query_block = 332
    RULE_selected_element = 333
    RULE_from_clause = 334
    RULE_table_ref_pivot = 335
    RULE_table_ref = 336
    RULE_table_ref_aux = 337
    RULE_join_clause = 338
    RULE_join_on_part = 339
    RULE_join_using_part = 340
    RULE_join_type = 341
    RULE_query_partition_clause = 342
    RULE_flashback_query_clause = 343
    RULE_pivot_clause = 344
    RULE_pivot_element = 345
    RULE_pivot_for_clause = 346
    RULE_pivot_in_clause = 347
    RULE_pivot_in_clause_element = 348
    RULE_pivot_in_clause_elements = 349
    RULE_unpivot_clause = 350
    RULE_unpivot_in_clause = 351
    RULE_unpivot_in_elements = 352
    RULE_hierarchical_query_clause = 353
    RULE_start_part = 354
    RULE_group_by_clause = 355
    RULE_group_by_elements = 356
    RULE_rollup_cube_clause = 357
    RULE_grouping_sets_clause = 358
    RULE_grouping_sets_elements = 359
    RULE_having_clause = 360
    RULE_model_clause = 361
    RULE_cell_reference_options = 362
    RULE_return_rows_clause = 363
    RULE_reference_model = 364
    RULE_main_model = 365
    RULE_model_column_clauses = 366
    RULE_model_column_partition_part = 367
    RULE_model_column_list = 368
    RULE_model_column = 369
    RULE_model_rules_clause = 370
    RULE_model_rules_part = 371
    RULE_model_rules_element = 372
    RULE_cell_assignment = 373
    RULE_model_iterate_clause = 374
    RULE_until_part = 375
    RULE_order_by_clause = 376
    RULE_order_by_elements = 377
    RULE_for_update_clause = 378
    RULE_for_update_of_part = 379
    RULE_for_update_options = 380
    RULE_limit_clause = 381
    RULE_update_statement = 382
    RULE_update_set_clause = 383
    RULE_column_based_update_set_clause = 384
    RULE_delete_statement = 385
    RULE_insert_statement = 386
    RULE_single_table_insert = 387
    RULE_multi_table_insert = 388
    RULE_multi_table_element = 389
    RULE_conditional_insert_clause = 390
    RULE_conditional_insert_when_part = 391
    RULE_conditional_insert_else_part = 392
    RULE_insert_into_clause = 393
    RULE_values_clause = 394
    RULE_merge_statement = 395
    RULE_merge_update_clause = 396
    RULE_merge_element = 397
    RULE_merge_update_delete_part = 398
    RULE_merge_insert_clause = 399
    RULE_selected_tableview = 400
    RULE_lock_table_statement = 401
    RULE_wait_nowait_part = 402
    RULE_lock_table_element = 403
    RULE_lock_mode = 404
    RULE_general_table_ref = 405
    RULE_static_returning_clause = 406
    RULE_error_logging_clause = 407
    RULE_error_logging_into_part = 408
    RULE_error_logging_reject_part = 409
    RULE_dml_table_expression_clause = 410
    RULE_table_collection_expression = 411
    RULE_subquery_restriction_clause = 412
    RULE_sample_clause = 413
    RULE_seed_part = 414
    RULE_cursor_expression = 415
    RULE_expression_list = 416
    RULE_condition = 417
    RULE_expression = 418
    RULE_is_part = 419
    RULE_cursor_part = 420
    RULE_multiset_type = 421
    RULE_relational_operator = 422
    RULE_like_type = 423
    RULE_like_escape_part = 424
    RULE_between_elements = 425
    RULE_concatenation = 426
    RULE_binary_expression = 427
    RULE_interval_expression = 428
    RULE_model_expression = 429
    RULE_model_expression_element = 430
    RULE_single_column_for_loop = 431
    RULE_for_like_part = 432
    RULE_for_increment_decrement_type = 433
    RULE_multi_column_for_loop = 434
    RULE_unary_expression = 435
    RULE_case_statement = 436
    RULE_simple_case_statement = 437
    RULE_simple_case_when_part = 438
    RULE_searched_case_statement = 439
    RULE_searched_case_when_part = 440
    RULE_case_else_part = 441
    RULE_atom = 442
    RULE_expression_or_vector = 443
    RULE_vector_expr = 444
    RULE_quantified_expression = 445
    RULE_standard_function = 446
    RULE_aggregate_windowed_function = 447
    RULE_over_clause_keyword = 448
    RULE_within_or_over_clause_keyword = 449
    RULE_standard_prediction_function_keyword = 450
    RULE_over_clause = 451
    RULE_windowing_clause = 452
    RULE_windowing_type = 453
    RULE_windowing_elements = 454
    RULE_using_clause = 455
    RULE_using_element = 456
    RULE_collect_order_by_part = 457
    RULE_within_or_over_part = 458
    RULE_cost_matrix_clause = 459
    RULE_xml_passing_clause = 460
    RULE_xml_attributes_clause = 461
    RULE_xml_namespaces_clause = 462
    RULE_xml_table_column = 463
    RULE_xml_general_default_part = 464
    RULE_xml_multiuse_expression_element = 465
    RULE_xmlroot_param_version_part = 466
    RULE_xmlroot_param_standalone_part = 467
    RULE_xmlserialize_param_enconding_part = 468
    RULE_xmlserialize_param_version_part = 469
    RULE_xmlserialize_param_ident_part = 470
    RULE_sql_plus_command = 471
    RULE_whenever_command = 472
    RULE_set_command = 473
    RULE_exit_command = 474
    RULE_prompt_command = 475
    RULE_show_errors_command = 476
    RULE_partition_extension_clause = 477
    RULE_column_alias = 478
    RULE_table_alias = 479
    RULE_alias_quoted_string = 480
    RULE_where_clause = 481
    RULE_current_of_clause = 482
    RULE_into_clause = 483
    RULE_xml_column_name = 484
    RULE_cost_class_name = 485
    RULE_attribute_name = 486
    RULE_savepoint_name = 487
    RULE_rollback_segment_name = 488
    RULE_table_var_name = 489
    RULE_schema_name = 490
    RULE_routine_name = 491
    RULE_package_name = 492
    RULE_implementation_type_name = 493
    RULE_parameter_name = 494
    RULE_reference_model_name = 495
    RULE_main_model_name = 496
    RULE_aggregate_function_name = 497
    RULE_query_name = 498
    RULE_constraint_name = 499
    RULE_label_name = 500
    RULE_type_name = 501
    RULE_sequence_name = 502
    RULE_exception_name = 503
    RULE_function_name = 504
    RULE_procedure_name = 505
    RULE_trigger_name = 506
    RULE_variable_name = 507
    RULE_index_name = 508
    RULE_cursor_name = 509
    RULE_record_name = 510
    RULE_collection_name = 511
    RULE_link_name = 512
    RULE_column_name = 513
    RULE_role_name = 514
    RULE_tableview_name = 515
    RULE_dot_id = 516
    RULE_star = 517
    RULE_keep_clause = 518
    RULE_function_argument = 519
    RULE_function_argument_analytic = 520
    RULE_function_argument_modeling = 521
    RULE_respect_or_ignore_nulls = 522
    RULE_argument = 523
    RULE_type_spec = 524
    RULE_datatype = 525
    RULE_precision_part = 526
    RULE_native_datatype_element = 527
    RULE_bind_variable = 528
    RULE_general_element = 529
    RULE_table_element = 530
    RULE_constant = 531
    RULE_numeric = 532
    RULE_numeric_negative = 533
    RULE_quoted_string = 534
    RULE_r_id = 535
    RULE_id_expression = 536
    RULE_not_equal_op = 537
    RULE_greater_than_or_equals_op = 538
    RULE_less_than_or_equals_op = 539
    RULE_concatenation_op = 540
    RULE_outer_join_sign = 541
    RULE_regular_id = 542

    ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "sql_explain", "unit_statement", "unit_statement_body", 
                   "create_role", "role_option", "refresh_materialized_view", 
                   "create_materialized_view", "create_mv_refresh", "build_clause", 
                   "alter_permission", "permission_options", "create_view", 
                   "view_options", "view_alias_constraint", "create_index", 
                   "cluster_index_clause", "cluster_name", "index_attributes", 
                   "tablespace", "key_compression", "sort_or_nosort", "visible_or_invisible", 
                   "parallel_clause", "table_index_clause", "index_expr", 
                   "index_properties", "global_partitioned_index", "index_partitioning_clause", 
                   "partition_name", "literal", "string_function", "expressions", 
                   "individual_hash_partitions", "partitioning_storage_clause", 
                   "table_compression", "lob_partitioning_storage", "lob_item", 
                   "lob_segname", "varray_item", "hash_partitions_by_quantity", 
                   "hash_partition_quantity", "local_partitioned_index", 
                   "on_range_partitioned_table", "on_list_partitioned_table", 
                   "on_hash_partitioned_table", "on_comp_partitioned_table", 
                   "index_subpartition_clause", "subpartition_name", "domain_index_clause", 
                   "indextype", "odci_parameters", "local_domain_index_clause", 
                   "xmlindex_clause", "local_xmlindex_clause", "bitmap_join_index_clause", 
                   "create_table", "relational_table", "relational_properties", 
                   "column_definition", "inline_ref_constraint", "virtual_column_definition", 
                   "out_of_line_constraint", "foreign_key_clause", "on_delete_clause", 
                   "out_of_line_ref_constraint", "supplemental_logging_props", 
                   "supplemental_log_grp_clause", "log_grp", "supplemental_id_key_clause", 
                   "physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
                   "physical_attributes_clause", "storage_clause", "size_clause", 
                   "logging_clause", "column_properties", "object_type_col_properties", 
                   "substitutable_column_clause", "nested_table_col_properties", 
                   "nested_item", "object_properties", "inline_constraint", 
                   "references_clause", "paren_column_list", "column_list", 
                   "check_constraint", "constraint_state", "using_index_clause", 
                   "varray_col_properties", "varray_storage_clause", "lob_storage_parameters", 
                   "lob_parameters", "lob_retention_clause", "lob_deduplicate_clause", 
                   "lob_compression_clause", "encryption_spec", "lob_storage_clause", 
                   "xmltype_column_properties", "xmltype_storage", "xmlschema_spec", 
                   "allow_or_disallow", "table_partitioning_clauses", "range_partitions", 
                   "range_values_clause", "table_partition_description", 
                   "list_partitions", "list_values_clause", "hash_partitions", 
                   "composite_range_partitions", "subpartition_by_range", 
                   "subpartition_by_list", "subpartition_template", "range_subpartition_desc", 
                   "list_subpartition_desc", "individual_hash_subparts", 
                   "hash_subpartition_quantity", "subpartition_by_hash", 
                   "range_partition_desc", "hash_subparts_by_quantity", 
                   "composite_list_partitions", "list_partition_desc", "composite_hash_partitions", 
                   "reference_partitioning", "reference_partition_desc", 
                   "system_partitioning", "enable_disable_clause", "exceptions_clause", 
                   "row_movement_clause", "flashback_archive_clause", "object_table", 
                   "object_table_substitution", "oid_clause", "oid_index_clause", 
                   "xmltype_table", "xmltype_virtual_columns", "drop_table", 
                   "alter_table", "alter_table_properties", "alter_table_properties_1", 
                   "supplemental_table_logging", "allocate_extent_clause", 
                   "deallocate_unused_clause", "upgrade_table_clause", "records_per_block_clause", 
                   "alter_iot_clauses", "index_org_table_clause", "mapping_table_clause", 
                   "index_org_overflow_clause", "alter_overflow_clause", 
                   "add_overflow_clause", "shrink_clause", "alter_mapping_table_clause", 
                   "constraint_clauses", "old_constraint_name", "new_constraint_name", 
                   "drop_constraint_clause", "drop_primary_key_or_unique_or_generic_clause", 
                   "column_clauses", "add_modify_drop_column_clauses", "add_column_clause", 
                   "modify_column_clauses", "alter_column_clause", "modify_col_properties", 
                   "modify_col_substitutable", "drop_column_clause", "rename_column_clause", 
                   "old_column_name", "new_column_name", "modify_collection_retrieval", 
                   "collection_item", "modify_lob_storage_clause", "modify_lob_parameters", 
                   "drop_function", "alter_function", "create_function_body", 
                   "parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
                   "relies_on_part", "streaming_clause", "drop_package", 
                   "alter_package", "create_package", "package_body", "package_spec", 
                   "package_obj_spec", "procedure_spec", "function_spec", 
                   "package_obj_body", "drop_procedure", "alter_procedure", 
                   "create_procedure_body", "drop_trigger", "alter_trigger", 
                   "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
                   "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
                   "non_dml_trigger", "trigger_body", "routine_clause", 
                   "compound_trigger_block", "timing_point_section", "non_dml_event", 
                   "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
                   "referencing_clause", "referencing_element", "drop_type", 
                   "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assignment_statement", "continue_statement", 
                   "exit_statement", "goto_statement", "if_statement", "elsif_part", 
                   "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "data_manipulation_language_statements", "cursor_manipulation_statements", 
                   "close_statement", "open_statement", "fetch_statement", 
                   "open_for_statement", "transaction_control_statements", 
                   "set_transaction_command", "set_constraint_command", 
                   "commit_statement", "write_clause", "rollback_statement", 
                   "savepoint_statement", "explain_statement", "select_statement", 
                   "subquery_factoring_clause", "factoring_element", "search_clause", 
                   "cycle_clause", "subquery", "subquery_operation_part", 
                   "query_block", "selected_element", "from_clause", "table_ref_pivot", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "limit_clause", 
                   "update_statement", "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "expression", "is_part", "cursor_part", "multiset_type", 
                   "relational_operator", "like_type", "like_escape_part", 
                   "between_elements", "concatenation", "binary_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "aggregate_windowed_function", "over_clause_keyword", 
                   "within_or_over_clause_keyword", "standard_prediction_function_keyword", 
                   "over_clause", "windowing_clause", "windowing_type", 
                   "windowing_elements", "using_clause", "using_element", 
                   "collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
                   "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
                   "xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "role_name", "tableview_name", 
                   "dot_id", "star", "keep_clause", "function_argument", 
                   "function_argument_analytic", "function_argument_modeling", 
                   "respect_or_ignore_nulls", "argument", "type_spec", "datatype", 
                   "precision_part", "native_datatype_element", "bind_variable", 
                   "general_element", "table_element", "constant", "numeric", 
                   "numeric_negative", "quoted_string", "r_id", "id_expression", 
                   "not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    A_LETTER=4
    ADD=5
    AFTER=6
    AGENT=7
    AGGREGATE=8
    ALL=9
    ALLOCATE=10
    ALLOW=11
    ALTER=12
    ALWAYS=13
    ANALYZE=14
    AND=15
    ANY=16
    ANYSCHEMA=17
    ARCHIVE=18
    ARRAY=19
    AS=20
    ASC=21
    ASSOCIATE=22
    AT=23
    ATTRIBUTE=24
    AUDIT=25
    AUTHID=26
    AUTO=27
    AUTOMATIC=28
    AUTONOMOUS_TRANSACTION=29
    BASIC=30
    BASICFILE=31
    BATCH=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BFILE=36
    BINARY=37
    BINARY_DOUBLE=38
    BINARY_FLOAT=39
    BINARY_INTEGER=40
    BITMAP=41
    BUFFER_POOL=42
    BUILD=43
    BLOB=44
    BLOCK=45
    BODY=46
    BOOLEAN=47
    BOTH=48
    BREADTH=49
    BULK=50
    BY=51
    BYTE=52
    C_LETTER=53
    CACHE=54
    CALL=55
    CANONICAL=56
    CASCADE=57
    CASE=58
    CAST=59
    CHAR=60
    CHAR_CS=61
    CHARACTER=62
    CHECK=63
    CHECKPOINT=64
    CHR=65
    CHUNK=66
    CLOB=67
    CLOSE=68
    CLUSTER=69
    COALESCE=70
    COLLECT=71
    COLUMN=72
    COLUMNS=73
    COLUMN_VALUE=74
    COMMENT=75
    COMMIT=76
    COMMITTED=77
    COMPACT=78
    COMPATIBILITY=79
    COMPILE=80
    COMPLETE=81
    COMPOUND=82
    COMPRESS=83
    CONCAT=84
    CONNECT=85
    CONNECT_BY_ROOT=86
    CONSTANT=87
    CONSTRAINT=88
    CONSTRAINTS=89
    CONSTRUCTOR=90
    CONTENT=91
    CONTEXT=92
    CONTINUE=93
    CONVERT=94
    CORRUPT_XID=95
    CORRUPT_XID_ALL=96
    COST=97
    COUNT=98
    CREATE=99
    CREATEDB=100
    CREATEROLE=101
    CREATION=102
    CROSS=103
    CUBE=104
    CURRENT=105
    CURRENT_USER=106
    CURSOR=107
    CUSTOMDATUM=108
    CYCLE=109
    DATA=110
    DATABASE=111
    DATAFILE=112
    DATE=113
    DAY=114
    DB_ROLE_CHANGE=115
    DBTIMEZONE=116
    DDL=117
    DEBUG=118
    DEALLOCATE=119
    DEC=120
    DECIMAL=121
    DECLARE=122
    DECODE=123
    DECOMPOSE=124
    DECREMENT=125
    DECRYPT=126
    DEDUPLICATE=127
    DEFAULT=128
    DEFAULTS=129
    DEFERRABLE=130
    DEFERRED=131
    DEFINER=132
    DELETE=133
    DEMAND=134
    DEPTH=135
    DESC=136
    DETERMINISTIC=137
    DIMENSION=138
    DISABLE=139
    DISALLOW=140
    DISASSOCIATE=141
    DISTINCT=142
    DOCUMENT=143
    DOUBLE=144
    DROP=145
    DSINTERVAL_UNCONSTRAINED=146
    EACH=147
    EDITIONING=148
    ELEMENT=149
    ELSE=150
    ELSIF=151
    EMPTY=152
    ENABLE=153
    ENCODING=154
    ENCRYPT=155
    END=156
    ENFORCED=157
    ENTITYESCAPING=158
    ERR=159
    ERRORS=160
    ESCAPE=161
    EVALNAME=162
    EXCEPT=163
    EXCEPTION=164
    EXCEPTION_INIT=165
    EXCEPTIONS=166
    EXCLUDE=167
    EXCLUSIVE=168
    EXECUTE=169
    EXISTS=170
    EXIT=171
    EXPLAIN=172
    EXTENT=173
    EXTERNAL=174
    EXTRACT=175
    FAILURE=176
    FALSE=177
    FAST=178
    FETCH=179
    FILESYSTEM_LIKE_LOGGING=180
    FINAL=181
    FIRST=182
    FIRST_VALUE=183
    FLASHBACK=184
    FLASH_CACHE=185
    FLOAT=186
    FOLLOWING=187
    FOLLOWS=188
    FOR=189
    FORALL=190
    FORCE=191
    FOREIGN=192
    FREELIST=193
    FREELISTS=194
    FREEPOOLS=195
    FROM=196
    FULL=197
    FUNCTION=198
    GENERATED=199
    GLOBAL=200
    GOTO=201
    GRANT=202
    GROUP=203
    GROUPS=204
    GROUPING=205
    HASH=206
    HAVING=207
    HIDE=208
    HIGH=209
    HOUR=210
    IDENTIFIED=211
    IDENTIFIER=212
    IF=213
    IGNORE=214
    ILIKE=215
    IMMEDIATE=216
    IN=217
    INCLUDE=218
    INCLUDING=219
    INCREMENT=220
    INDENT=221
    INDEX=222
    INDEXED=223
    INDEXTYPE=224
    INDICATOR=225
    INDICES=226
    INFINITE=227
    INITIAL=228
    INITIALLY=229
    INITRANS=230
    INLINE=231
    INNER=232
    INOUT=233
    INSERT=234
    INSTANCE=235
    INSTANTIABLE=236
    INSTEAD=237
    INT=238
    INTEGER=239
    INTERSECT=240
    INTERVAL=241
    INTO=242
    INVALIDATE=243
    INVISIBLE=244
    IS=245
    ISOLATION=246
    ITERATE=247
    JAVA=248
    JOIN=249
    KEEP=250
    KEEP_DUPLICATES=251
    KEY=252
    LANGUAGE=253
    LAST=254
    LAST_VALUE=255
    LEADING=256
    LEFT=257
    LESS=258
    LEVEL=259
    LEVELS=260
    LIBRARY=261
    LIKE=262
    LIKE2=263
    LIKE4=264
    LIKEC=265
    LIMIT=266
    LIST=267
    LOCAL=268
    LOB=269
    LOBS=270
    LOCATOR=271
    LOCK=272
    LOCKED=273
    LOG=274
    LOGGING=275
    LOGOFF=276
    LOGIN=277
    LOGON=278
    LONG=279
    LOOP=280
    LOW=281
    MAIN=282
    MAP=283
    MAPPING=284
    MASTER=285
    MATCHED=286
    MAXEXTENTS=287
    MAXVALUE=288
    MEASURES=289
    MEDIUM=290
    MEMBER=291
    MERGE=292
    MINEXTENTS=293
    MINIMIZE=294
    MINUS=295
    MINUTE=296
    MINVALUE=297
    MLSLABEL=298
    MODE=299
    MODEL=300
    MODIFY=301
    MONTH=302
    MOVEMENT=303
    MULTISET=304
    NAME=305
    NAN=306
    NATURAL=307
    NATURALN=308
    NAV=309
    NCHAR=310
    NCHAR_CS=311
    NCLOB=312
    NESTED=313
    NEVER=314
    NEW=315
    NEXT=316
    NO=317
    NOAUDIT=318
    NOCACHE=319
    NOCOMPRESS=320
    NOCOPY=321
    NOCYCLE=322
    NOENTITYESCAPING=323
    NOLOGGING=324
    NOMAPPING=325
    NOMAXVALUE=326
    NOMINIMIZE=327
    NOMINVALUE=328
    NONE=329
    NONSCHEMA=330
    NOORDER=331
    NOPARALLEL=332
    NORELY=333
    NOROWDEPENDENCIES=334
    NOSCHEMACHECK=335
    NOSORT=336
    NOT=337
    NOVALIDATE=338
    NOWAIT=339
    NVL=340
    NULL=341
    NULLS=342
    NUMBER=343
    NUMERIC=344
    NVARCHAR2=345
    MATERIALIZED=346
    OBJECT=347
    OF=348
    OFF=349
    OID=350
    OIDINDEX=351
    OLD=352
    OLTP=353
    ON=354
    ONLY=355
    OPEN=356
    OPTIMAL=357
    OPTION=358
    OR=359
    ORADATA=360
    ORDER=361
    ORDINALITY=362
    OSERROR=363
    OUT=364
    OUTER=365
    OVER=366
    OVERFLOW=367
    OVERRIDING=368
    PACKAGE=369
    PARALLEL=370
    PARALLEL_ENABLE=371
    PARAMETERS=372
    PARENT=373
    PARTITION=374
    PASSING=375
    PATH=376
    PCTFREE=377
    PCTINCREASE=378
    PCTTHRESHOLD=379
    PCTUSED=380
    PCTVERSION=381
    PERCENT_ROWTYPE=382
    PERCENT_TYPE=383
    PIPELINED=384
    PIVOT=385
    PLAN=386
    PLS_INTEGER=387
    PARTITIONS=388
    POSITION=389
    POSITIVE=390
    POSITIVEN=391
    PRAGMA=392
    PREBUILT=393
    PRECEDING=394
    PRECISION=395
    PRESENT=396
    PRESERVE=397
    PRIMARY=398
    PRIOR=399
    PROCEDURE=400
    PUBLIC=401
    PURGE=402
    QUERY=403
    RAISE=404
    RANGE=405
    RAW=406
    READ=407
    READS=408
    REAL=409
    REBUILD=410
    RECORD=411
    RECORDS_PER_BLOCK=412
    RECYCLE=413
    REDUCED=414
    REF=415
    REFERENCE=416
    REFERENCES=417
    REFERENCING=418
    REFRESH=419
    REJECT=420
    REKEY=421
    RELATIONAL=422
    RELIES_ON=423
    RELY=424
    RENAME=425
    REPLACE=426
    RESPECT=427
    RESTRICT_REFERENCES=428
    RESULT=429
    RESULT_CACHE=430
    RETENTION=431
    RETURN=432
    RETURNING=433
    REUSE=434
    REVERSE=435
    REVOKE=436
    REWRITE=437
    RIGHT=438
    ROLE=439
    ROLLBACK=440
    ROLLUP=441
    ROW=442
    ROWDEPENDENCIES=443
    ROWID=444
    ROWS=445
    RULES=446
    SALT=447
    SAMPLE=448
    SAVE=449
    SAVEPOINT=450
    SCHEMA=451
    SCHEMACHECK=452
    SCN=453
    SCOPE=454
    SEARCH=455
    SECOND=456
    SECUREFILE=457
    SEED=458
    SEGMENT=459
    SELECT=460
    SELF=461
    SEQUENCE=462
    SEQUENTIAL=463
    SERIALIZABLE=464
    SERIALLY_REUSABLE=465
    SERVERERROR=466
    SESSIONTIMEZONE=467
    SET=468
    SETS=469
    SETTINGS=470
    SHARE=471
    SHOW=472
    SHRINK=473
    SHUTDOWN=474
    SIBLINGS=475
    SIGNTYPE=476
    SIMPLE_INTEGER=477
    SINGLE=478
    SIZE=479
    SKIP_=480
    SMALLINT=481
    SNAPSHOT=482
    SOME=483
    SORT=484
    SPACE_KEYWORD=485
    SPECIFICATION=486
    SQLDATA=487
    SQLERROR=488
    STANDALONE=489
    START=490
    STARTUP=491
    STATEMENT=492
    STATEMENT_ID=493
    STATIC=494
    STATISTICS=495
    STORAGE=496
    STORE=497
    STRING=498
    SUBMULTISET=499
    SUBPARTITION=500
    SUBPARTITIONS=501
    SUBSTITUTABLE=502
    SUBSTRING=503
    SUBTYPE=504
    SUCCESS=505
    SUPPLEMENTAL=506
    SUSPEND=507
    SYSTEM=508
    TABLE=509
    TABLES=510
    TABLESPACE=511
    TEMPLATE=512
    TEMPORARY=513
    THAN=514
    THE=515
    THEN=516
    TIME=517
    TIMESTAMP=518
    TIMESTAMP_LTZ_UNCONSTRAINED=519
    TIMESTAMP_TZ_UNCONSTRAINED=520
    TIMESTAMP_UNCONSTRAINED=521
    TIMEZONE_ABBR=522
    TIMEZONE_HOUR=523
    TIMEZONE_MINUTE=524
    TIMEZONE_REGION=525
    TO=526
    TO_CHAR=527
    TO_DATE=528
    TRAILING=529
    TRANSACTION=530
    TRANSLATE=531
    TREAT=532
    TRIGGER=533
    TRIM=534
    TRUE=535
    TRUNCATE=536
    TRUSTED=537
    TYPE=538
    UNBOUNDED=539
    UNDER=540
    UNION=541
    UNIQUE=542
    UNLIMITED=543
    UNPIVOT=544
    UNTIL=545
    UNUSABLE=546
    UNUSED=547
    UPDATE=548
    UPDATED=549
    UPGRADE=550
    UPSERT=551
    UROWID=552
    USE=553
    USING=554
    VALIDATE=555
    VALUE=556
    VALUES=557
    VARCHAR=558
    VARCHAR2=559
    VARIABLE=560
    VARRAY=561
    VARRAYS=562
    VARYING=563
    VERBOSE=564
    VERSION=565
    VERSIONS=566
    VIEW=567
    VIRTUAL=568
    VISIBLE=569
    WAIT=570
    WARNING=571
    WELLFORMED=572
    WHEN=573
    WHENEVER=574
    WHERE=575
    WHILE=576
    WITH=577
    WITHOUT=578
    WITHIN=579
    WORK=580
    WRITE=581
    XDB=582
    XML=583
    XMLAGG=584
    XMLATTRIBUTES=585
    XMLCAST=586
    XMLCOLATTVAL=587
    XMLELEMENT=588
    XMLEXISTS=589
    XMLFOREST=590
    XMLINDEX=591
    XMLNAMESPACES=592
    XMLPARSE=593
    XMLPI=594
    XMLQUERY=595
    XMLROOT=596
    XMLSCHEMA=597
    XMLSERIALIZE=598
    XMLTABLE=599
    XMLTYPE=600
    YEAR=601
    YES=602
    YMINTERVAL_UNCONSTRAINED=603
    ZONE=604
    PREDICTION=605
    PREDICTION_BOUNDS=606
    PREDICTION_COST=607
    PREDICTION_DETAILS=608
    PREDICTION_PROBABILITY=609
    PREDICTION_SET=610
    CUME_DIST=611
    DENSE_RANK=612
    LISTAGG=613
    PERCENT_RANK=614
    PERCENTILE_CONT=615
    PERCENTILE_DISC=616
    RANK=617
    AVG=618
    CORR=619
    LAG=620
    LEAD=621
    MAX=622
    MEDIAN=623
    MIN=624
    NTILE=625
    RATIO_TO_REPORT=626
    ROW_NUMBER=627
    SUM=628
    VARIANCE=629
    REGR_=630
    STDDEV=631
    VAR_=632
    COVAR_=633
    NATIONAL_CHAR_STRING_LIT=634
    BIT_STRING_LIT=635
    HEX_STRING_LIT=636
    DOUBLE_PERIOD=637
    PERIOD=638
    UNSIGNED_INTEGER=639
    APPROXIMATE_NUM_LIT=640
    CHAR_STRING=641
    DELIMITED_ID=642
    PERCENT=643
    AMPERSAND=644
    LEFT_PAREN=645
    RIGHT_PAREN=646
    DOUBLE_ASTERISK=647
    ASTERISK=648
    PLUS_SIGN=649
    MINUS_SIGN=650
    COMMA=651
    SOLIDUS=652
    AT_SIGN=653
    ASSIGN_OP=654
    BINDVAR=655
    COLON=656
    SEMICOLON=657
    LESS_THAN_OR_EQUALS_OP=658
    LESS_THAN_OP=659
    GREATER_THAN_OR_EQUALS_OP=660
    NOT_EQUAL_OP=661
    CARRET_OPERATOR_PART=662
    TILDE_OPERATOR_PART=663
    EXCLAMATION_OPERATOR_PART=664
    GREATER_THAN_OP=665
    CONCATENATION_OP=666
    VERTICAL_BAR=667
    EQUALS_OP=668
    LEFT_BRACKET=669
    RIGHT_BRACKET=670
    INTRODUCER=671
    SPACES=672
    SINGLE_LINE_COMMENT=673
    MULTI_LINE_COMMENT=674
    PROMPT=675
    REGULAR_ID=676
    ZV=677

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwallow_to_semi" ):
                return visitor.visitSwallow_to_semi(self)
            else:
                return visitor.visitChildren(self)




    def swallow_to_semi(self):

        localctx = plsqlParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1086
                _la = self._input.LA(1)
                if _la <= 0 or _la==plsqlParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1089 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.T__0) | (1 << plsqlParser.T__1) | (1 << plsqlParser.T__2) | (1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ALLOCATE) | (1 << plsqlParser.ALLOW) | (1 << plsqlParser.ALTER) | (1 << plsqlParser.ALWAYS) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.AND) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ANYSCHEMA) | (1 << plsqlParser.ARCHIVE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASC) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BASIC) | (1 << plsqlParser.BASICFILE) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BEGIN) | (1 << plsqlParser.BETWEEN) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BITMAP) | (1 << plsqlParser.BUFFER_POOL) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BREADTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BY) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CACHE) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CHECKPOINT - 64)) | (1 << (plsqlParser.CHR - 64)) | (1 << (plsqlParser.CHUNK - 64)) | (1 << (plsqlParser.CLOB - 64)) | (1 << (plsqlParser.CLOSE - 64)) | (1 << (plsqlParser.CLUSTER - 64)) | (1 << (plsqlParser.COALESCE - 64)) | (1 << (plsqlParser.COLLECT - 64)) | (1 << (plsqlParser.COLUMN - 64)) | (1 << (plsqlParser.COLUMNS - 64)) | (1 << (plsqlParser.COLUMN_VALUE - 64)) | (1 << (plsqlParser.COMMENT - 64)) | (1 << (plsqlParser.COMMIT - 64)) | (1 << (plsqlParser.COMMITTED - 64)) | (1 << (plsqlParser.COMPACT - 64)) | (1 << (plsqlParser.COMPATIBILITY - 64)) | (1 << (plsqlParser.COMPILE - 64)) | (1 << (plsqlParser.COMPLETE - 64)) | (1 << (plsqlParser.COMPOUND - 64)) | (1 << (plsqlParser.COMPRESS - 64)) | (1 << (plsqlParser.CONCAT - 64)) | (1 << (plsqlParser.CONNECT - 64)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CREATEDB - 64)) | (1 << (plsqlParser.CREATEROLE - 64)) | (1 << (plsqlParser.CREATION - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATAFILE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEALLOCATE - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECLARE - 64)) | (1 << (plsqlParser.DECODE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DECRYPT - 64)) | (1 << (plsqlParser.DEDUPLICATE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.DEFAULT - 128)) | (1 << (plsqlParser.DEFAULTS - 128)) | (1 << (plsqlParser.DEFERRABLE - 128)) | (1 << (plsqlParser.DEFERRED - 128)) | (1 << (plsqlParser.DEFINER - 128)) | (1 << (plsqlParser.DELETE - 128)) | (1 << (plsqlParser.DEMAND - 128)) | (1 << (plsqlParser.DEPTH - 128)) | (1 << (plsqlParser.DESC - 128)) | (1 << (plsqlParser.DETERMINISTIC - 128)) | (1 << (plsqlParser.DIMENSION - 128)) | (1 << (plsqlParser.DISABLE - 128)) | (1 << (plsqlParser.DISALLOW - 128)) | (1 << (plsqlParser.DISASSOCIATE - 128)) | (1 << (plsqlParser.DISTINCT - 128)) | (1 << (plsqlParser.DOCUMENT - 128)) | (1 << (plsqlParser.DOUBLE - 128)) | (1 << (plsqlParser.DROP - 128)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (plsqlParser.EACH - 128)) | (1 << (plsqlParser.EDITIONING - 128)) | (1 << (plsqlParser.ELEMENT - 128)) | (1 << (plsqlParser.ELSE - 128)) | (1 << (plsqlParser.ELSIF - 128)) | (1 << (plsqlParser.EMPTY - 128)) | (1 << (plsqlParser.ENABLE - 128)) | (1 << (plsqlParser.ENCODING - 128)) | (1 << (plsqlParser.ENCRYPT - 128)) | (1 << (plsqlParser.END - 128)) | (1 << (plsqlParser.ENFORCED - 128)) | (1 << (plsqlParser.ENTITYESCAPING - 128)) | (1 << (plsqlParser.ERR - 128)) | (1 << (plsqlParser.ERRORS - 128)) | (1 << (plsqlParser.ESCAPE - 128)) | (1 << (plsqlParser.EVALNAME - 128)) | (1 << (plsqlParser.EXCEPT - 128)) | (1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXCLUSIVE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTENT - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FAST - 128)) | (1 << (plsqlParser.FETCH - 128)) | (1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLASHBACK - 128)) | (1 << (plsqlParser.FLASH_CACHE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FOR - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.FOREIGN - 192)) | (1 << (plsqlParser.FREELIST - 192)) | (1 << (plsqlParser.FREELISTS - 192)) | (1 << (plsqlParser.FREEPOOLS - 192)) | (1 << (plsqlParser.FROM - 192)) | (1 << (plsqlParser.FULL - 192)) | (1 << (plsqlParser.FUNCTION - 192)) | (1 << (plsqlParser.GENERATED - 192)) | (1 << (plsqlParser.GLOBAL - 192)) | (1 << (plsqlParser.GOTO - 192)) | (1 << (plsqlParser.GRANT - 192)) | (1 << (plsqlParser.GROUP - 192)) | (1 << (plsqlParser.GROUPS - 192)) | (1 << (plsqlParser.GROUPING - 192)) | (1 << (plsqlParser.HASH - 192)) | (1 << (plsqlParser.HAVING - 192)) | (1 << (plsqlParser.HIDE - 192)) | (1 << (plsqlParser.HIGH - 192)) | (1 << (plsqlParser.HOUR - 192)) | (1 << (plsqlParser.IDENTIFIED - 192)) | (1 << (plsqlParser.IDENTIFIER - 192)) | (1 << (plsqlParser.IF - 192)) | (1 << (plsqlParser.IGNORE - 192)) | (1 << (plsqlParser.ILIKE - 192)) | (1 << (plsqlParser.IMMEDIATE - 192)) | (1 << (plsqlParser.IN - 192)) | (1 << (plsqlParser.INCLUDE - 192)) | (1 << (plsqlParser.INCLUDING - 192)) | (1 << (plsqlParser.INCREMENT - 192)) | (1 << (plsqlParser.INDENT - 192)) | (1 << (plsqlParser.INDEX - 192)) | (1 << (plsqlParser.INDEXED - 192)) | (1 << (plsqlParser.INDEXTYPE - 192)) | (1 << (plsqlParser.INDICATOR - 192)) | (1 << (plsqlParser.INDICES - 192)) | (1 << (plsqlParser.INFINITE - 192)) | (1 << (plsqlParser.INITIAL - 192)) | (1 << (plsqlParser.INITIALLY - 192)) | (1 << (plsqlParser.INITRANS - 192)) | (1 << (plsqlParser.INLINE - 192)) | (1 << (plsqlParser.INNER - 192)) | (1 << (plsqlParser.INOUT - 192)) | (1 << (plsqlParser.INSERT - 192)) | (1 << (plsqlParser.INSTANCE - 192)) | (1 << (plsqlParser.INSTANTIABLE - 192)) | (1 << (plsqlParser.INSTEAD - 192)) | (1 << (plsqlParser.INT - 192)) | (1 << (plsqlParser.INTEGER - 192)) | (1 << (plsqlParser.INTERSECT - 192)) | (1 << (plsqlParser.INTERVAL - 192)) | (1 << (plsqlParser.INTO - 192)) | (1 << (plsqlParser.INVALIDATE - 192)) | (1 << (plsqlParser.INVISIBLE - 192)) | (1 << (plsqlParser.IS - 192)) | (1 << (plsqlParser.ISOLATION - 192)) | (1 << (plsqlParser.ITERATE - 192)) | (1 << (plsqlParser.JAVA - 192)) | (1 << (plsqlParser.JOIN - 192)) | (1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.KEEP_DUPLICATES - 192)) | (1 << (plsqlParser.KEY - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.LEADING - 256)) | (1 << (plsqlParser.LEFT - 256)) | (1 << (plsqlParser.LESS - 256)) | (1 << (plsqlParser.LEVEL - 256)) | (1 << (plsqlParser.LEVELS - 256)) | (1 << (plsqlParser.LIBRARY - 256)) | (1 << (plsqlParser.LIKE - 256)) | (1 << (plsqlParser.LIKE2 - 256)) | (1 << (plsqlParser.LIKE4 - 256)) | (1 << (plsqlParser.LIKEC - 256)) | (1 << (plsqlParser.LIMIT - 256)) | (1 << (plsqlParser.LIST - 256)) | (1 << (plsqlParser.LOCAL - 256)) | (1 << (plsqlParser.LOB - 256)) | (1 << (plsqlParser.LOBS - 256)) | (1 << (plsqlParser.LOCATOR - 256)) | (1 << (plsqlParser.LOCK - 256)) | (1 << (plsqlParser.LOCKED - 256)) | (1 << (plsqlParser.LOG - 256)) | (1 << (plsqlParser.LOGGING - 256)) | (1 << (plsqlParser.LOGOFF - 256)) | (1 << (plsqlParser.LOGIN - 256)) | (1 << (plsqlParser.LOGON - 256)) | (1 << (plsqlParser.LONG - 256)) | (1 << (plsqlParser.LOOP - 256)) | (1 << (plsqlParser.LOW - 256)) | (1 << (plsqlParser.MAIN - 256)) | (1 << (plsqlParser.MAP - 256)) | (1 << (plsqlParser.MAPPING - 256)) | (1 << (plsqlParser.MASTER - 256)) | (1 << (plsqlParser.MATCHED - 256)) | (1 << (plsqlParser.MAXEXTENTS - 256)) | (1 << (plsqlParser.MAXVALUE - 256)) | (1 << (plsqlParser.MEASURES - 256)) | (1 << (plsqlParser.MEDIUM - 256)) | (1 << (plsqlParser.MEMBER - 256)) | (1 << (plsqlParser.MERGE - 256)) | (1 << (plsqlParser.MINEXTENTS - 256)) | (1 << (plsqlParser.MINIMIZE - 256)) | (1 << (plsqlParser.MINUS - 256)) | (1 << (plsqlParser.MINUTE - 256)) | (1 << (plsqlParser.MINVALUE - 256)) | (1 << (plsqlParser.MLSLABEL - 256)) | (1 << (plsqlParser.MODE - 256)) | (1 << (plsqlParser.MODEL - 256)) | (1 << (plsqlParser.MODIFY - 256)) | (1 << (plsqlParser.MONTH - 256)) | (1 << (plsqlParser.MOVEMENT - 256)) | (1 << (plsqlParser.MULTISET - 256)) | (1 << (plsqlParser.NAME - 256)) | (1 << (plsqlParser.NAN - 256)) | (1 << (plsqlParser.NATURAL - 256)) | (1 << (plsqlParser.NATURALN - 256)) | (1 << (plsqlParser.NAV - 256)) | (1 << (plsqlParser.NCHAR - 256)) | (1 << (plsqlParser.NCHAR_CS - 256)) | (1 << (plsqlParser.NCLOB - 256)) | (1 << (plsqlParser.NESTED - 256)) | (1 << (plsqlParser.NEVER - 256)) | (1 << (plsqlParser.NEW - 256)) | (1 << (plsqlParser.NEXT - 256)) | (1 << (plsqlParser.NO - 256)) | (1 << (plsqlParser.NOAUDIT - 256)) | (1 << (plsqlParser.NOCACHE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOCOMPRESS - 320)) | (1 << (plsqlParser.NOCOPY - 320)) | (1 << (plsqlParser.NOCYCLE - 320)) | (1 << (plsqlParser.NOENTITYESCAPING - 320)) | (1 << (plsqlParser.NOLOGGING - 320)) | (1 << (plsqlParser.NOMAPPING - 320)) | (1 << (plsqlParser.NOMAXVALUE - 320)) | (1 << (plsqlParser.NOMINIMIZE - 320)) | (1 << (plsqlParser.NOMINVALUE - 320)) | (1 << (plsqlParser.NONE - 320)) | (1 << (plsqlParser.NONSCHEMA - 320)) | (1 << (plsqlParser.NOORDER - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NORELY - 320)) | (1 << (plsqlParser.NOROWDEPENDENCIES - 320)) | (1 << (plsqlParser.NOSCHEMACHECK - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.NOT - 320)) | (1 << (plsqlParser.NOVALIDATE - 320)) | (1 << (plsqlParser.NOWAIT - 320)) | (1 << (plsqlParser.NVL - 320)) | (1 << (plsqlParser.NULL - 320)) | (1 << (plsqlParser.NULLS - 320)) | (1 << (plsqlParser.NUMBER - 320)) | (1 << (plsqlParser.NUMERIC - 320)) | (1 << (plsqlParser.NVARCHAR2 - 320)) | (1 << (plsqlParser.MATERIALIZED - 320)) | (1 << (plsqlParser.OBJECT - 320)) | (1 << (plsqlParser.OF - 320)) | (1 << (plsqlParser.OFF - 320)) | (1 << (plsqlParser.OID - 320)) | (1 << (plsqlParser.OIDINDEX - 320)) | (1 << (plsqlParser.OLD - 320)) | (1 << (plsqlParser.OLTP - 320)) | (1 << (plsqlParser.ON - 320)) | (1 << (plsqlParser.ONLY - 320)) | (1 << (plsqlParser.OPEN - 320)) | (1 << (plsqlParser.OPTIMAL - 320)) | (1 << (plsqlParser.OPTION - 320)) | (1 << (plsqlParser.OR - 320)) | (1 << (plsqlParser.ORADATA - 320)) | (1 << (plsqlParser.ORDER - 320)) | (1 << (plsqlParser.ORDINALITY - 320)) | (1 << (plsqlParser.OSERROR - 320)) | (1 << (plsqlParser.OUT - 320)) | (1 << (plsqlParser.OUTER - 320)) | (1 << (plsqlParser.OVER - 320)) | (1 << (plsqlParser.OVERFLOW - 320)) | (1 << (plsqlParser.OVERRIDING - 320)) | (1 << (plsqlParser.PACKAGE - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PARALLEL_ENABLE - 320)) | (1 << (plsqlParser.PARAMETERS - 320)) | (1 << (plsqlParser.PARENT - 320)) | (1 << (plsqlParser.PARTITION - 320)) | (1 << (plsqlParser.PASSING - 320)) | (1 << (plsqlParser.PATH - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTINCREASE - 320)) | (1 << (plsqlParser.PCTTHRESHOLD - 320)) | (1 << (plsqlParser.PCTUSED - 320)) | (1 << (plsqlParser.PCTVERSION - 320)) | (1 << (plsqlParser.PERCENT_ROWTYPE - 320)) | (1 << (plsqlParser.PERCENT_TYPE - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.PIPELINED - 384)) | (1 << (plsqlParser.PIVOT - 384)) | (1 << (plsqlParser.PLAN - 384)) | (1 << (plsqlParser.PLS_INTEGER - 384)) | (1 << (plsqlParser.PARTITIONS - 384)) | (1 << (plsqlParser.POSITION - 384)) | (1 << (plsqlParser.POSITIVE - 384)) | (1 << (plsqlParser.POSITIVEN - 384)) | (1 << (plsqlParser.PRAGMA - 384)) | (1 << (plsqlParser.PREBUILT - 384)) | (1 << (plsqlParser.PRECEDING - 384)) | (1 << (plsqlParser.PRECISION - 384)) | (1 << (plsqlParser.PRESENT - 384)) | (1 << (plsqlParser.PRESERVE - 384)) | (1 << (plsqlParser.PRIMARY - 384)) | (1 << (plsqlParser.PRIOR - 384)) | (1 << (plsqlParser.PROCEDURE - 384)) | (1 << (plsqlParser.PUBLIC - 384)) | (1 << (plsqlParser.PURGE - 384)) | (1 << (plsqlParser.QUERY - 384)) | (1 << (plsqlParser.RAISE - 384)) | (1 << (plsqlParser.RANGE - 384)) | (1 << (plsqlParser.RAW - 384)) | (1 << (plsqlParser.READ - 384)) | (1 << (plsqlParser.READS - 384)) | (1 << (plsqlParser.REAL - 384)) | (1 << (plsqlParser.REBUILD - 384)) | (1 << (plsqlParser.RECORD - 384)) | (1 << (plsqlParser.RECORDS_PER_BLOCK - 384)) | (1 << (plsqlParser.RECYCLE - 384)) | (1 << (plsqlParser.REDUCED - 384)) | (1 << (plsqlParser.REF - 384)) | (1 << (plsqlParser.REFERENCE - 384)) | (1 << (plsqlParser.REFERENCES - 384)) | (1 << (plsqlParser.REFERENCING - 384)) | (1 << (plsqlParser.REFRESH - 384)) | (1 << (plsqlParser.REJECT - 384)) | (1 << (plsqlParser.REKEY - 384)) | (1 << (plsqlParser.RELATIONAL - 384)) | (1 << (plsqlParser.RELIES_ON - 384)) | (1 << (plsqlParser.RELY - 384)) | (1 << (plsqlParser.RENAME - 384)) | (1 << (plsqlParser.REPLACE - 384)) | (1 << (plsqlParser.RESPECT - 384)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 384)) | (1 << (plsqlParser.RESULT - 384)) | (1 << (plsqlParser.RESULT_CACHE - 384)) | (1 << (plsqlParser.RETENTION - 384)) | (1 << (plsqlParser.RETURN - 384)) | (1 << (plsqlParser.RETURNING - 384)) | (1 << (plsqlParser.REUSE - 384)) | (1 << (plsqlParser.REVERSE - 384)) | (1 << (plsqlParser.REVOKE - 384)) | (1 << (plsqlParser.REWRITE - 384)) | (1 << (plsqlParser.RIGHT - 384)) | (1 << (plsqlParser.ROLE - 384)) | (1 << (plsqlParser.ROLLBACK - 384)) | (1 << (plsqlParser.ROLLUP - 384)) | (1 << (plsqlParser.ROW - 384)) | (1 << (plsqlParser.ROWDEPENDENCIES - 384)) | (1 << (plsqlParser.ROWID - 384)) | (1 << (plsqlParser.ROWS - 384)) | (1 << (plsqlParser.RULES - 384)) | (1 << (plsqlParser.SALT - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.SAMPLE - 448)) | (1 << (plsqlParser.SAVE - 448)) | (1 << (plsqlParser.SAVEPOINT - 448)) | (1 << (plsqlParser.SCHEMA - 448)) | (1 << (plsqlParser.SCHEMACHECK - 448)) | (1 << (plsqlParser.SCN - 448)) | (1 << (plsqlParser.SCOPE - 448)) | (1 << (plsqlParser.SEARCH - 448)) | (1 << (plsqlParser.SECOND - 448)) | (1 << (plsqlParser.SECUREFILE - 448)) | (1 << (plsqlParser.SEED - 448)) | (1 << (plsqlParser.SEGMENT - 448)) | (1 << (plsqlParser.SELECT - 448)) | (1 << (plsqlParser.SELF - 448)) | (1 << (plsqlParser.SEQUENCE - 448)) | (1 << (plsqlParser.SEQUENTIAL - 448)) | (1 << (plsqlParser.SERIALIZABLE - 448)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 448)) | (1 << (plsqlParser.SERVERERROR - 448)) | (1 << (plsqlParser.SESSIONTIMEZONE - 448)) | (1 << (plsqlParser.SET - 448)) | (1 << (plsqlParser.SETS - 448)) | (1 << (plsqlParser.SETTINGS - 448)) | (1 << (plsqlParser.SHARE - 448)) | (1 << (plsqlParser.SHOW - 448)) | (1 << (plsqlParser.SHRINK - 448)) | (1 << (plsqlParser.SHUTDOWN - 448)) | (1 << (plsqlParser.SIBLINGS - 448)) | (1 << (plsqlParser.SIGNTYPE - 448)) | (1 << (plsqlParser.SIMPLE_INTEGER - 448)) | (1 << (plsqlParser.SINGLE - 448)) | (1 << (plsqlParser.SIZE - 448)) | (1 << (plsqlParser.SKIP_ - 448)) | (1 << (plsqlParser.SMALLINT - 448)) | (1 << (plsqlParser.SNAPSHOT - 448)) | (1 << (plsqlParser.SOME - 448)) | (1 << (plsqlParser.SORT - 448)) | (1 << (plsqlParser.SPACE_KEYWORD - 448)) | (1 << (plsqlParser.SPECIFICATION - 448)) | (1 << (plsqlParser.SQLDATA - 448)) | (1 << (plsqlParser.SQLERROR - 448)) | (1 << (plsqlParser.STANDALONE - 448)) | (1 << (plsqlParser.START - 448)) | (1 << (plsqlParser.STARTUP - 448)) | (1 << (plsqlParser.STATEMENT - 448)) | (1 << (plsqlParser.STATEMENT_ID - 448)) | (1 << (plsqlParser.STATIC - 448)) | (1 << (plsqlParser.STATISTICS - 448)) | (1 << (plsqlParser.STORAGE - 448)) | (1 << (plsqlParser.STORE - 448)) | (1 << (plsqlParser.STRING - 448)) | (1 << (plsqlParser.SUBMULTISET - 448)) | (1 << (plsqlParser.SUBPARTITION - 448)) | (1 << (plsqlParser.SUBPARTITIONS - 448)) | (1 << (plsqlParser.SUBSTITUTABLE - 448)) | (1 << (plsqlParser.SUBSTRING - 448)) | (1 << (plsqlParser.SUBTYPE - 448)) | (1 << (plsqlParser.SUCCESS - 448)) | (1 << (plsqlParser.SUPPLEMENTAL - 448)) | (1 << (plsqlParser.SUSPEND - 448)) | (1 << (plsqlParser.SYSTEM - 448)) | (1 << (plsqlParser.TABLE - 448)) | (1 << (plsqlParser.TABLES - 448)) | (1 << (plsqlParser.TABLESPACE - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (plsqlParser.TEMPLATE - 512)) | (1 << (plsqlParser.TEMPORARY - 512)) | (1 << (plsqlParser.THAN - 512)) | (1 << (plsqlParser.THE - 512)) | (1 << (plsqlParser.THEN - 512)) | (1 << (plsqlParser.TIME - 512)) | (1 << (plsqlParser.TIMESTAMP - 512)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 512)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 512)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 512)) | (1 << (plsqlParser.TIMEZONE_ABBR - 512)) | (1 << (plsqlParser.TIMEZONE_HOUR - 512)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 512)) | (1 << (plsqlParser.TIMEZONE_REGION - 512)) | (1 << (plsqlParser.TO - 512)) | (1 << (plsqlParser.TO_CHAR - 512)) | (1 << (plsqlParser.TO_DATE - 512)) | (1 << (plsqlParser.TRAILING - 512)) | (1 << (plsqlParser.TRANSACTION - 512)) | (1 << (plsqlParser.TRANSLATE - 512)) | (1 << (plsqlParser.TREAT - 512)) | (1 << (plsqlParser.TRIGGER - 512)) | (1 << (plsqlParser.TRIM - 512)) | (1 << (plsqlParser.TRUE - 512)) | (1 << (plsqlParser.TRUNCATE - 512)) | (1 << (plsqlParser.TRUSTED - 512)) | (1 << (plsqlParser.TYPE - 512)) | (1 << (plsqlParser.UNBOUNDED - 512)) | (1 << (plsqlParser.UNDER - 512)) | (1 << (plsqlParser.UNION - 512)) | (1 << (plsqlParser.UNIQUE - 512)) | (1 << (plsqlParser.UNLIMITED - 512)) | (1 << (plsqlParser.UNPIVOT - 512)) | (1 << (plsqlParser.UNTIL - 512)) | (1 << (plsqlParser.UNUSABLE - 512)) | (1 << (plsqlParser.UNUSED - 512)) | (1 << (plsqlParser.UPDATE - 512)) | (1 << (plsqlParser.UPDATED - 512)) | (1 << (plsqlParser.UPGRADE - 512)) | (1 << (plsqlParser.UPSERT - 512)) | (1 << (plsqlParser.UROWID - 512)) | (1 << (plsqlParser.USE - 512)) | (1 << (plsqlParser.USING - 512)) | (1 << (plsqlParser.VALIDATE - 512)) | (1 << (plsqlParser.VALUE - 512)) | (1 << (plsqlParser.VALUES - 512)) | (1 << (plsqlParser.VARCHAR - 512)) | (1 << (plsqlParser.VARCHAR2 - 512)) | (1 << (plsqlParser.VARIABLE - 512)) | (1 << (plsqlParser.VARRAY - 512)) | (1 << (plsqlParser.VARRAYS - 512)) | (1 << (plsqlParser.VARYING - 512)) | (1 << (plsqlParser.VERBOSE - 512)) | (1 << (plsqlParser.VERSION - 512)) | (1 << (plsqlParser.VERSIONS - 512)) | (1 << (plsqlParser.VIEW - 512)) | (1 << (plsqlParser.VIRTUAL - 512)) | (1 << (plsqlParser.VISIBLE - 512)) | (1 << (plsqlParser.WAIT - 512)) | (1 << (plsqlParser.WARNING - 512)) | (1 << (plsqlParser.WELLFORMED - 512)) | (1 << (plsqlParser.WHEN - 512)) | (1 << (plsqlParser.WHENEVER - 512)) | (1 << (plsqlParser.WHERE - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (plsqlParser.WHILE - 576)) | (1 << (plsqlParser.WITH - 576)) | (1 << (plsqlParser.WITHOUT - 576)) | (1 << (plsqlParser.WITHIN - 576)) | (1 << (plsqlParser.WORK - 576)) | (1 << (plsqlParser.WRITE - 576)) | (1 << (plsqlParser.XDB - 576)) | (1 << (plsqlParser.XML - 576)) | (1 << (plsqlParser.XMLAGG - 576)) | (1 << (plsqlParser.XMLATTRIBUTES - 576)) | (1 << (plsqlParser.XMLCAST - 576)) | (1 << (plsqlParser.XMLCOLATTVAL - 576)) | (1 << (plsqlParser.XMLELEMENT - 576)) | (1 << (plsqlParser.XMLEXISTS - 576)) | (1 << (plsqlParser.XMLFOREST - 576)) | (1 << (plsqlParser.XMLINDEX - 576)) | (1 << (plsqlParser.XMLNAMESPACES - 576)) | (1 << (plsqlParser.XMLPARSE - 576)) | (1 << (plsqlParser.XMLPI - 576)) | (1 << (plsqlParser.XMLQUERY - 576)) | (1 << (plsqlParser.XMLROOT - 576)) | (1 << (plsqlParser.XMLSCHEMA - 576)) | (1 << (plsqlParser.XMLSERIALIZE - 576)) | (1 << (plsqlParser.XMLTABLE - 576)) | (1 << (plsqlParser.XMLTYPE - 576)) | (1 << (plsqlParser.YEAR - 576)) | (1 << (plsqlParser.YES - 576)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 576)) | (1 << (plsqlParser.ZONE - 576)) | (1 << (plsqlParser.PREDICTION - 576)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 576)) | (1 << (plsqlParser.PREDICTION_COST - 576)) | (1 << (plsqlParser.PREDICTION_DETAILS - 576)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 576)) | (1 << (plsqlParser.PREDICTION_SET - 576)) | (1 << (plsqlParser.CUME_DIST - 576)) | (1 << (plsqlParser.DENSE_RANK - 576)) | (1 << (plsqlParser.LISTAGG - 576)) | (1 << (plsqlParser.PERCENT_RANK - 576)) | (1 << (plsqlParser.PERCENTILE_CONT - 576)) | (1 << (plsqlParser.PERCENTILE_DISC - 576)) | (1 << (plsqlParser.RANK - 576)) | (1 << (plsqlParser.AVG - 576)) | (1 << (plsqlParser.CORR - 576)) | (1 << (plsqlParser.LAG - 576)) | (1 << (plsqlParser.LEAD - 576)) | (1 << (plsqlParser.MAX - 576)) | (1 << (plsqlParser.MEDIAN - 576)) | (1 << (plsqlParser.MIN - 576)) | (1 << (plsqlParser.NTILE - 576)) | (1 << (plsqlParser.RATIO_TO_REPORT - 576)) | (1 << (plsqlParser.ROW_NUMBER - 576)) | (1 << (plsqlParser.SUM - 576)) | (1 << (plsqlParser.VARIANCE - 576)) | (1 << (plsqlParser.REGR_ - 576)) | (1 << (plsqlParser.STDDEV - 576)) | (1 << (plsqlParser.VAR_ - 576)) | (1 << (plsqlParser.COVAR_ - 576)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 576)) | (1 << (plsqlParser.BIT_STRING_LIT - 576)) | (1 << (plsqlParser.HEX_STRING_LIT - 576)) | (1 << (plsqlParser.DOUBLE_PERIOD - 576)) | (1 << (plsqlParser.PERIOD - 576)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (plsqlParser.APPROXIMATE_NUM_LIT - 640)) | (1 << (plsqlParser.CHAR_STRING - 640)) | (1 << (plsqlParser.DELIMITED_ID - 640)) | (1 << (plsqlParser.PERCENT - 640)) | (1 << (plsqlParser.AMPERSAND - 640)) | (1 << (plsqlParser.LEFT_PAREN - 640)) | (1 << (plsqlParser.RIGHT_PAREN - 640)) | (1 << (plsqlParser.DOUBLE_ASTERISK - 640)) | (1 << (plsqlParser.ASTERISK - 640)) | (1 << (plsqlParser.PLUS_SIGN - 640)) | (1 << (plsqlParser.MINUS_SIGN - 640)) | (1 << (plsqlParser.COMMA - 640)) | (1 << (plsqlParser.SOLIDUS - 640)) | (1 << (plsqlParser.AT_SIGN - 640)) | (1 << (plsqlParser.ASSIGN_OP - 640)) | (1 << (plsqlParser.BINDVAR - 640)) | (1 << (plsqlParser.COLON - 640)) | (1 << (plsqlParser.LESS_THAN_OR_EQUALS_OP - 640)) | (1 << (plsqlParser.LESS_THAN_OP - 640)) | (1 << (plsqlParser.GREATER_THAN_OR_EQUALS_OP - 640)) | (1 << (plsqlParser.NOT_EQUAL_OP - 640)) | (1 << (plsqlParser.CARRET_OPERATOR_PART - 640)) | (1 << (plsqlParser.TILDE_OPERATOR_PART - 640)) | (1 << (plsqlParser.EXCLAMATION_OPERATOR_PART - 640)) | (1 << (plsqlParser.GREATER_THAN_OP - 640)) | (1 << (plsqlParser.CONCATENATION_OP - 640)) | (1 << (plsqlParser.VERTICAL_BAR - 640)) | (1 << (plsqlParser.EQUALS_OP - 640)) | (1 << (plsqlParser.LEFT_BRACKET - 640)) | (1 << (plsqlParser.RIGHT_BRACKET - 640)) | (1 << (plsqlParser.INTRODUCER - 640)) | (1 << (plsqlParser.SPACES - 640)) | (1 << (plsqlParser.SINGLE_LINE_COMMENT - 640)) | (1 << (plsqlParser.MULTI_LINE_COMMENT - 640)) | (1 << (plsqlParser.PROMPT - 640)) | (1 << (plsqlParser.REGULAR_ID - 640)) | (1 << (plsqlParser.ZV - 640)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_unit" ):
                return visitor.visitCompilation_unit(self)
            else:
                return visitor.visitChildren(self)




    def compilation_unit(self):

        localctx = plsqlParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ALTER or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (plsqlParser.CREATE - 99)) | (1 << (plsqlParser.DELETE - 99)) | (1 << (plsqlParser.DROP - 99)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (plsqlParser.EXPLAIN - 172)) | (1 << (plsqlParser.FUNCTION - 172)) | (1 << (plsqlParser.GRANT - 172)) | (1 << (plsqlParser.INSERT - 172)))) != 0) or _la==plsqlParser.LOCK or _la==plsqlParser.MERGE or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (plsqlParser.PROCEDURE - 400)) | (1 << (plsqlParser.REFRESH - 400)) | (1 << (plsqlParser.REVOKE - 400)) | (1 << (plsqlParser.SELECT - 400)))) != 0) or _la==plsqlParser.UPDATE or _la==plsqlParser.WITH or _la==plsqlParser.LEFT_PAREN:
                self.state = 1091
                self.unit_statement()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1097
            self.match(plsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sql_plus_commandContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_script" ):
                return visitor.visitSql_script(self)
            else:
                return visitor.visitChildren(self)




    def sql_script(self):

        localctx = plsqlParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALTER or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (plsqlParser.CREATE - 99)) | (1 << (plsqlParser.DELETE - 99)) | (1 << (plsqlParser.DROP - 99)))) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (plsqlParser.EXIT - 171)) | (1 << (plsqlParser.EXPLAIN - 171)) | (1 << (plsqlParser.FUNCTION - 171)) | (1 << (plsqlParser.GRANT - 171)) | (1 << (plsqlParser.INSERT - 171)))) != 0) or _la==plsqlParser.LOCK or _la==plsqlParser.MERGE or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (plsqlParser.PROCEDURE - 400)) | (1 << (plsqlParser.REFRESH - 400)) | (1 << (plsqlParser.REVOKE - 400)) | (1 << (plsqlParser.SELECT - 400)))) != 0) or _la==plsqlParser.SET or _la==plsqlParser.SHOW or ((((_la - 548)) & ~0x3f) == 0 and ((1 << (_la - 548)) & ((1 << (plsqlParser.UPDATE - 548)) | (1 << (plsqlParser.WHENEVER - 548)) | (1 << (plsqlParser.WITH - 548)))) != 0) or ((((_la - 645)) & ~0x3f) == 0 and ((1 << (_la - 645)) & ((1 << (plsqlParser.LEFT_PAREN - 645)) | (1 << (plsqlParser.SOLIDUS - 645)) | (1 << (plsqlParser.PROMPT - 645)))) != 0):
                self.state = 1101
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.REFRESH, plsqlParser.REVOKE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                    self.state = 1099
                    self.unit_statement()
                    pass
                elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                    self.state = 1100
                    self.sql_plus_command()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1110
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1103
                        self.match(plsqlParser.SEMICOLON)
                        self.state = 1106
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.REFRESH, plsqlParser.REVOKE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                            self.state = 1104
                            self.unit_statement()
                            pass
                        elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                            self.state = 1105
                            self.sql_plus_command()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1112
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.SEMICOLON:
                    self.state = 1113
                    self.match(plsqlParser.SEMICOLON)




            self.state = 1118
            self.match(plsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_explainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def VERBOSE(self):
            return self.getToken(plsqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sql_explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_explain" ):
                listener.enterSql_explain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_explain" ):
                listener.exitSql_explain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_explain" ):
                return visitor.visitSql_explain(self)
            else:
                return visitor.visitChildren(self)




    def sql_explain(self):

        localctx = plsqlParser.Sql_explainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_explain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(plsqlParser.EXPLAIN)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ANALYZE:
                self.state = 1121
                self.match(plsqlParser.ANALYZE)


            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VERBOSE:
                self.state = 1124
                self.match(plsqlParser.VERBOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_statement_body(self):
            return self.getTypedRuleContext(plsqlParser.Unit_statement_bodyContext,0)


        def sql_explain(self):
            return self.getTypedRuleContext(plsqlParser.Sql_explainContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement" ):
                return visitor.visitUnit_statement(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement(self):

        localctx = plsqlParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unit_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1127
                self.sql_explain()


            self.state = 1130
            self.unit_statement_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statement_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function(self):
            return self.getTypedRuleContext(plsqlParser.Alter_functionContext,0)


        def alter_package(self):
            return self.getTypedRuleContext(plsqlParser.Alter_packageContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Alter_procedureContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Alter_sequenceContext,0)


        def alter_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Alter_triggerContext,0)


        def alter_type(self):
            return self.getTypedRuleContext(plsqlParser.Alter_typeContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(plsqlParser.Alter_tableContext,0)


        def alter_permission(self):
            return self.getTypedRuleContext(plsqlParser.Alter_permissionContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_package(self):
            return self.getTypedRuleContext(plsqlParser.Create_packageContext,0)


        def create_index(self):
            return self.getTypedRuleContext(plsqlParser.Create_indexContext,0)


        def create_table(self):
            return self.getTypedRuleContext(plsqlParser.Create_tableContext,0)


        def create_view(self):
            return self.getTypedRuleContext(plsqlParser.Create_viewContext,0)


        def create_materialized_view(self):
            return self.getTypedRuleContext(plsqlParser.Create_materialized_viewContext,0)


        def refresh_materialized_view(self):
            return self.getTypedRuleContext(plsqlParser.Refresh_materialized_viewContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Create_sequenceContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(plsqlParser.Create_typeContext,0)


        def create_role(self):
            return self.getTypedRuleContext(plsqlParser.Create_roleContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(plsqlParser.Drop_functionContext,0)


        def drop_package(self):
            return self.getTypedRuleContext(plsqlParser.Drop_packageContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Drop_procedureContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Drop_sequenceContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(plsqlParser.Drop_typeContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(plsqlParser.Drop_tableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_unit_statement_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement_body" ):
                listener.enterUnit_statement_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement_body" ):
                listener.exitUnit_statement_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement_body" ):
                return visitor.visitUnit_statement_body(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement_body(self):

        localctx = plsqlParser.Unit_statement_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unit_statement_body)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1132
                self.alter_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1133
                self.alter_package()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.alter_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1135
                self.alter_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1136
                self.alter_trigger()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1137
                self.alter_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1138
                self.alter_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1139
                self.alter_permission()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1140
                self.create_function_body()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1141
                self.create_procedure_body()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1142
                self.create_package()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1143
                self.create_index()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1144
                self.create_table()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1145
                self.create_view()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1146
                self.create_materialized_view()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1147
                self.refresh_materialized_view()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1148
                self.create_sequence()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1149
                self.create_trigger()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1150
                self.create_type()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1151
                self.create_role()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1152
                self.drop_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1153
                self.drop_package()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1154
                self.drop_procedure()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1155
                self.drop_sequence()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1156
                self.drop_trigger()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1157
                self.drop_type()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1158
                self.data_manipulation_language_statements()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1159
                self.drop_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(plsqlParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(plsqlParser.Role_nameContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def role_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Role_optionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Role_optionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_role" ):
                listener.enterCreate_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_role" ):
                listener.exitCreate_role(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_role" ):
                return visitor.visitCreate_role(self)
            else:
                return visitor.visitChildren(self)




    def create_role(self):

        localctx = plsqlParser.Create_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_create_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(plsqlParser.CREATE)
            self.state = 1163
            self.match(plsqlParser.ROLE)
            self.state = 1164
            self.role_name()
            self.state = 1173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WITH:
                    self.state = 1165
                    self.match(plsqlParser.WITH)


                self.state = 1169 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1168
                    self.role_option()
                    self.state = 1171 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.CREATEDB or _la==plsqlParser.CREATEROLE or _la==plsqlParser.LOGIN):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGIN(self):
            return self.getToken(plsqlParser.LOGIN, 0)

        def CREATEDB(self):
            return self.getToken(plsqlParser.CREATEDB, 0)

        def CREATEROLE(self):
            return self.getToken(plsqlParser.CREATEROLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_role_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_option" ):
                listener.enterRole_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_option" ):
                listener.exitRole_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_option" ):
                return visitor.visitRole_option(self)
            else:
                return visitor.visitChildren(self)




    def role_option(self):

        localctx = plsqlParser.Role_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_role_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CREATEDB or _la==plsqlParser.CREATEROLE or _la==plsqlParser.LOGIN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Refresh_materialized_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(plsqlParser.REFRESH, 0)

        def MATERIALIZED(self):
            return self.getToken(plsqlParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(plsqlParser.VIEW, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_refresh_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefresh_materialized_view" ):
                listener.enterRefresh_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefresh_materialized_view" ):
                listener.exitRefresh_materialized_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefresh_materialized_view" ):
                return visitor.visitRefresh_materialized_view(self)
            else:
                return visitor.visitChildren(self)




    def refresh_materialized_view(self):

        localctx = plsqlParser.Refresh_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_refresh_materialized_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(plsqlParser.REFRESH)
            self.state = 1178
            self.match(plsqlParser.MATERIALIZED)
            self.state = 1179
            self.match(plsqlParser.VIEW)
            self.state = 1180
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_materialized_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mv_tablespace = None # Id_expressionContext

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(plsqlParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(plsqlParser.VIEW, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def PREBUILT(self):
            return self.getToken(plsqlParser.PREBUILT, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def create_mv_refresh(self):
            return self.getTypedRuleContext(plsqlParser.Create_mv_refreshContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def QUERY(self):
            return self.getToken(plsqlParser.QUERY, 0)

        def REWRITE(self):
            return self.getToken(plsqlParser.REWRITE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def REDUCED(self):
            return self.getToken(plsqlParser.REDUCED, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def build_clause(self):
            return self.getTypedRuleContext(plsqlParser.Build_clauseContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(plsqlParser.WITHOUT, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_materialized_view" ):
                listener.enterCreate_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_materialized_view" ):
                listener.exitCreate_materialized_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_materialized_view" ):
                return visitor.visitCreate_materialized_view(self)
            else:
                return visitor.visitChildren(self)




    def create_materialized_view(self):

        localctx = plsqlParser.Create_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_create_materialized_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(plsqlParser.CREATE)
            self.state = 1183
            self.match(plsqlParser.MATERIALIZED)
            self.state = 1184
            self.match(plsqlParser.VIEW)
            self.state = 1185
            self.tableview_name()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OF:
                self.state = 1186
                self.match(plsqlParser.OF)
                self.state = 1187
                self.type_name()


            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ON]:
                self.state = 1190
                self.match(plsqlParser.ON)
                self.state = 1191
                self.match(plsqlParser.PREBUILT)
                self.state = 1192
                self.match(plsqlParser.TABLE)
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WITH or _la==plsqlParser.WITHOUT:
                    self.state = 1193
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.WITH or _la==plsqlParser.WITHOUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1194
                    self.match(plsqlParser.REDUCED)
                    self.state = 1195
                    self.match(plsqlParser.PRECISION)


                pass
            elif token in [plsqlParser.AS, plsqlParser.BUILD, plsqlParser.CACHE, plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.FOR, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NEVER, plsqlParser.NOCACHE, plsqlParser.NOLOGGING, plsqlParser.NOPARALLEL, plsqlParser.PARALLEL, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.REFRESH, plsqlParser.SEGMENT, plsqlParser.STORAGE, plsqlParser.TABLESPACE, plsqlParser.USING]:
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (plsqlParser.SEGMENT - 459)) | (1 << (plsqlParser.STORAGE - 459)) | (1 << (plsqlParser.TABLESPACE - 459)))) != 0):
                    self.state = 1198
                    self.physical_properties()


                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                    self.state = 1201
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                    self.state = 1204
                    self.parallel_clause()


                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.BUILD:
                    self.state = 1207
                    self.build_clause()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1212
                self.match(plsqlParser.USING)
                self.state = 1213
                self.match(plsqlParser.INDEX)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.INITRANS or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1217 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1217
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                                self.state = 1214
                                self.physical_attributes_clause()
                                pass
                            elif token in [plsqlParser.TABLESPACE]:
                                self.state = 1215
                                self.match(plsqlParser.TABLESPACE)
                                self.state = 1216
                                localctx.mv_tablespace = self.id_expression()
                                pass
                            else:
                                raise NoViableAltException(self)


                        else:
                            raise NoViableAltException(self)
                        self.state = 1219 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif la_ == 2:
                self.state = 1226
                self.match(plsqlParser.USING)
                self.state = 1227
                self.match(plsqlParser.NO)
                self.state = 1228
                self.match(plsqlParser.INDEX)


            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NEVER or _la==plsqlParser.REFRESH:
                self.state = 1231
                self.create_mv_refresh()


            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 1234
                self.match(plsqlParser.FOR)
                self.state = 1235
                self.match(plsqlParser.UPDATE)


            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE:
                self.state = 1238
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1239
                self.match(plsqlParser.QUERY)
                self.state = 1240
                self.match(plsqlParser.REWRITE)


            self.state = 1243
            self.match(plsqlParser.AS)
            self.state = 1244
            self.subquery(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_mv_refreshContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rb_segment = None # Token

        def NEVER(self):
            return self.getToken(plsqlParser.NEVER, 0)

        def REFRESH(self):
            return self.getToken(plsqlParser.REFRESH, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ON)
            else:
                return self.getToken(plsqlParser.ON, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.WITH)
            else:
                return self.getToken(plsqlParser.WITH, i)

        def USING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.USING)
            else:
                return self.getToken(plsqlParser.USING, i)

        def CONSTRAINTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CONSTRAINTS)
            else:
                return self.getToken(plsqlParser.CONSTRAINTS, i)

        def FAST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FAST)
            else:
                return self.getToken(plsqlParser.FAST, i)

        def COMPLETE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMPLETE)
            else:
                return self.getToken(plsqlParser.COMPLETE, i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FORCE)
            else:
                return self.getToken(plsqlParser.FORCE, i)

        def DEMAND(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEMAND)
            else:
                return self.getToken(plsqlParser.DEMAND, i)

        def COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMIT)
            else:
                return self.getToken(plsqlParser.COMMIT, i)

        def ENFORCED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENFORCED)
            else:
                return self.getToken(plsqlParser.ENFORCED, i)

        def TRUSTED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TRUSTED)
            else:
                return self.getToken(plsqlParser.TRUSTED, i)

        def START(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.START)
            else:
                return self.getToken(plsqlParser.START, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NEXT)
            else:
                return self.getToken(plsqlParser.NEXT, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PRIMARY)
            else:
                return self.getToken(plsqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.KEY)
            else:
                return self.getToken(plsqlParser.KEY, i)

        def ROWID(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROWID)
            else:
                return self.getToken(plsqlParser.ROWID, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def ROLLBACK(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROLLBACK)
            else:
                return self.getToken(plsqlParser.ROLLBACK, i)

        def SEGMENT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEGMENT)
            else:
                return self.getToken(plsqlParser.SEGMENT, i)

        def REGULAR_ID(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REGULAR_ID)
            else:
                return self.getToken(plsqlParser.REGULAR_ID, i)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MASTER)
            else:
                return self.getToken(plsqlParser.MASTER, i)

        def LOCAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOCAL)
            else:
                return self.getToken(plsqlParser.LOCAL, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_mv_refresh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_mv_refresh" ):
                listener.enterCreate_mv_refresh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_mv_refresh" ):
                listener.exitCreate_mv_refresh(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_mv_refresh" ):
                return visitor.visitCreate_mv_refresh(self)
            else:
                return visitor.visitChildren(self)




    def create_mv_refresh(self):

        localctx = plsqlParser.Create_mv_refreshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_mv_refresh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NEVER]:
                self.state = 1246
                self.match(plsqlParser.NEVER)
                self.state = 1247
                self.match(plsqlParser.REFRESH)
                pass
            elif token in [plsqlParser.REFRESH]:
                self.state = 1248
                self.match(plsqlParser.REFRESH)
                self.state = 1281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 1249
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.COMPLETE or _la==plsqlParser.FAST or _la==plsqlParser.FORCE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 1250
                        self.match(plsqlParser.ON)
                        self.state = 1251
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.COMMIT or _la==plsqlParser.DEMAND):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 3:
                        self.state = 1255
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.START]:
                            self.state = 1252
                            self.match(plsqlParser.START)
                            self.state = 1253
                            self.match(plsqlParser.WITH)
                            pass
                        elif token in [plsqlParser.NEXT]:
                            self.state = 1254
                            self.match(plsqlParser.NEXT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 1257
                        self.match(plsqlParser.WITH)
                        self.state = 1261
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.PRIMARY]:
                            self.state = 1258
                            self.match(plsqlParser.PRIMARY)
                            self.state = 1259
                            self.match(plsqlParser.KEY)
                            pass
                        elif token in [plsqlParser.ROWID]:
                            self.state = 1260
                            self.match(plsqlParser.ROWID)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 5:
                        self.state = 1263
                        self.match(plsqlParser.USING)
                        self.state = 1276
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.DEFAULT]:
                            self.state = 1264
                            self.match(plsqlParser.DEFAULT)
                            self.state = 1266
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.LOCAL or _la==plsqlParser.MASTER:
                                self.state = 1265
                                _la = self._input.LA(1)
                                if not(_la==plsqlParser.LOCAL or _la==plsqlParser.MASTER):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()


                            self.state = 1268
                            self.match(plsqlParser.ROLLBACK)
                            self.state = 1269
                            self.match(plsqlParser.SEGMENT)
                            pass
                        elif token in [plsqlParser.LOCAL, plsqlParser.MASTER, plsqlParser.ROLLBACK]:
                            self.state = 1271
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.LOCAL or _la==plsqlParser.MASTER:
                                self.state = 1270
                                _la = self._input.LA(1)
                                if not(_la==plsqlParser.LOCAL or _la==plsqlParser.MASTER):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()


                            self.state = 1273
                            self.match(plsqlParser.ROLLBACK)
                            self.state = 1274
                            self.match(plsqlParser.SEGMENT)
                            self.state = 1275
                            localctx.rb_segment = self.match(plsqlParser.REGULAR_ID)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 1278
                        self.match(plsqlParser.USING)
                        self.state = 1279
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ENFORCED or _la==plsqlParser.TRUSTED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1280
                        self.match(plsqlParser.CONSTRAINTS)
                        pass


                    self.state = 1283 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMPLETE or _la==plsqlParser.FAST or _la==plsqlParser.FORCE or _la==plsqlParser.NEXT or _la==plsqlParser.ON or _la==plsqlParser.START or _la==plsqlParser.USING or _la==plsqlParser.WITH):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD(self):
            return self.getToken(plsqlParser.BUILD, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_build_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_clause" ):
                listener.enterBuild_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_clause" ):
                listener.exitBuild_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuild_clause" ):
                return visitor.visitBuild_clause(self)
            else:
                return visitor.visitChildren(self)




    def build_clause(self):

        localctx = plsqlParser.Build_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_build_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(plsqlParser.BUILD)
            self.state = 1288
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(plsqlParser.REVOKE, 0)

        def permission_options(self):
            return self.getTypedRuleContext(plsqlParser.Permission_optionsContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def PUBLIC(self):
            return self.getToken(plsqlParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Role_nameContext,i)


        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_permission" ):
                listener.enterAlter_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_permission" ):
                listener.exitAlter_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_permission" ):
                return visitor.visitAlter_permission(self)
            else:
                return visitor.visitChildren(self)




    def alter_permission(self):

        localctx = plsqlParser.Alter_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alter_permission)
        self._la = 0 # Token type
        try:
            self.state = 1356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self.match(plsqlParser.REVOKE)
                self.state = 1291
                self.permission_options()
                self.state = 1292
                self.match(plsqlParser.ON)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TABLE:
                    self.state = 1293
                    self.match(plsqlParser.TABLE)


                self.state = 1296
                self.tableview_name()
                self.state = 1297
                self.match(plsqlParser.FROM)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.GROUP:
                    self.state = 1298
                    self.match(plsqlParser.GROUP)


                self.state = 1303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1301
                    self.match(plsqlParser.PUBLIC)
                    pass

                elif la_ == 2:
                    self.state = 1302
                    self.role_name()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(plsqlParser.GRANT)
                self.state = 1306
                self.permission_options()
                self.state = 1307
                self.match(plsqlParser.ON)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TABLE:
                    self.state = 1308
                    self.match(plsqlParser.TABLE)


                self.state = 1311
                self.tableview_name()
                self.state = 1312
                self.match(plsqlParser.TO)
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.GROUP:
                    self.state = 1313
                    self.match(plsqlParser.GROUP)


                self.state = 1318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 1316
                    self.match(plsqlParser.PUBLIC)
                    pass

                elif la_ == 2:
                    self.state = 1317
                    self.role_name()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1320
                self.match(plsqlParser.GRANT)
                self.state = 1321
                self.role_name()
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1322
                    self.match(plsqlParser.COMMA)
                    self.state = 1323
                    self.role_name()
                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1329
                self.match(plsqlParser.TO)
                self.state = 1330
                self.role_name()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1331
                    self.match(plsqlParser.COMMA)
                    self.state = 1332
                    self.role_name()
                    self.state = 1337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1338
                self.match(plsqlParser.REVOKE)
                self.state = 1339
                self.role_name()
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1340
                    self.match(plsqlParser.COMMA)
                    self.state = 1341
                    self.role_name()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1347
                self.match(plsqlParser.FROM)
                self.state = 1348
                self.role_name()
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1349
                    self.match(plsqlParser.COMMA)
                    self.state = 1350
                    self.role_name()
                    self.state = 1355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Permission_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELECT)
            else:
                return self.getToken(plsqlParser.SELECT, i)

        def INSERT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INSERT)
            else:
                return self.getToken(plsqlParser.INSERT, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UPDATE)
            else:
                return self.getToken(plsqlParser.UPDATE, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DELETE)
            else:
                return self.getToken(plsqlParser.DELETE, i)

        def TRUNCATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TRUNCATE)
            else:
                return self.getToken(plsqlParser.TRUNCATE, i)

        def REFERENCES(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REFERENCES)
            else:
                return self.getToken(plsqlParser.REFERENCES, i)

        def TRIGGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TRIGGER)
            else:
                return self.getToken(plsqlParser.TRIGGER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_permission_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermission_options" ):
                listener.enterPermission_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermission_options" ):
                listener.exitPermission_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPermission_options" ):
                return visitor.visitPermission_options(self)
            else:
                return visitor.visitChildren(self)




    def permission_options(self):

        localctx = plsqlParser.Permission_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_permission_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1358
                    self.match(plsqlParser.COMMA)


                self.state = 1361
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.INSERT or _la==plsqlParser.REFERENCES or _la==plsqlParser.SELECT or ((((_la - 533)) & ~0x3f) == 0 and ((1 << (_la - 533)) & ((1 << (plsqlParser.TRIGGER - 533)) | (1 << (plsqlParser.TRUNCATE - 533)) | (1 << (plsqlParser.UPDATE - 533)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.DELETE or _la==plsqlParser.INSERT or _la==plsqlParser.REFERENCES or _la==plsqlParser.SELECT or ((((_la - 533)) & ~0x3f) == 0 and ((1 << (_la - 533)) & ((1 << (plsqlParser.TRIGGER - 533)) | (1 << (plsqlParser.TRUNCATE - 533)) | (1 << (plsqlParser.UPDATE - 533)))) != 0) or _la==plsqlParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(plsqlParser.VIEW, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def EDITIONING(self):
            return self.getToken(plsqlParser.EDITIONING, 0)

        def view_options(self):
            return self.getTypedRuleContext(plsqlParser.View_optionsContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_restriction_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view" ):
                return visitor.visitCreate_view(self)
            else:
                return visitor.visitChildren(self)




    def create_view(self):

        localctx = plsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(plsqlParser.CREATE)
            self.state = 1369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.match(plsqlParser.OR)
                self.state = 1368
                self.match(plsqlParser.REPLACE)


            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE or _la==plsqlParser.OR:
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 1371
                    self.match(plsqlParser.OR)


                self.state = 1374
                self.match(plsqlParser.FORCE)


            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EDITIONING:
                self.state = 1377
                self.match(plsqlParser.EDITIONING)


            self.state = 1380
            self.match(plsqlParser.VIEW)
            self.state = 1381
            self.tableview_name()
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1382
                self.view_options()


            self.state = 1385
            self.match(plsqlParser.AS)
            self.state = 1386
            self.subquery(0)
            self.state = 1388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 1387
                self.subquery_restriction_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def view_alias_constraint(self):
            return self.getTypedRuleContext(plsqlParser.View_alias_constraintContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_view_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_options" ):
                listener.enterView_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_options" ):
                listener.exitView_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_options" ):
                return visitor.visitView_options(self)
            else:
                return visitor.visitChildren(self)




    def view_options(self):

        localctx = plsqlParser.View_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_view_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.view_alias_constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_alias_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_aliasContext,i)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_view_alias_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_alias_constraint" ):
                listener.enterView_alias_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_alias_constraint" ):
                listener.exitView_alias_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_alias_constraint" ):
                return visitor.visitView_alias_constraint(self)
            else:
                return visitor.visitChildren(self)




    def view_alias_constraint(self):

        localctx = plsqlParser.View_alias_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_view_alias_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1406 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1393
                    self.match(plsqlParser.COMMA)


                self.state = 1404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 1396
                    self.table_alias()
                    self.state = 1400
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1397
                            self.inline_constraint() 
                        self.state = 1402
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 1403
                    self.out_of_line_constraint()
                    pass


                self.state = 1408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FOREIGN - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIMARY - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNIQUE - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 1410
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def cluster_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cluster_index_clauseContext,0)


        def table_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Table_index_clauseContext,0)


        def bitmap_join_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Bitmap_join_index_clauseContext,0)


        def UNUSABLE(self):
            return self.getToken(plsqlParser.UNUSABLE, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def BITMAP(self):
            return self.getToken(plsqlParser.BITMAP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = plsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(plsqlParser.CREATE)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BITMAP or _la==plsqlParser.UNIQUE:
                self.state = 1413
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BITMAP or _la==plsqlParser.UNIQUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1416
            self.match(plsqlParser.INDEX)
            self.state = 1417
            self.index_name()
            self.state = 1418
            self.match(plsqlParser.ON)
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1419
                self.cluster_index_clause()
                pass

            elif la_ == 2:
                self.state = 1420
                self.table_index_clause()
                pass

            elif la_ == 3:
                self.state = 1421
                self.bitmap_join_index_clause()
                pass


            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.UNUSABLE:
                self.state = 1424
                self.match(plsqlParser.UNUSABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def cluster_name(self):
            return self.getTypedRuleContext(plsqlParser.Cluster_nameContext,0)


        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cluster_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_index_clause" ):
                listener.enterCluster_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_index_clause" ):
                listener.exitCluster_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCluster_index_clause" ):
                return visitor.visitCluster_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def cluster_index_clause(self):

        localctx = plsqlParser.Cluster_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_cluster_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(plsqlParser.CLUSTER)
            self.state = 1428
            self.cluster_name()
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.INVISIBLE or _la==plsqlParser.LOGGING or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOCOMPRESS - 320)) | (1 << (plsqlParser.NOLOGGING - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTUSED - 320)))) != 0) or ((((_la - 435)) & ~0x3f) == 0 and ((1 << (_la - 435)) & ((1 << (plsqlParser.REVERSE - 435)) | (1 << (plsqlParser.SORT - 435)) | (1 << (plsqlParser.STORAGE - 435)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 1429
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cluster_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_name" ):
                listener.enterCluster_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_name" ):
                listener.exitCluster_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCluster_name" ):
                return visitor.visitCluster_name(self)
            else:
                return visitor.visitChildren(self)




    def cluster_name(self):

        localctx = plsqlParser.Cluster_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_cluster_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1432
                self.id_expression()
                self.state = 1433
                self.match(plsqlParser.PERIOD)


            self.state = 1437
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def sort_or_nosort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sort_or_nosortContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sort_or_nosortContext,i)


        def REVERSE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REVERSE)
            else:
                return self.getToken(plsqlParser.REVERSE, i)

        def visible_or_invisible(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Visible_or_invisibleContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Visible_or_invisibleContext,i)


        def parallel_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,i)


        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_attributes" ):
                listener.enterIndex_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_attributes" ):
                listener.exitIndex_attributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_attributes" ):
                return visitor.visitIndex_attributes(self)
            else:
                return visitor.visitChildren(self)




    def index_attributes(self):

        localctx = plsqlParser.Index_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_index_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1451
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 1439
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 1440
                        self.logging_clause()
                        pass
                    elif token in [plsqlParser.TABLESPACE]:
                        self.state = 1441
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1444
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                            self.state = 1442
                            self.tablespace()
                            pass
                        elif token in [plsqlParser.DEFAULT]:
                            self.state = 1443
                            self.match(plsqlParser.DEFAULT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                        self.state = 1446
                        self.key_compression()
                        pass
                    elif token in [plsqlParser.NOSORT, plsqlParser.SORT]:
                        self.state = 1447
                        self.sort_or_nosort()
                        pass
                    elif token in [plsqlParser.REVERSE]:
                        self.state = 1448
                        self.match(plsqlParser.REVERSE)
                        pass
                    elif token in [plsqlParser.INVISIBLE, plsqlParser.VISIBLE]:
                        self.state = 1449
                        self.visible_or_invisible()
                        pass
                    elif token in [plsqlParser.NOPARALLEL, plsqlParser.PARALLEL]:
                        self.state = 1450
                        self.parallel_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1453 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_tablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespace" ):
                listener.enterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespace" ):
                listener.exitTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespace" ):
                return visitor.visitTablespace(self)
            else:
                return visitor.visitChildren(self)




    def tablespace(self):

        localctx = plsqlParser.TablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_key_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_compression" ):
                listener.enterKey_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_compression" ):
                listener.exitKey_compression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_compression" ):
                return visitor.visitKey_compression(self)
            else:
                return visitor.visitChildren(self)




    def key_compression(self):

        localctx = plsqlParser.Key_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_key_compression)
        try:
            self.state = 1460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.match(plsqlParser.NOCOMPRESS)
                pass
            elif token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(plsqlParser.COMPRESS)
                self.state = 1459
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_or_nosortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SORT(self):
            return self.getToken(plsqlParser.SORT, 0)

        def NOSORT(self):
            return self.getToken(plsqlParser.NOSORT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sort_or_nosort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_or_nosort" ):
                listener.enterSort_or_nosort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_or_nosort" ):
                listener.exitSort_or_nosort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_or_nosort" ):
                return visitor.visitSort_or_nosort(self)
            else:
                return visitor.visitChildren(self)




    def sort_or_nosort(self):

        localctx = plsqlParser.Sort_or_nosortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sort_or_nosort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            _la = self._input.LA(1)
            if not(_la==plsqlParser.NOSORT or _la==plsqlParser.SORT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Visible_or_invisibleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBLE(self):
            return self.getToken(plsqlParser.VISIBLE, 0)

        def INVISIBLE(self):
            return self.getToken(plsqlParser.INVISIBLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_visible_or_invisible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisible_or_invisible" ):
                listener.enterVisible_or_invisible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisible_or_invisible" ):
                listener.exitVisible_or_invisible(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisible_or_invisible" ):
                return visitor.visitVisible_or_invisible(self)
            else:
                return visitor.visitChildren(self)




    def visible_or_invisible(self):

        localctx = plsqlParser.Visible_or_invisibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_visible_or_invisible)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            _la = self._input.LA(1)
            if not(_la==plsqlParser.INVISIBLE or _la==plsqlParser.VISIBLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parallel_count = None # Token

        def NOPARALLEL(self):
            return self.getToken(plsqlParser.NOPARALLEL, 0)

        def PARALLEL(self):
            return self.getToken(plsqlParser.PARALLEL, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_parallel_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_clause" ):
                listener.enterParallel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_clause" ):
                listener.exitParallel_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_clause" ):
                return visitor.visitParallel_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_clause(self):

        localctx = plsqlParser.Parallel_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parallel_clause)
        self._la = 0 # Token type
        try:
            self.state = 1471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOPARALLEL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.match(plsqlParser.NOPARALLEL)
                pass
            elif token in [plsqlParser.PARALLEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.match(plsqlParser.PARALLEL)
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNSIGNED_INTEGER:
                    self.state = 1468
                    localctx.parallel_count = self.match(plsqlParser.UNSIGNED_INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def index_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_exprContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_exprContext,i)


        def index_properties(self):
            return self.getTypedRuleContext(plsqlParser.Index_propertiesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_index_clause" ):
                listener.enterTable_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_index_clause" ):
                listener.exitTable_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_index_clause" ):
                return visitor.visitTable_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def table_index_clause(self):

        localctx = plsqlParser.Table_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_table_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.tableview_name()
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1474
                self.table_alias()


            self.state = 1477
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1478
                    self.match(plsqlParser.COMMA)


                self.state = 1481
                self.index_expr()
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC or _la==plsqlParser.DESC:
                    self.state = 1482
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DISTINCT - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXISTS - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FALSE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NOT - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIOR - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELECT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUE - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 586)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)) | (1 << (plsqlParser.LEFT_PAREN - 586)) | (1 << (plsqlParser.PLUS_SIGN - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (plsqlParser.MINUS_SIGN - 650)) | (1 << (plsqlParser.COMMA - 650)) | (1 << (plsqlParser.BINDVAR - 650)) | (1 << (plsqlParser.COLON - 650)) | (1 << (plsqlParser.REGULAR_ID - 650)))) != 0)):
                    break

            self.state = 1489
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 180)) | (1 << (plsqlParser.GLOBAL - 180)) | (1 << (plsqlParser.INDEXTYPE - 180)) | (1 << (plsqlParser.INITRANS - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (plsqlParser.INVISIBLE - 244)) | (1 << (plsqlParser.LOCAL - 244)) | (1 << (plsqlParser.LOGGING - 244)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOCOMPRESS - 320)) | (1 << (plsqlParser.NOLOGGING - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTUSED - 320)))) != 0) or ((((_la - 435)) & ~0x3f) == 0 and ((1 << (_la - 435)) & ((1 << (plsqlParser.REVERSE - 435)) | (1 << (plsqlParser.SORT - 435)) | (1 << (plsqlParser.STORAGE - 435)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 1490
                self.index_properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)




    def index_expr(self):

        localctx = plsqlParser.Index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_index_expr)
        try:
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1493
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_partitioned_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Global_partitioned_indexContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Global_partitioned_indexContext,i)


        def local_partitioned_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Local_partitioned_indexContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Local_partitioned_indexContext,i)


        def index_attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_attributesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_attributesContext,i)


        def INDEXTYPE(self):
            return self.getToken(plsqlParser.INDEXTYPE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def domain_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Domain_index_clauseContext,0)


        def xmlindex_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xmlindex_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_properties" ):
                listener.enterIndex_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_properties" ):
                listener.exitIndex_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_properties" ):
                return visitor.visitIndex_properties(self)
            else:
                return visitor.visitChildren(self)




    def index_properties(self):

        localctx = plsqlParser.Index_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_index_properties)
        self._la = 0 # Token type
        try:
            self.state = 1510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPRESS, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.GLOBAL, plsqlParser.INITRANS, plsqlParser.INVISIBLE, plsqlParser.LOCAL, plsqlParser.LOGGING, plsqlParser.NOCOMPRESS, plsqlParser.NOLOGGING, plsqlParser.NOPARALLEL, plsqlParser.NOSORT, plsqlParser.PARALLEL, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.REVERSE, plsqlParser.SORT, plsqlParser.STORAGE, plsqlParser.TABLESPACE, plsqlParser.VISIBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1500 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1500
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GLOBAL]:
                        self.state = 1497
                        self.global_partitioned_index()
                        pass
                    elif token in [plsqlParser.LOCAL]:
                        self.state = 1498
                        self.local_partitioned_index()
                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.INVISIBLE, plsqlParser.LOGGING, plsqlParser.NOCOMPRESS, plsqlParser.NOLOGGING, plsqlParser.NOPARALLEL, plsqlParser.NOSORT, plsqlParser.PARALLEL, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.REVERSE, plsqlParser.SORT, plsqlParser.STORAGE, plsqlParser.TABLESPACE, plsqlParser.VISIBLE]:
                        self.state = 1499
                        self.index_attributes()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1502 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMPRESS or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (plsqlParser.FILESYSTEM_LIKE_LOGGING - 180)) | (1 << (plsqlParser.GLOBAL - 180)) | (1 << (plsqlParser.INITRANS - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (plsqlParser.INVISIBLE - 244)) | (1 << (plsqlParser.LOCAL - 244)) | (1 << (plsqlParser.LOGGING - 244)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOCOMPRESS - 320)) | (1 << (plsqlParser.NOLOGGING - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTUSED - 320)))) != 0) or ((((_la - 435)) & ~0x3f) == 0 and ((1 << (_la - 435)) & ((1 << (plsqlParser.REVERSE - 435)) | (1 << (plsqlParser.SORT - 435)) | (1 << (plsqlParser.STORAGE - 435)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE):
                        break

                pass
            elif token in [plsqlParser.INDEXTYPE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1504
                self.match(plsqlParser.INDEXTYPE)
                self.state = 1505
                self.match(plsqlParser.IS)
                self.state = 1508
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 1506
                    self.domain_index_clause()
                    pass
                elif token in [plsqlParser.XDB, plsqlParser.XMLINDEX]:
                    self.state = 1507
                    self.xmlindex_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_partitioned_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def index_partitioning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_partitioning_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_global_partitioned_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_partitioned_index" ):
                listener.enterGlobal_partitioned_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_partitioned_index" ):
                listener.exitGlobal_partitioned_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_partitioned_index" ):
                return visitor.visitGlobal_partitioned_index(self)
            else:
                return visitor.visitChildren(self)




    def global_partitioned_index(self):

        localctx = plsqlParser.Global_partitioned_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_global_partitioned_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(plsqlParser.GLOBAL)
            self.state = 1513
            self.match(plsqlParser.PARTITION)
            self.state = 1514
            self.match(plsqlParser.BY)
            self.state = 1527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.RANGE]:
                self.state = 1515
                self.match(plsqlParser.RANGE)
                self.state = 1516
                self.paren_column_list()
                self.state = 1517
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1518
                self.index_partitioning_clause()
                self.state = 1519
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.HASH]:
                self.state = 1521
                self.match(plsqlParser.HASH)
                self.state = 1522
                self.paren_column_list()
                self.state = 1525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 1523
                    self.individual_hash_partitions()
                    pass
                elif token in [plsqlParser.PARTITIONS]:
                    self.state = 1524
                    self.hash_partitions_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_partitioning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LESS(self):
            return self.getToken(plsqlParser.LESS, 0)

        def THAN(self):
            return self.getToken(plsqlParser.THAN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_partitioning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_partitioning_clause" ):
                listener.enterIndex_partitioning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_partitioning_clause" ):
                listener.exitIndex_partitioning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_partitioning_clause" ):
                return visitor.visitIndex_partitioning_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_partitioning_clause(self):

        localctx = plsqlParser.Index_partitioning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_index_partitioning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(plsqlParser.PARTITION)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1530
                self.partition_name()


            self.state = 1533
            self.match(plsqlParser.VALUES)
            self.state = 1534
            self.match(plsqlParser.LESS)
            self.state = 1535
            self.match(plsqlParser.THAN)
            self.state = 1536
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1541 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1537
                    self.match(plsqlParser.COMMA)


                self.state = 1540
                self.literal()
                self.state = 1543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.DECODE - 65)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 503)) & ~0x3f) == 0 and ((1 << (_la - 503)) & ((1 << (plsqlParser.SUBSTRING - 503)) | (1 << (plsqlParser.TO_CHAR - 503)) | (1 << (plsqlParser.TO_DATE - 503)) | (1 << (plsqlParser.TRIM - 503)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 639)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 639)) | (1 << (plsqlParser.CHAR_STRING - 639)) | (1 << (plsqlParser.COMMA - 639)))) != 0)):
                    break

            self.state = 1545
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 1546
                self.segment_attributes_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_name" ):
                return visitor.visitPartition_name(self)
            else:
                return visitor.visitChildren(self)




    def partition_name(self):

        localctx = plsqlParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def string_function(self):
            return self.getTypedRuleContext(plsqlParser.String_functionContext,0)


        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = plsqlParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_literal)
        try:
            self.state = 1555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(plsqlParser.CHAR_STRING)
                pass
            elif token in [plsqlParser.CHR, plsqlParser.CONCAT, plsqlParser.DECODE, plsqlParser.NVL, plsqlParser.SUBSTRING, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRIM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.string_function()
                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1553
                self.numeric()
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1554
                self.match(plsqlParser.MAXVALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SUBSTRING(self):
            return self.getToken(plsqlParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.AtomContext)
            else:
                return self.getTypedRuleContext(plsqlParser.AtomContext,i)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def TO_CHAR(self):
            return self.getToken(plsqlParser.TO_CHAR, 0)

        def table_element(self):
            return self.getTypedRuleContext(plsqlParser.Table_elementContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)


        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,i)


        def expressions(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionsContext,0)


        def DECODE(self):
            return self.getToken(plsqlParser.DECODE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)

        def NVL(self):
            return self.getToken(plsqlParser.NVL, 0)

        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def TO_DATE(self):
            return self.getToken(plsqlParser.TO_DATE, 0)

        def CONCAT(self):
            return self.getToken(plsqlParser.CONCAT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_function" ):
                return visitor.visitString_function(self)
            else:
                return visitor.visitChildren(self)




    def string_function(self):

        localctx = plsqlParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 1658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                localctx.name = self.match(plsqlParser.SUBSTRING)
                self.state = 1558
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1559
                self.expression(0)
                self.state = 1560
                self.match(plsqlParser.COMMA)
                self.state = 1561
                self.expression(0)
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1562
                    self.match(plsqlParser.COMMA)
                    self.state = 1563
                    self.expression(0)


                self.state = 1566
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                localctx.name = self.match(plsqlParser.SUBSTRING)
                self.state = 1569
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1570
                self.expression(0)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FROM:
                    self.state = 1571
                    self.match(plsqlParser.FROM)
                    self.state = 1572
                    self.atom()


                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FOR:
                    self.state = 1575
                    self.match(plsqlParser.FOR)
                    self.state = 1576
                    self.atom()


                self.state = 1579
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1581
                localctx.name = self.match(plsqlParser.TO_CHAR)
                self.state = 1582
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1583
                    self.table_element()
                    pass

                elif la_ == 2:
                    self.state = 1584
                    self.standard_function(0)
                    pass

                elif la_ == 3:
                    self.state = 1585
                    self.expression(0)
                    pass


                self.state = 1590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1588
                    self.match(plsqlParser.COMMA)
                    self.state = 1589
                    self.quoted_string()


                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1592
                    self.match(plsqlParser.COMMA)
                    self.state = 1593
                    self.quoted_string()


                self.state = 1596
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1598
                localctx.name = self.match(plsqlParser.DECODE)
                self.state = 1599
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1600
                self.expressions()
                self.state = 1601
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1603
                localctx.name = self.match(plsqlParser.CHR)
                self.state = 1604
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1605
                self.concatenation()
                self.state = 1606
                self.match(plsqlParser.USING)
                self.state = 1607
                self.match(plsqlParser.NCHAR_CS)
                self.state = 1608
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1610
                localctx.name = self.match(plsqlParser.NVL)
                self.state = 1611
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1612
                self.expression(0)
                self.state = 1613
                self.match(plsqlParser.COMMA)
                self.state = 1614
                self.expression(0)
                self.state = 1615
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1617
                localctx.name = self.match(plsqlParser.TRIM)
                self.state = 1618
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING:
                        self.state = 1619
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING:
                        self.state = 1622
                        self.quoted_string()


                    self.state = 1625
                    self.match(plsqlParser.FROM)


                self.state = 1628
                self.concatenation()
                self.state = 1629
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1631
                localctx.name = self.match(plsqlParser.TO_DATE)
                self.state = 1632
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1633
                self.expression(0)
                self.state = 1636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1634
                    self.match(plsqlParser.COMMA)
                    self.state = 1635
                    self.quoted_string()


                self.state = 1638
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1640
                localctx.name = self.match(plsqlParser.CONCAT)
                self.state = 1641
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1648 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1644
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                        if la_ == 1:
                            self.state = 1642
                            self.quoted_string()
                            pass

                        elif la_ == 2:
                            self.state = 1643
                            self.expression(0)
                            pass


                        self.state = 1646
                        self.match(plsqlParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1650 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 1654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1652
                    self.quoted_string()
                    pass

                elif la_ == 2:
                    self.state = 1653
                    self.expression(0)
                    pass


                self.state = 1656
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = plsqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.expression(0)
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1661
                self.match(plsqlParser.COMMA)
                self.state = 1662
                self.expression(0)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Individual_hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def partitioning_storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partitioning_storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_individual_hash_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividual_hash_partitions" ):
                listener.enterIndividual_hash_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividual_hash_partitions" ):
                listener.exitIndividual_hash_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndividual_hash_partitions" ):
                return visitor.visitIndividual_hash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def individual_hash_partitions(self):

        localctx = plsqlParser.Individual_hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_individual_hash_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1679 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1669
                    self.match(plsqlParser.COMMA)


                self.state = 1672
                self.match(plsqlParser.PARTITION)
                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1673
                    self.partition_name()


                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                    self.state = 1676
                    self.partitioning_storage_clause()


                self.state = 1681 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1683
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def OVERFLOW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OVERFLOW)
            else:
                return self.getToken(plsqlParser.OVERFLOW, i)

        def table_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_compressionContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def lob_partitioning_storage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_partitioning_storageContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_partitioning_storageContext,i)


        def VARRAY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VARRAY)
            else:
                return self.getToken(plsqlParser.VARRAY, i)

        def varray_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Varray_itemContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Varray_itemContext,i)


        def STORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORE)
            else:
                return self.getToken(plsqlParser.STORE, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def LOB(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOB)
            else:
                return self.getToken(plsqlParser.LOB, i)

        def lob_segname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_segnameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,i)


        def BASICFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BASICFILE)
            else:
                return self.getToken(plsqlParser.BASICFILE, i)

        def SECUREFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECUREFILE)
            else:
                return self.getToken(plsqlParser.SECUREFILE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_partitioning_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_storage_clause" ):
                listener.enterPartitioning_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_storage_clause" ):
                listener.exitPartitioning_storage_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitioning_storage_clause" ):
                return visitor.visitPartitioning_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def partitioning_storage_clause(self):

        localctx = plsqlParser.Partitioning_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_partitioning_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1705
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1685
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 1686
                    self.tablespace()
                    pass

                elif la_ == 2:
                    self.state = 1687
                    self.match(plsqlParser.OVERFLOW)
                    self.state = 1690
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 1688
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1689
                        self.tablespace()


                    pass

                elif la_ == 3:
                    self.state = 1692
                    self.table_compression()
                    pass

                elif la_ == 4:
                    self.state = 1693
                    self.key_compression()
                    pass

                elif la_ == 5:
                    self.state = 1694
                    self.lob_partitioning_storage()
                    pass

                elif la_ == 6:
                    self.state = 1695
                    self.match(plsqlParser.VARRAY)
                    self.state = 1696
                    self.varray_item()
                    self.state = 1697
                    self.match(plsqlParser.STORE)
                    self.state = 1698
                    self.match(plsqlParser.AS)
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                        self.state = 1699
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1702
                    self.match(plsqlParser.LOB)
                    self.state = 1703
                    self.lob_segname()
                    pass


                self.state = 1707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def BASIC(self):
            return self.getToken(plsqlParser.BASIC, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def OLTP(self):
            return self.getToken(plsqlParser.OLTP, 0)

        def QUERY(self):
            return self.getToken(plsqlParser.QUERY, 0)

        def ARCHIVE(self):
            return self.getToken(plsqlParser.ARCHIVE, 0)

        def LOW(self):
            return self.getToken(plsqlParser.LOW, 0)

        def HIGH(self):
            return self.getToken(plsqlParser.HIGH, 0)

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_compression" ):
                listener.enterTable_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_compression" ):
                listener.exitTable_compression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_compression" ):
                return visitor.visitTable_compression(self)
            else:
                return visitor.visitChildren(self)




    def table_compression(self):

        localctx = plsqlParser.Table_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_table_compression)
        self._la = 0 # Token type
        try:
            self.state = 1722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1709
                self.match(plsqlParser.COMPRESS)
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1710
                    self.match(plsqlParser.BASIC)

                elif la_ == 2:
                    self.state = 1711
                    self.match(plsqlParser.FOR)
                    self.state = 1717
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.OLTP]:
                        self.state = 1712
                        self.match(plsqlParser.OLTP)
                        pass
                    elif token in [plsqlParser.ARCHIVE, plsqlParser.QUERY]:
                        self.state = 1713
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ARCHIVE or _la==plsqlParser.QUERY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.HIGH or _la==plsqlParser.LOW:
                            self.state = 1714
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.HIGH or _la==plsqlParser.LOW):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.match(plsqlParser.NOCOMPRESS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_partitioning_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def lob_item(self):
            return self.getTypedRuleContext(plsqlParser.Lob_itemContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def TABLESPACE(self):
            return self.getToken(plsqlParser.TABLESPACE, 0)

        def tablespace(self):
            return self.getTypedRuleContext(plsqlParser.TablespaceContext,0)


        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_partitioning_storage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_partitioning_storage" ):
                listener.enterLob_partitioning_storage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_partitioning_storage" ):
                listener.exitLob_partitioning_storage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_partitioning_storage" ):
                return visitor.visitLob_partitioning_storage(self)
            else:
                return visitor.visitChildren(self)




    def lob_partitioning_storage(self):

        localctx = plsqlParser.Lob_partitioning_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_lob_partitioning_storage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(plsqlParser.LOB)
            self.state = 1725
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1726
            self.lob_item()
            self.state = 1727
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1728
            self.match(plsqlParser.STORE)
            self.state = 1729
            self.match(plsqlParser.AS)
            self.state = 1731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                self.state = 1730
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.state = 1733
                self.lob_segname()
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 1734
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 1735
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 1736
                    self.tablespace()
                    self.state = 1737
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 1741
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1742
                self.match(plsqlParser.TABLESPACE)
                self.state = 1743
                self.tablespace()
                self.state = 1744
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_item" ):
                listener.enterLob_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_item" ):
                listener.exitLob_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_item" ):
                return visitor.visitLob_item(self)
            else:
                return visitor.visitChildren(self)




    def lob_item(self):

        localctx = plsqlParser.Lob_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lob_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_segnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_segname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_segname" ):
                listener.enterLob_segname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_segname" ):
                listener.exitLob_segname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_segname" ):
                return visitor.visitLob_segname(self)
            else:
                return visitor.visitChildren(self)




    def lob_segname(self):

        localctx = plsqlParser.Lob_segnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_lob_segname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_item" ):
                listener.enterVarray_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_item" ):
                listener.exitVarray_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_item" ):
                return visitor.visitVarray_item(self)
            else:
                return visitor.visitChildren(self)




    def varray_item(self):

        localctx = plsqlParser.Varray_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varray_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1752
                self.id_expression()
                self.state = 1753
                self.match(plsqlParser.PERIOD)


            self.state = 1760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1757
                self.id_expression()
                self.state = 1758
                self.match(plsqlParser.PERIOD)


            self.state = 1762
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partitions_by_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITIONS(self):
            return self.getToken(plsqlParser.PARTITIONS, 0)

        def hash_partition_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partition_quantityContext,0)


        def STORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORE)
            else:
                return self.getToken(plsqlParser.STORE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partitions_by_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partitions_by_quantity" ):
                listener.enterHash_partitions_by_quantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partitions_by_quantity" ):
                listener.exitHash_partitions_by_quantity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partitions_by_quantity" ):
                return visitor.visitHash_partitions_by_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_partitions_by_quantity(self):

        localctx = plsqlParser.Hash_partitions_by_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_hash_partitions_by_quantity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(plsqlParser.PARTITIONS)
            self.state = 1765
            self.hash_partition_quantity()
            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 1766
                self.match(plsqlParser.STORE)
                self.state = 1767
                self.match(plsqlParser.IN)
                self.state = 1768
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1773 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1769
                        self.match(plsqlParser.COMMA)


                    self.state = 1772
                    self.tablespace()
                    self.state = 1775 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1777
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1781
                self.table_compression()

            elif la_ == 2:
                self.state = 1782
                self.key_compression()


            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OVERFLOW:
                self.state = 1785
                self.match(plsqlParser.OVERFLOW)
                self.state = 1786
                self.match(plsqlParser.STORE)
                self.state = 1787
                self.match(plsqlParser.IN)
                self.state = 1788
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1793 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1789
                        self.match(plsqlParser.COMMA)


                    self.state = 1792
                    self.tablespace()
                    self.state = 1795 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1797
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partition_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partition_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partition_quantity" ):
                listener.enterHash_partition_quantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partition_quantity" ):
                listener.exitHash_partition_quantity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partition_quantity" ):
                return visitor.visitHash_partition_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_partition_quantity(self):

        localctx = plsqlParser.Hash_partition_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_hash_partition_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_partitioned_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def on_range_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_range_partitioned_tableContext,0)


        def on_list_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_list_partitioned_tableContext,0)


        def on_hash_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_hash_partitioned_tableContext,0)


        def on_comp_partitioned_table(self):
            return self.getTypedRuleContext(plsqlParser.On_comp_partitioned_tableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_local_partitioned_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_partitioned_index" ):
                listener.enterLocal_partitioned_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_partitioned_index" ):
                listener.exitLocal_partitioned_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_partitioned_index" ):
                return visitor.visitLocal_partitioned_index(self)
            else:
                return visitor.visitChildren(self)




    def local_partitioned_index(self):

        localctx = plsqlParser.Local_partitioned_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_local_partitioned_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(plsqlParser.LOCAL)
            self.state = 1808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1804
                self.on_range_partitioned_table()

            elif la_ == 2:
                self.state = 1805
                self.on_list_partitioned_table()

            elif la_ == 3:
                self.state = 1806
                self.on_hash_partitioned_table()

            elif la_ == 4:
                self.state = 1807
                self.on_comp_partitioned_table()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_range_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_range_partitioned_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_range_partitioned_table" ):
                listener.enterOn_range_partitioned_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_range_partitioned_table" ):
                listener.exitOn_range_partitioned_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_range_partitioned_table" ):
                return visitor.visitOn_range_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_range_partitioned_table(self):

        localctx = plsqlParser.On_range_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_on_range_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1829 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1811
                    self.match(plsqlParser.COMMA)


                self.state = 1814
                self.match(plsqlParser.PARTITION)
                self.state = 1816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1815
                    self.partition_name()


                self.state = 1824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1820 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1820
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1818
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1819
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1822 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNUSABLE:
                    self.state = 1826
                    self.match(plsqlParser.UNUSABLE)


                self.state = 1831 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1833
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_list_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_list_partitioned_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_list_partitioned_table" ):
                listener.enterOn_list_partitioned_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_list_partitioned_table" ):
                listener.exitOn_list_partitioned_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_list_partitioned_table" ):
                return visitor.visitOn_list_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_list_partitioned_table(self):

        localctx = plsqlParser.On_list_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_on_list_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1854 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1836
                    self.match(plsqlParser.COMMA)


                self.state = 1839
                self.match(plsqlParser.PARTITION)
                self.state = 1841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1840
                    self.partition_name()


                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1845 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1845
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1843
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1844
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1847 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UNUSABLE:
                    self.state = 1851
                    self.match(plsqlParser.UNUSABLE)


                self.state = 1856 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1858
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_hash_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_on_hash_partitioned_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_hash_partitioned_table" ):
                listener.enterOn_hash_partitioned_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_hash_partitioned_table" ):
                listener.exitOn_hash_partitioned_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_hash_partitioned_table" ):
                return visitor.visitOn_hash_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_hash_partitioned_table(self):

        localctx = plsqlParser.On_hash_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_on_hash_partitioned_table)
        self._la = 0 # Token type
        try:
            self.state = 1896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.STORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.match(plsqlParser.STORE)
                self.state = 1861
                self.match(plsqlParser.IN)
                self.state = 1862
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1867 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1863
                        self.match(plsqlParser.COMMA)


                    self.state = 1866
                    self.tablespace()
                    self.state = 1869 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1871
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1873
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1891 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1874
                        self.match(plsqlParser.COMMA)


                    self.state = 1877
                    self.match(plsqlParser.PARTITION)
                    self.state = 1879
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 1878
                        self.partition_name()


                    self.state = 1883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.TABLESPACE:
                        self.state = 1881
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1882
                        self.tablespace()


                    self.state = 1886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                        self.state = 1885
                        self.key_compression()


                    self.state = 1889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.UNUSABLE:
                        self.state = 1888
                        self.match(plsqlParser.UNUSABLE)


                    self.state = 1893 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1895
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_comp_partitioned_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def index_subpartition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Index_subpartition_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Index_subpartition_clauseContext,i)


        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_on_comp_partitioned_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_comp_partitioned_table" ):
                listener.enterOn_comp_partitioned_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_comp_partitioned_table" ):
                listener.exitOn_comp_partitioned_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_comp_partitioned_table" ):
                return visitor.visitOn_comp_partitioned_table(self)
            else:
                return visitor.visitChildren(self)




    def on_comp_partitioned_table(self):

        localctx = plsqlParser.On_comp_partitioned_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_on_comp_partitioned_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 1898
                self.match(plsqlParser.STORE)
                self.state = 1899
                self.match(plsqlParser.IN)
                self.state = 1900
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1905 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1901
                        self.match(plsqlParser.COMMA)


                    self.state = 1904
                    self.tablespace()
                    self.state = 1907 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1909
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1913
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1933 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 1914
                    self.match(plsqlParser.COMMA)


                self.state = 1917
                self.match(plsqlParser.PARTITION)
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1918
                    self.partition_name()


                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 1923 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1923
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                            self.state = 1921
                            self.segment_attributes_clause()
                            pass
                        elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                            self.state = 1922
                            self.key_compression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1925 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (plsqlParser.LOGGING - 275)) | (1 << (plsqlParser.NOCOMPRESS - 275)) | (1 << (plsqlParser.NOLOGGING - 275)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                            break



                self.state = 1929
                self.match(plsqlParser.UNUSABLE)
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE or _la==plsqlParser.LEFT_PAREN:
                    self.state = 1930
                    self.index_subpartition_clause()


                self.state = 1935 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 1937
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_subpartition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def SUBPARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SUBPARTITION)
            else:
                return self.getToken(plsqlParser.SUBPARTITION, i)

        def subpartition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Subpartition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def key_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Key_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Key_compressionContext,i)


        def UNUSABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNUSABLE)
            else:
                return self.getToken(plsqlParser.UNUSABLE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_index_subpartition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_subpartition_clause" ):
                listener.enterIndex_subpartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_subpartition_clause" ):
                listener.exitIndex_subpartition_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_subpartition_clause" ):
                return visitor.visitIndex_subpartition_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_subpartition_clause(self):

        localctx = plsqlParser.Index_subpartition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_index_subpartition_clause)
        self._la = 0 # Token type
        try:
            self.state = 1975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.STORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.match(plsqlParser.STORE)
                self.state = 1940
                self.match(plsqlParser.IN)
                self.state = 1941
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1946 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1942
                        self.match(plsqlParser.COMMA)


                    self.state = 1945
                    self.tablespace()
                    self.state = 1948 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 1950
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1970 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 1953
                        self.match(plsqlParser.COMMA)


                    self.state = 1956
                    self.match(plsqlParser.SUBPARTITION)
                    self.state = 1958
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 1957
                        self.subpartition_name()


                    self.state = 1962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.TABLESPACE:
                        self.state = 1960
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 1961
                        self.tablespace()


                    self.state = 1965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                        self.state = 1964
                        self.key_compression()


                    self.state = 1968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.UNUSABLE:
                        self.state = 1967
                        self.match(plsqlParser.UNUSABLE)


                    self.state = 1972 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 1974
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartition_name" ):
                listener.enterSubpartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartition_name" ):
                listener.exitSubpartition_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_name" ):
                return visitor.visitSubpartition_name(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_name(self):

        localctx = plsqlParser.Subpartition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subpartition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self.partition_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Domain_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indextype(self):
            return self.getTypedRuleContext(plsqlParser.IndextypeContext,0)


        def local_domain_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Local_domain_index_clauseContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def odci_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Odci_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_domain_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain_index_clause" ):
                listener.enterDomain_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain_index_clause" ):
                listener.exitDomain_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDomain_index_clause" ):
                return visitor.visitDomain_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def domain_index_clause(self):

        localctx = plsqlParser.Domain_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_domain_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self.indextype()
            self.state = 1981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 1980
                self.local_domain_index_clause()


            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 1983
                self.parallel_clause()


            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARAMETERS:
                self.state = 1986
                self.match(plsqlParser.PARAMETERS)
                self.state = 1987
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1988
                self.odci_parameters()
                self.state = 1989
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndextypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_indextype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndextype" ):
                listener.enterIndextype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndextype" ):
                listener.exitIndextype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndextype" ):
                return visitor.visitIndextype(self)
            else:
                return visitor.visitChildren(self)




    def indextype(self):

        localctx = plsqlParser.IndextypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_indextype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1993
                self.id_expression()
                self.state = 1994
                self.match(plsqlParser.PERIOD)


            self.state = 1998
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Odci_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_odci_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOdci_parameters" ):
                listener.enterOdci_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOdci_parameters" ):
                listener.exitOdci_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOdci_parameters" ):
                return visitor.visitOdci_parameters(self)
            else:
                return visitor.visitChildren(self)




    def odci_parameters(self):

        localctx = plsqlParser.Odci_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_odci_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(plsqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_domain_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def PARAMETERS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARAMETERS)
            else:
                return self.getToken(plsqlParser.PARAMETERS, i)

        def odci_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Odci_parametersContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Odci_parametersContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_local_domain_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_domain_index_clause" ):
                listener.enterLocal_domain_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_domain_index_clause" ):
                listener.exitLocal_domain_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_domain_index_clause" ):
                return visitor.visitLocal_domain_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def local_domain_index_clause(self):

        localctx = plsqlParser.Local_domain_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_local_domain_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.match(plsqlParser.LOCAL)
            self.state = 2022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 2003
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2016 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2004
                        self.match(plsqlParser.COMMA)


                    self.state = 2007
                    self.match(plsqlParser.PARTITION)
                    self.state = 2008
                    self.partition_name()
                    self.state = 2014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.PARAMETERS:
                        self.state = 2009
                        self.match(plsqlParser.PARAMETERS)
                        self.state = 2010
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 2011
                        self.odci_parameters()
                        self.state = 2012
                        self.match(plsqlParser.RIGHT_PAREN)


                    self.state = 2018 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 2020
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlindex_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLINDEX(self):
            return self.getToken(plsqlParser.XMLINDEX, 0)

        def XDB(self):
            return self.getToken(plsqlParser.XDB, 0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def local_xmlindex_clause(self):
            return self.getTypedRuleContext(plsqlParser.Local_xmlindex_clauseContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlindex_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlindex_clause" ):
                listener.enterXmlindex_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlindex_clause" ):
                listener.exitXmlindex_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlindex_clause" ):
                return visitor.visitXmlindex_clause(self)
            else:
                return visitor.visitChildren(self)




    def xmlindex_clause(self):

        localctx = plsqlParser.Xmlindex_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_xmlindex_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XDB:
                self.state = 2024
                self.match(plsqlParser.XDB)
                self.state = 2025
                self.match(plsqlParser.PERIOD)


            self.state = 2028
            self.match(plsqlParser.XMLINDEX)
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 2029
                self.local_xmlindex_clause()


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 2032
                self.parallel_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_xmlindex_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_local_xmlindex_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_xmlindex_clause" ):
                listener.enterLocal_xmlindex_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_xmlindex_clause" ):
                listener.exitLocal_xmlindex_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_xmlindex_clause" ):
                return visitor.visitLocal_xmlindex_clause(self)
            else:
                return visitor.visitChildren(self)




    def local_xmlindex_clause(self):

        localctx = plsqlParser.Local_xmlindex_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_local_xmlindex_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.match(plsqlParser.LOCAL)
            self.state = 2048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 2036
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2042 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2037
                        self.match(plsqlParser.COMMA)


                    self.state = 2040
                    self.match(plsqlParser.PARTITION)
                    self.state = 2041
                    self.partition_name()
                    self.state = 2044 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 2046
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitmap_join_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def table_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_aliasContext,i)


        def local_partitioned_index(self):
            return self.getTypedRuleContext(plsqlParser.Local_partitioned_indexContext,0)


        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_bitmap_join_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitmap_join_index_clause" ):
                listener.enterBitmap_join_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitmap_join_index_clause" ):
                listener.exitBitmap_join_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitmap_join_index_clause" ):
                return visitor.visitBitmap_join_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def bitmap_join_index_clause(self):

        localctx = plsqlParser.Bitmap_join_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_bitmap_join_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.tableview_name()
            self.state = 2051
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2063 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2052
                    self.match(plsqlParser.COMMA)


                self.state = 2057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 2055
                    self.tableview_name()

                elif la_ == 2:
                    self.state = 2056
                    self.table_alias()


                self.state = 2059
                self.column_name()
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC or _la==plsqlParser.DESC:
                    self.state = 2060
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 2067
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2068
            self.match(plsqlParser.FROM)
            self.state = 2075 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2069
                    self.match(plsqlParser.COMMA)


                self.state = 2072
                self.tableview_name()
                self.state = 2073
                self.table_alias()
                self.state = 2077 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 2079
            self.where_clause()
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOCAL:
                self.state = 2080
                self.local_partitioned_index()


            self.state = 2084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.INVISIBLE or _la==plsqlParser.LOGGING or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.NOCOMPRESS - 320)) | (1 << (plsqlParser.NOLOGGING - 320)) | (1 << (plsqlParser.NOPARALLEL - 320)) | (1 << (plsqlParser.NOSORT - 320)) | (1 << (plsqlParser.PARALLEL - 320)) | (1 << (plsqlParser.PCTFREE - 320)) | (1 << (plsqlParser.PCTUSED - 320)))) != 0) or ((((_la - 435)) & ~0x3f) == 0 and ((1 << (_la - 435)) & ((1 << (plsqlParser.REVERSE - 435)) | (1 << (plsqlParser.SORT - 435)) | (1 << (plsqlParser.STORAGE - 435)))) != 0) or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VISIBLE:
                self.state = 2083
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def relational_table(self):
            return self.getTypedRuleContext(plsqlParser.Relational_tableContext,0)


        def object_table(self):
            return self.getTypedRuleContext(plsqlParser.Object_tableContext,0)


        def xmltype_table(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_tableContext,0)


        def TEMPORARY(self):
            return self.getToken(plsqlParser.TEMPORARY, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = plsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self.match(plsqlParser.CREATE)
            self.state = 2091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GLOBAL or _la==plsqlParser.TEMPORARY:
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.GLOBAL:
                    self.state = 2087
                    self.match(plsqlParser.GLOBAL)


                self.state = 2090
                self.match(plsqlParser.TEMPORARY)


            self.state = 2093
            self.match(plsqlParser.TABLE)
            self.state = 2094
            self.tableview_name()
            self.state = 2098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2095
                self.relational_table()
                pass

            elif la_ == 2:
                self.state = 2096
                self.object_table()
                pass

            elif la_ == 3:
                self.state = 2097
                self.xmltype_table()
                pass


            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 2100
                self.match(plsqlParser.AS)
                self.state = 2101
                self.select_statement()


            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 2104
                self.match(plsqlParser.PARTITION)
                self.state = 2105
                self.match(plsqlParser.OF)
                self.state = 2106
                self.tableview_name()
                self.state = 2122
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.FOR]:
                    self.state = 2107
                    self.match(plsqlParser.FOR)
                    self.state = 2108
                    self.match(plsqlParser.VALUES)
                    self.state = 2109
                    self.match(plsqlParser.IN)
                    self.state = 2110
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2111
                    self.expression(0)
                    self.state = 2116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.COMMA:
                        self.state = 2112
                        self.match(plsqlParser.COMMA)
                        self.state = 2113
                        self.expression(0)
                        self.state = 2118
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2119
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                elif token in [plsqlParser.DEFAULT]:
                    self.state = 2121
                    self.match(plsqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def relational_properties(self):
            return self.getTypedRuleContext(plsqlParser.Relational_propertiesContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_relational_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_table" ):
                listener.enterRelational_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_table" ):
                listener.exitRelational_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_table" ):
                return visitor.visitRelational_table(self)
            else:
                return visitor.visitChildren(self)




    def relational_table(self):

        localctx = plsqlParser.Relational_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_relational_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2127
                self.relational_properties()
                self.state = 2128
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 2132
                self.match(plsqlParser.ON)
                self.state = 2133
                self.match(plsqlParser.COMMIT)
                self.state = 2134
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2135
                self.match(plsqlParser.ROWS)


            self.state = 2139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (plsqlParser.SEGMENT - 459)) | (1 << (plsqlParser.STORAGE - 459)) | (1 << (plsqlParser.TABLESPACE - 459)))) != 0):
                self.state = 2138
                self.physical_properties()


            self.state = 2142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 2141
                self.column_properties()


            self.state = 2145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 2144
                self.table_partitioning_clauses()


            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 2147
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 2150
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 2151
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2152
                self.match(plsqlParser.MODE)
                self.state = 2153
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2154
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 2158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 2157
                self.parallel_clause()


            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 2160
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 2164 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2163
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2166 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)



            self.state = 2171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 2170
                self.row_movement_clause()


            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 2173
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Virtual_column_definitionContext,i)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,i)


        def out_of_line_ref_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_ref_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,i)


        def supplemental_logging_props(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_logging_propsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_logging_propsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_relational_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_properties" ):
                listener.enterRelational_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_properties" ):
                listener.exitRelational_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_properties" ):
                return visitor.visitRelational_properties(self)
            else:
                return visitor.visitChildren(self)




    def relational_properties(self):

        localctx = plsqlParser.Relational_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_relational_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2186 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2176
                    self.match(plsqlParser.COMMA)


                self.state = 2184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 2179
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 2180
                    self.virtual_column_definition()
                    pass

                elif la_ == 3:
                    self.state = 2181
                    self.out_of_line_constraint()
                    pass

                elif la_ == 4:
                    self.state = 2182
                    self.out_of_line_ref_constraint()
                    pass

                elif la_ == 5:
                    self.state = 2183
                    self.supplemental_logging_props()
                    pass


                self.state = 2188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FOREIGN - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIMARY - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SCOPE - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUPPLEMENTAL - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNIQUE - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Inline_ref_constraintContext,0)


        def SORT(self):
            return self.getToken(plsqlParser.SORT, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def ENCRYPT(self):
            return self.getToken(plsqlParser.ENCRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(plsqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def SALT(self):
            return self.getToken(plsqlParser.SALT, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = plsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.column_name()
            self.state = 2193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 2191
                self.datatype()
                pass

            elif la_ == 2:
                self.state = 2192
                self.type_name()
                pass


            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SORT:
                self.state = 2195
                self.match(plsqlParser.SORT)


            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 2198
                self.match(plsqlParser.DEFAULT)
                self.state = 2199
                self.expression(0)


            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ENCRYPT:
                self.state = 2202
                self.match(plsqlParser.ENCRYPT)
                self.state = 2205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 2203
                    self.match(plsqlParser.USING)
                    self.state = 2204
                    self.match(plsqlParser.CHAR_STRING)


                self.state = 2210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IDENTIFIED:
                    self.state = 2207
                    self.match(plsqlParser.IDENTIFIED)
                    self.state = 2208
                    self.match(plsqlParser.BY)
                    self.state = 2209
                    self.regular_id()


                self.state = 2213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CHAR_STRING:
                    self.state = 2212
                    self.match(plsqlParser.CHAR_STRING)


                self.state = 2219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 2216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NO:
                        self.state = 2215
                        self.match(plsqlParser.NO)


                    self.state = 2218
                    self.match(plsqlParser.SALT)




            self.state = 2230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 2226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2223
                        self.inline_constraint() 
                    self.state = 2228
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2229
                self.inline_ref_constraint()
                pass


            self.state = 2234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 2232
                self.match(plsqlParser.DEFAULT)
                self.state = 2233
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(plsqlParser.SCOPE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_inline_ref_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_ref_constraint" ):
                listener.enterInline_ref_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_ref_constraint" ):
                listener.exitInline_ref_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInline_ref_constraint" ):
                return visitor.visitInline_ref_constraint(self)
            else:
                return visitor.visitChildren(self)




    def inline_ref_constraint(self):

        localctx = plsqlParser.Inline_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_inline_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2236
                self.match(plsqlParser.SCOPE)
                self.state = 2237
                self.match(plsqlParser.IS)
                self.state = 2238
                self.tableview_name()
                pass
            elif token in [plsqlParser.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                self.match(plsqlParser.WITH)
                self.state = 2240
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.CONSTRAINT, plsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 2241
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 2242
                    self.constraint_name()


                self.state = 2245
                self.references_clause()
                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Virtual_column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def GENERATED(self):
            return self.getToken(plsqlParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(plsqlParser.ALWAYS, 0)

        def VIRTUAL(self):
            return self.getToken(plsqlParser.VIRTUAL, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_virtual_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtual_column_definition" ):
                listener.enterVirtual_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtual_column_definition" ):
                listener.exitVirtual_column_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtual_column_definition" ):
                return visitor.visitVirtual_column_definition(self)
            else:
                return visitor.visitChildren(self)




    def virtual_column_definition(self):

        localctx = plsqlParser.Virtual_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_virtual_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.column_name()
            self.state = 2253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (plsqlParser.BFILE - 36)) | (1 << (plsqlParser.BINARY_DOUBLE - 36)) | (1 << (plsqlParser.BINARY_FLOAT - 36)) | (1 << (plsqlParser.BINARY_INTEGER - 36)) | (1 << (plsqlParser.BLOB - 36)) | (1 << (plsqlParser.BOOLEAN - 36)) | (1 << (plsqlParser.CHAR - 36)) | (1 << (plsqlParser.CHARACTER - 36)) | (1 << (plsqlParser.CLOB - 36)))) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (plsqlParser.DATE - 113)) | (1 << (plsqlParser.DAY - 113)) | (1 << (plsqlParser.DEC - 113)) | (1 << (plsqlParser.DECIMAL - 113)) | (1 << (plsqlParser.DOUBLE - 113)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 113)))) != 0) or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & ((1 << (plsqlParser.FLOAT - 186)) | (1 << (plsqlParser.HOUR - 186)) | (1 << (plsqlParser.INT - 186)) | (1 << (plsqlParser.INTEGER - 186)) | (1 << (plsqlParser.INTERVAL - 186)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (plsqlParser.LONG - 279)) | (1 << (plsqlParser.MINUTE - 279)) | (1 << (plsqlParser.MLSLABEL - 279)) | (1 << (plsqlParser.MONTH - 279)) | (1 << (plsqlParser.NATURAL - 279)) | (1 << (plsqlParser.NATURALN - 279)) | (1 << (plsqlParser.NCHAR - 279)) | (1 << (plsqlParser.NCLOB - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (plsqlParser.NUMBER - 343)) | (1 << (plsqlParser.NUMERIC - 343)) | (1 << (plsqlParser.NVARCHAR2 - 343)) | (1 << (plsqlParser.PLS_INTEGER - 343)) | (1 << (plsqlParser.POSITIVE - 343)) | (1 << (plsqlParser.POSITIVEN - 343)) | (1 << (plsqlParser.RAW - 343)))) != 0) or ((((_la - 409)) & ~0x3f) == 0 and ((1 << (_la - 409)) & ((1 << (plsqlParser.REAL - 409)) | (1 << (plsqlParser.ROWID - 409)) | (1 << (plsqlParser.SECOND - 409)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (plsqlParser.SIGNTYPE - 476)) | (1 << (plsqlParser.SIMPLE_INTEGER - 476)) | (1 << (plsqlParser.SMALLINT - 476)) | (1 << (plsqlParser.STRING - 476)) | (1 << (plsqlParser.TIMESTAMP - 476)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 476)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 476)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 476)) | (1 << (plsqlParser.TIMEZONE_ABBR - 476)) | (1 << (plsqlParser.TIMEZONE_HOUR - 476)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 476)) | (1 << (plsqlParser.TIMEZONE_REGION - 476)))) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & ((1 << (plsqlParser.UROWID - 552)) | (1 << (plsqlParser.VARCHAR - 552)) | (1 << (plsqlParser.VARCHAR2 - 552)) | (1 << (plsqlParser.YEAR - 552)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 552)))) != 0):
                self.state = 2252
                self.datatype()


            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GENERATED:
                self.state = 2255
                self.match(plsqlParser.GENERATED)
                self.state = 2256
                self.match(plsqlParser.ALWAYS)


            self.state = 2259
            self.match(plsqlParser.AS)
            self.state = 2260
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2261
            self.expression(0)
            self.state = 2262
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VIRTUAL:
                self.state = 2263
                self.match(plsqlParser.VIRTUAL)


            self.state = 2269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2266
                    self.inline_constraint() 
                self.state = 2271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Out_of_line_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(plsqlParser.Foreign_key_clauseContext,0)


        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_out_of_line_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_constraint" ):
                listener.enterOut_of_line_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_constraint" ):
                listener.exitOut_of_line_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOut_of_line_constraint" ):
                return visitor.visitOut_of_line_constraint(self)
            else:
                return visitor.visitChildren(self)




    def out_of_line_constraint(self):

        localctx = plsqlParser.Out_of_line_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_out_of_line_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CONSTRAINT:
                self.state = 2272
                self.match(plsqlParser.CONSTRAINT)
                self.state = 2273
                self.constraint_name()


            self.state = 2287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UNIQUE]:
                self.state = 2276
                self.match(plsqlParser.UNIQUE)
                self.state = 2277
                self.paren_column_list()
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 2278
                self.match(plsqlParser.PRIMARY)
                self.state = 2279
                self.match(plsqlParser.KEY)
                self.state = 2280
                self.paren_column_list()
                pass
            elif token in [plsqlParser.FOREIGN]:
                self.state = 2281
                self.foreign_key_clause()
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 2282
                self.match(plsqlParser.CHECK)
                self.state = 2283
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2284
                self.expression(0)
                self.state = 2285
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 2289
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREIGN(self):
            return self.getToken(plsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def on_delete_clause(self):
            return self.getTypedRuleContext(plsqlParser.On_delete_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = plsqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2292
            self.match(plsqlParser.FOREIGN)
            self.state = 2293
            self.match(plsqlParser.KEY)
            self.state = 2294
            self.paren_column_list()
            self.state = 2295
            self.references_clause()
            self.state = 2297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 2296
                self.on_delete_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_delete_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_on_delete_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete_clause" ):
                listener.enterOn_delete_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete_clause" ):
                listener.exitOn_delete_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_delete_clause" ):
                return visitor.visitOn_delete_clause(self)
            else:
                return visitor.visitChildren(self)




    def on_delete_clause(self):

        localctx = plsqlParser.On_delete_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_on_delete_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(plsqlParser.ON)
            self.state = 2300
            self.match(plsqlParser.DELETE)
            self.state = 2304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CASCADE]:
                self.state = 2301
                self.match(plsqlParser.CASCADE)
                pass
            elif token in [plsqlParser.SET]:
                self.state = 2302
                self.match(plsqlParser.SET)
                self.state = 2303
                self.match(plsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Out_of_line_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ref_col_or_attr = None # Regular_idContext

        def SCOPE(self):
            return self.getToken(plsqlParser.SCOPE, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def FOREIGN(self):
            return self.getToken(plsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_out_of_line_ref_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_ref_constraint" ):
                listener.enterOut_of_line_ref_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_ref_constraint" ):
                listener.exitOut_of_line_ref_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOut_of_line_ref_constraint" ):
                return visitor.visitOut_of_line_ref_constraint(self)
            else:
                return visitor.visitChildren(self)




    def out_of_line_ref_constraint(self):

        localctx = plsqlParser.Out_of_line_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_out_of_line_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2306
                self.match(plsqlParser.SCOPE)
                self.state = 2307
                self.match(plsqlParser.FOR)
                self.state = 2308
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2309
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2310
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2311
                self.match(plsqlParser.IS)
                self.state = 2312
                self.tableview_name()
                pass
            elif token in [plsqlParser.REF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2314
                self.match(plsqlParser.REF)
                self.state = 2315
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2316
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2317
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2318
                self.match(plsqlParser.WITH)
                self.state = 2319
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.CONSTRAINT, plsqlParser.FOREIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 2321
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 2322
                    self.constraint_name()


                self.state = 2325
                self.match(plsqlParser.FOREIGN)
                self.state = 2326
                self.match(plsqlParser.KEY)
                self.state = 2327
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2332 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2328
                        self.match(plsqlParser.COMMA)


                    self.state = 2331
                    localctx.ref_col_or_attr = self.regular_id()
                    self.state = 2334 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 2336
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2337
                self.references_clause()
                self.state = 2339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 2338
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_logging_propsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPPLEMENTAL(self):
            return self.getToken(plsqlParser.SUPPLEMENTAL, 0)

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def supplemental_log_grp_clause(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_log_grp_clauseContext,0)


        def supplemental_id_key_clause(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_id_key_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_logging_props

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_logging_props" ):
                listener.enterSupplemental_logging_props(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_logging_props" ):
                listener.exitSupplemental_logging_props(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_logging_props" ):
                return visitor.visitSupplemental_logging_props(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_logging_props(self):

        localctx = plsqlParser.Supplemental_logging_propsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_supplemental_logging_props)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.match(plsqlParser.SUPPLEMENTAL)
            self.state = 2344
            self.match(plsqlParser.LOG)
            self.state = 2347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.GROUP]:
                self.state = 2345
                self.supplemental_log_grp_clause()
                pass
            elif token in [plsqlParser.DATA]:
                self.state = 2346
                self.supplemental_id_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_log_grp_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def log_grp(self):
            return self.getTypedRuleContext(plsqlParser.Log_grpContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def ALWAYS(self):
            return self.getToken(plsqlParser.ALWAYS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NO)
            else:
                return self.getToken(plsqlParser.NO, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOG)
            else:
                return self.getToken(plsqlParser.LOG, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_log_grp_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_log_grp_clause" ):
                listener.enterSupplemental_log_grp_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_log_grp_clause" ):
                listener.exitSupplemental_log_grp_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_log_grp_clause" ):
                return visitor.visitSupplemental_log_grp_clause(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_log_grp_clause(self):

        localctx = plsqlParser.Supplemental_log_grp_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_supplemental_log_grp_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(plsqlParser.GROUP)
            self.state = 2350
            self.log_grp()
            self.state = 2351
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2360 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2352
                    self.match(plsqlParser.COMMA)


                self.state = 2355
                self.regular_id()
                self.state = 2358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 2356
                    self.match(plsqlParser.NO)
                    self.state = 2357
                    self.match(plsqlParser.LOG)


                self.state = 2362 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 2364
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALWAYS:
                self.state = 2365
                self.match(plsqlParser.ALWAYS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_grpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_log_grp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_grp" ):
                listener.enterLog_grp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_grp" ):
                listener.exitLog_grp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_grp" ):
                return visitor.visitLog_grp(self)
            else:
                return visitor.visitChildren(self)




    def log_grp(self):

        localctx = plsqlParser.Log_grpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_log_grp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2368
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_id_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ALL)
            else:
                return self.getToken(plsqlParser.ALL, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PRIMARY)
            else:
                return self.getToken(plsqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.KEY)
            else:
                return self.getToken(plsqlParser.KEY, i)

        def UNIQUE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNIQUE)
            else:
                return self.getToken(plsqlParser.UNIQUE, i)

        def FOREIGN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FOREIGN)
            else:
                return self.getToken(plsqlParser.FOREIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_id_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_id_key_clause" ):
                listener.enterSupplemental_id_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_id_key_clause" ):
                listener.exitSupplemental_id_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_id_key_clause" ):
                return visitor.visitSupplemental_id_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_id_key_clause(self):

        localctx = plsqlParser.Supplemental_id_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_supplemental_id_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            self.match(plsqlParser.DATA)
            self.state = 2371
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2383 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2372
                    self.match(plsqlParser.COMMA)


                self.state = 2381
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ALL]:
                    self.state = 2375
                    self.match(plsqlParser.ALL)
                    pass
                elif token in [plsqlParser.PRIMARY]:
                    self.state = 2376
                    self.match(plsqlParser.PRIMARY)
                    self.state = 2377
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 2378
                    self.match(plsqlParser.UNIQUE)
                    pass
                elif token in [plsqlParser.FOREIGN]:
                    self.state = 2379
                    self.match(plsqlParser.FOREIGN)
                    self.state = 2380
                    self.match(plsqlParser.KEY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2385 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.ALL or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE or _la==plsqlParser.COMMA):
                    break

            self.state = 2387
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2388
            self.match(plsqlParser.COLUMNS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Physical_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def deferred_segment_creation(self):
            return self.getTypedRuleContext(plsqlParser.Deferred_segment_creationContext,0)


        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_physical_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_properties" ):
                listener.enterPhysical_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_properties" ):
                listener.exitPhysical_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_properties" ):
                return visitor.visitPhysical_properties(self)
            else:
                return visitor.visitChildren(self)




    def physical_properties(self):

        localctx = plsqlParser.Physical_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_physical_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEGMENT:
                self.state = 2390
                self.deferred_segment_creation()


            self.state = 2393
            self.segment_attributes_clause()
            self.state = 2395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.NOCOMPRESS:
                self.state = 2394
                self.table_compression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deferred_segment_creationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def CREATION(self):
            return self.getToken(plsqlParser.CREATION, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_deferred_segment_creation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferred_segment_creation" ):
                listener.enterDeferred_segment_creation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferred_segment_creation" ):
                listener.exitDeferred_segment_creation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeferred_segment_creation" ):
                return visitor.visitDeferred_segment_creation(self)
            else:
                return visitor.visitChildren(self)




    def deferred_segment_creation(self):

        localctx = plsqlParser.Deferred_segment_creationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_deferred_segment_creation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(plsqlParser.SEGMENT)
            self.state = 2398
            self.match(plsqlParser.CREATION)
            self.state = 2399
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Segment_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_segment_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment_attributes_clause" ):
                listener.enterSegment_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment_attributes_clause" ):
                listener.exitSegment_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment_attributes_clause" ):
                return visitor.visitSegment_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def segment_attributes_clause(self):

        localctx = plsqlParser.Segment_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_segment_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2405
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 2401
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.TABLESPACE]:
                        self.state = 2402
                        self.match(plsqlParser.TABLESPACE)
                        self.state = 2403
                        localctx.tablespace_name = self.id_expression()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 2404
                        self.logging_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2407 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Physical_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pctfree = None # Token
            self.pctused = None # Token
            self.inittrans = None # Token

        def PCTFREE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTFREE)
            else:
                return self.getToken(plsqlParser.PCTFREE, i)

        def PCTUSED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTUSED)
            else:
                return self.getToken(plsqlParser.PCTUSED, i)

        def INITRANS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITRANS)
            else:
                return self.getToken(plsqlParser.INITRANS, i)

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_physical_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_attributes_clause" ):
                listener.enterPhysical_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_attributes_clause" ):
                listener.exitPhysical_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_attributes_clause" ):
                return visitor.visitPhysical_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def physical_attributes_clause(self):

        localctx = plsqlParser.Physical_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_physical_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2416
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.PCTFREE]:
                        self.state = 2409
                        self.match(plsqlParser.PCTFREE)
                        self.state = 2410
                        localctx.pctfree = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.PCTUSED]:
                        self.state = 2411
                        self.match(plsqlParser.PCTUSED)
                        self.state = 2412
                        localctx.pctused = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.INITRANS]:
                        self.state = 2413
                        self.match(plsqlParser.INITRANS)
                        self.state = 2414
                        localctx.inittrans = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.STORAGE]:
                        self.state = 2415
                        self.storage_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2418 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initial_size = None # Size_clauseContext
            self.next_size = None # Size_clauseContext
            self.minextents = None # Token
            self.pctincrease = None # Token
            self.freelists = None # Token
            self.freelist_groups = None # Token

        def STORAGE(self):
            return self.getToken(plsqlParser.STORAGE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def INITIAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITIAL)
            else:
                return self.getToken(plsqlParser.INITIAL, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NEXT)
            else:
                return self.getToken(plsqlParser.NEXT, i)

        def MINEXTENTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MINEXTENTS)
            else:
                return self.getToken(plsqlParser.MINEXTENTS, i)

        def MAXEXTENTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MAXEXTENTS)
            else:
                return self.getToken(plsqlParser.MAXEXTENTS, i)

        def PCTINCREASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTINCREASE)
            else:
                return self.getToken(plsqlParser.PCTINCREASE, i)

        def FREELISTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREELISTS)
            else:
                return self.getToken(plsqlParser.FREELISTS, i)

        def FREELIST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREELIST)
            else:
                return self.getToken(plsqlParser.FREELIST, i)

        def GROUPS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GROUPS)
            else:
                return self.getToken(plsqlParser.GROUPS, i)

        def OPTIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OPTIMAL)
            else:
                return self.getToken(plsqlParser.OPTIMAL, i)

        def BUFFER_POOL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BUFFER_POOL)
            else:
                return self.getToken(plsqlParser.BUFFER_POOL, i)

        def FLASH_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FLASH_CACHE)
            else:
                return self.getToken(plsqlParser.FLASH_CACHE, i)

        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Size_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def KEEP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.KEEP)
            else:
                return self.getToken(plsqlParser.KEEP, i)

        def RECYCLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RECYCLE)
            else:
                return self.getToken(plsqlParser.RECYCLE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NONE)
            else:
                return self.getToken(plsqlParser.NONE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNLIMITED)
            else:
                return self.getToken(plsqlParser.UNLIMITED, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULL)
            else:
                return self.getToken(plsqlParser.NULL, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorage_clause" ):
                listener.enterStorage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorage_clause" ):
                listener.exitStorage_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorage_clause" ):
                return visitor.visitStorage_clause(self)
            else:
                return visitor.visitChildren(self)




    def storage_clause(self):

        localctx = plsqlParser.Storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.match(plsqlParser.STORAGE)
            self.state = 2421
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2447 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INITIAL]:
                    self.state = 2422
                    self.match(plsqlParser.INITIAL)
                    self.state = 2423
                    localctx.initial_size = self.size_clause()
                    pass
                elif token in [plsqlParser.NEXT]:
                    self.state = 2424
                    self.match(plsqlParser.NEXT)
                    self.state = 2425
                    localctx.next_size = self.size_clause()
                    pass
                elif token in [plsqlParser.MINEXTENTS]:
                    self.state = 2426
                    self.match(plsqlParser.MINEXTENTS)
                    self.state = 2427
                    localctx.minextents = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.UNLIMITED or _la==plsqlParser.UNSIGNED_INTEGER):
                        localctx.minextents = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.MAXEXTENTS]:
                    self.state = 2428
                    self.match(plsqlParser.MAXEXTENTS)
                    self.state = 2429
                    localctx.minextents = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.UNLIMITED or _la==plsqlParser.UNSIGNED_INTEGER):
                        localctx.minextents = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.PCTINCREASE]:
                    self.state = 2430
                    self.match(plsqlParser.PCTINCREASE)
                    self.state = 2431
                    localctx.pctincrease = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREELISTS]:
                    self.state = 2432
                    self.match(plsqlParser.FREELISTS)
                    self.state = 2433
                    localctx.freelists = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREELIST]:
                    self.state = 2434
                    self.match(plsqlParser.FREELIST)
                    self.state = 2435
                    self.match(plsqlParser.GROUPS)
                    self.state = 2436
                    localctx.freelist_groups = self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.OPTIMAL]:
                    self.state = 2437
                    self.match(plsqlParser.OPTIMAL)
                    self.state = 2440
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER]:
                        self.state = 2438
                        self.size_clause()
                        pass
                    elif token in [plsqlParser.NULL]:
                        self.state = 2439
                        self.match(plsqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [plsqlParser.BUFFER_POOL]:
                    self.state = 2442
                    self.match(plsqlParser.BUFFER_POOL)
                    self.state = 2443
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.KEEP or _la==plsqlParser.RECYCLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.FLASH_CACHE]:
                    self.state = 2444
                    self.match(plsqlParser.FLASH_CACHE)
                    self.state = 2445
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.KEEP or _la==plsqlParser.NONE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [plsqlParser.ENCRYPT]:
                    self.state = 2446
                    self.match(plsqlParser.ENCRYPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2449 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.BUFFER_POOL or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (plsqlParser.ENCRYPT - 155)) | (1 << (plsqlParser.FLASH_CACHE - 155)) | (1 << (plsqlParser.FREELIST - 155)) | (1 << (plsqlParser.FREELISTS - 155)))) != 0) or _la==plsqlParser.INITIAL or _la==plsqlParser.MAXEXTENTS or _la==plsqlParser.MINEXTENTS or _la==plsqlParser.NEXT or _la==plsqlParser.OPTIMAL or _la==plsqlParser.PCTINCREASE):
                    break

            self.state = 2451
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Size_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_size_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize_clause" ):
                listener.enterSize_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize_clause" ):
                listener.exitSize_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSize_clause" ):
                return visitor.visitSize_clause(self)
            else:
                return visitor.visitChildren(self)




    def size_clause(self):

        localctx = plsqlParser.Size_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_size_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self.match(plsqlParser.UNSIGNED_INTEGER)
            self.state = 2455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REGULAR_ID:
                self.state = 2454
                self.match(plsqlParser.REGULAR_ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(plsqlParser.LOGGING, 0)

        def NOLOGGING(self):
            return self.getToken(plsqlParser.NOLOGGING, 0)

        def FILESYSTEM_LIKE_LOGGING(self):
            return self.getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_clause" ):
                listener.enterLogging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_clause" ):
                listener.exitLogging_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogging_clause" ):
                return visitor.visitLogging_clause(self)
            else:
                return visitor.visitChildren(self)




    def logging_clause(self):

        localctx = plsqlParser.Logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_type_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Object_type_col_propertiesContext,0)


        def nested_table_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_col_propertiesContext,0)


        def varray_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Varray_col_propertiesContext,0)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def xmltype_column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_column_propertiesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_properties" ):
                listener.enterColumn_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_properties" ):
                listener.exitColumn_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_properties" ):
                return visitor.visitColumn_properties(self)
            else:
                return visitor.visitChildren(self)




    def column_properties(self):

        localctx = plsqlParser.Column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_column_properties)
        try:
            self.state = 2466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2459
                self.object_type_col_properties()
                pass
            elif token in [plsqlParser.NESTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2460
                self.nested_table_col_properties()
                pass
            elif token in [plsqlParser.LOB, plsqlParser.VARRAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2463
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.VARRAY]:
                    self.state = 2461
                    self.varray_col_properties()
                    pass
                elif token in [plsqlParser.LOB]:
                    self.state = 2462
                    self.lob_storage_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [plsqlParser.XMLTYPE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2465
                self.xmltype_column_properties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column = None # Regular_idContext

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_type_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_col_properties" ):
                listener.enterObject_type_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_col_properties" ):
                listener.exitObject_type_col_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_col_properties" ):
                return visitor.visitObject_type_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def object_type_col_properties(self):

        localctx = plsqlParser.Object_type_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_object_type_col_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(plsqlParser.COLUMN)
            self.state = 2469
            localctx.column = self.regular_id()
            self.state = 2470
            self.substitutable_column_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Substitutable_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_substitutable_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstitutable_column_clause" ):
                listener.enterSubstitutable_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstitutable_column_clause" ):
                listener.exitSubstitutable_column_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstitutable_column_clause" ):
                return visitor.visitSubstitutable_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def substitutable_column_clause(self):

        localctx = plsqlParser.Substitutable_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_substitutable_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 2491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ELEMENT, plsqlParser.IS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ELEMENT:
                    self.state = 2472
                    self.match(plsqlParser.ELEMENT)


                self.state = 2475
                self.match(plsqlParser.IS)
                self.state = 2476
                self.match(plsqlParser.OF)
                self.state = 2478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TYPE:
                    self.state = 2477
                    self.match(plsqlParser.TYPE)


                self.state = 2480
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2481
                self.type_name()
                self.state = 2482
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.NOT, plsqlParser.SUBSTITUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 2484
                    self.match(plsqlParser.NOT)


                self.state = 2487
                self.match(plsqlParser.SUBSTITUTABLE)
                self.state = 2488
                self.match(plsqlParser.AT)
                self.state = 2489
                self.match(plsqlParser.ALL)
                self.state = 2490
                self.match(plsqlParser.LEVELS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_table_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def nested_item(self):
            return self.getTypedRuleContext(plsqlParser.Nested_itemContext,0)


        def COLUMN_VALUE(self):
            return self.getToken(plsqlParser.COLUMN_VALUE, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(plsqlParser.GLOBAL, 0)

        def LOCATOR(self):
            return self.getToken(plsqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,i)


        def physical_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,i)


        def column_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_nested_table_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_col_properties" ):
                listener.enterNested_table_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_col_properties" ):
                listener.exitNested_table_col_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_col_properties" ):
                return visitor.visitNested_table_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_col_properties(self):

        localctx = plsqlParser.Nested_table_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_nested_table_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.match(plsqlParser.NESTED)
            self.state = 2494
            self.match(plsqlParser.TABLE)
            self.state = 2497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.state = 2495
                self.nested_item()
                pass
            elif token in [plsqlParser.COLUMN_VALUE]:
                self.state = 2496
                self.match(plsqlParser.COLUMN_VALUE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.IS or _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                self.state = 2499
                self.substitutable_column_clause()


            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.GLOBAL or _la==plsqlParser.LOCAL:
                self.state = 2502
                _la = self._input.LA(1)
                if not(_la==plsqlParser.GLOBAL or _la==plsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2505
            self.match(plsqlParser.STORE)
            self.state = 2506
            self.match(plsqlParser.AS)
            self.state = 2507
            self.tableview_name()
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2515 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2515
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.LEFT_PAREN]:
                        self.state = 2509
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 2510
                        self.object_properties()
                        self.state = 2511
                        self.match(plsqlParser.RIGHT_PAREN)
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.SEGMENT, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                        self.state = 2513
                        self.physical_properties()
                        pass
                    elif token in [plsqlParser.COLUMN, plsqlParser.LOB, plsqlParser.NESTED, plsqlParser.VARRAY, plsqlParser.XMLTYPE]:
                        self.state = 2514
                        self.column_properties()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2517 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COLUMN or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or ((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (plsqlParser.LOB - 269)) | (1 << (plsqlParser.LOGGING - 269)) | (1 << (plsqlParser.NESTED - 269)) | (1 << (plsqlParser.NOLOGGING - 269)))) != 0) or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (plsqlParser.SEGMENT - 459)) | (1 << (plsqlParser.STORAGE - 459)) | (1 << (plsqlParser.TABLESPACE - 459)))) != 0) or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE or _la==plsqlParser.LEFT_PAREN):
                        break

                self.state = 2519
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 2528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 2523
                self.match(plsqlParser.RETURN)
                self.state = 2525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 2524
                    self.match(plsqlParser.AS)


                self.state = 2527
                _la = self._input.LA(1)
                if not(_la==plsqlParser.LOCATOR or _la==plsqlParser.VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_nested_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_item" ):
                listener.enterNested_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_item" ):
                listener.exitNested_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_item" ):
                return visitor.visitNested_item(self)
            else:
                return visitor.visitChildren(self)




    def nested_item(self):

        localctx = plsqlParser.Nested_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_nested_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def attribute_name(self):
            return self.getTypedRuleContext(plsqlParser.Attribute_nameContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Inline_ref_constraintContext,0)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def out_of_line_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,0)


        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,0)


        def supplemental_logging_props(self):
            return self.getTypedRuleContext(plsqlParser.Supplemental_logging_propsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_properties" ):
                listener.enterObject_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_properties" ):
                listener.exitObject_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_properties" ):
                return visitor.visitObject_properties(self)
            else:
                return visitor.visitChildren(self)




    def object_properties(self):

        localctx = plsqlParser.Object_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_object_properties)
        self._la = 0 # Token type
        try:
            self.state = 2554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 2532
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 2533
                    self.attribute_name()
                    pass


                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DEFAULT:
                    self.state = 2536
                    self.match(plsqlParser.DEFAULT)
                    self.state = 2537
                    self.expression(0)


                self.state = 2549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 2544 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2541
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 2540
                                self.match(plsqlParser.COMMA)


                            self.state = 2543
                            self.inline_constraint()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2546 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,278,self._ctx)


                elif la_ == 2:
                    self.state = 2548
                    self.inline_ref_constraint()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2551
                self.out_of_line_constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2552
                self.out_of_line_ref_constraint()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2553
                self.supplemental_logging_props()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(plsqlParser.References_clauseContext,0)


        def check_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Check_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_inline_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_constraint" ):
                listener.enterInline_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_constraint" ):
                listener.exitInline_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInline_constraint" ):
                return visitor.visitInline_constraint(self)
            else:
                return visitor.visitChildren(self)




    def inline_constraint(self):

        localctx = plsqlParser.Inline_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_inline_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CONSTRAINT:
                self.state = 2556
                self.match(plsqlParser.CONSTRAINT)
                self.state = 2557
                self.constraint_name()


            self.state = 2569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOT, plsqlParser.NULL]:
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 2560
                    self.match(plsqlParser.NOT)


                self.state = 2563
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.UNIQUE]:
                self.state = 2564
                self.match(plsqlParser.UNIQUE)
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 2565
                self.match(plsqlParser.PRIMARY)
                self.state = 2566
                self.match(plsqlParser.KEY)
                pass
            elif token in [plsqlParser.REFERENCES]:
                self.state = 2567
                self.references_clause()
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 2568
                self.check_constraint()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2571
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class References_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(plsqlParser.REFERENCES, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_references_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences_clause" ):
                listener.enterReferences_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences_clause" ):
                listener.exitReferences_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferences_clause" ):
                return visitor.visitReferences_clause(self)
            else:
                return visitor.visitChildren(self)




    def references_clause(self):

        localctx = plsqlParser.References_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_references_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.match(plsqlParser.REFERENCES)
            self.state = 2575
            self.tableview_name()
            self.state = 2576
            self.paren_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Paren_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(plsqlParser.Column_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_paren_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_column_list" ):
                listener.enterParen_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_column_list" ):
                listener.exitParen_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_column_list" ):
                return visitor.visitParen_column_list(self)
            else:
                return visitor.visitChildren(self)




    def paren_column_list(self):

        localctx = plsqlParser.Paren_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_paren_column_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2579
            self.column_list()
            self.state = 2580
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = plsqlParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2582
                    self.match(plsqlParser.COMMA)


                self.state = 2585
                self.column_name()
                self.state = 2588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_check_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_constraint" ):
                listener.enterCheck_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_constraint" ):
                listener.exitCheck_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck_constraint" ):
                return visitor.visitCheck_constraint(self)
            else:
                return visitor.visitChildren(self)




    def check_constraint(self):

        localctx = plsqlParser.Check_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_check_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(plsqlParser.CHECK)
            self.state = 2591
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2592
            self.condition()
            self.state = 2593
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2594
                self.match(plsqlParser.DISABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFERRABLE)
            else:
                return self.getToken(plsqlParser.DEFERRABLE, i)

        def INITIALLY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INITIALLY)
            else:
                return self.getToken(plsqlParser.INITIALLY, i)

        def using_index_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Using_index_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Using_index_clauseContext,i)


        def IMMEDIATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IMMEDIATE)
            else:
                return self.getToken(plsqlParser.IMMEDIATE, i)

        def DEFERRED(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFERRED)
            else:
                return self.getToken(plsqlParser.DEFERRED, i)

        def RELY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RELY)
            else:
                return self.getToken(plsqlParser.RELY, i)

        def NORELY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NORELY)
            else:
                return self.getToken(plsqlParser.NORELY, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENABLE)
            else:
                return self.getToken(plsqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DISABLE)
            else:
                return self.getToken(plsqlParser.DISABLE, i)

        def VALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VALIDATE)
            else:
                return self.getToken(plsqlParser.VALIDATE, i)

        def NOVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOVALIDATE)
            else:
                return self.getToken(plsqlParser.NOVALIDATE, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOT)
            else:
                return self.getToken(plsqlParser.NOT, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_state

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_state" ):
                listener.enterConstraint_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_state" ):
                listener.exitConstraint_state(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_state" ):
                return visitor.visitConstraint_state(self)
            else:
                return visitor.visitChildren(self)




    def constraint_state(self):

        localctx = plsqlParser.Constraint_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_constraint_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DEFERRABLE, plsqlParser.NOT]:
                        self.state = 2598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 2597
                            self.match(plsqlParser.NOT)


                        self.state = 2600
                        self.match(plsqlParser.DEFERRABLE)
                        pass
                    elif token in [plsqlParser.INITIALLY]:
                        self.state = 2601
                        self.match(plsqlParser.INITIALLY)
                        self.state = 2602
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.NORELY, plsqlParser.RELY]:
                        self.state = 2603
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.NORELY or _la==plsqlParser.RELY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                        self.state = 2604
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.NOVALIDATE, plsqlParser.VALIDATE]:
                        self.state = 2605
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.USING]:
                        self.state = 2606
                        self.using_index_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2609 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def create_index(self):
            return self.getTypedRuleContext(plsqlParser.Create_indexContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def index_attributes(self):
            return self.getTypedRuleContext(plsqlParser.Index_attributesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_index_clause" ):
                listener.enterUsing_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_index_clause" ):
                listener.exitUsing_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_index_clause" ):
                return visitor.visitUsing_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_index_clause(self):

        localctx = plsqlParser.Using_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_using_index_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            self.match(plsqlParser.USING)
            self.state = 2612
            self.match(plsqlParser.INDEX)
            self.state = 2619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2613
                self.index_name()

            elif la_ == 2:
                self.state = 2614
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2615
                self.create_index()
                self.state = 2616
                self.match(plsqlParser.RIGHT_PAREN)

            elif la_ == 3:
                self.state = 2618
                self.index_attributes()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def varray_item(self):
            return self.getTypedRuleContext(plsqlParser.Varray_itemContext,0)


        def varray_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Varray_storage_clauseContext,0)


        def substitutable_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Substitutable_column_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_varray_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_col_properties" ):
                listener.enterVarray_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_col_properties" ):
                listener.exitVarray_col_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_col_properties" ):
                return visitor.visitVarray_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def varray_col_properties(self):

        localctx = plsqlParser.Varray_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_varray_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self.match(plsqlParser.VARRAY)
            self.state = 2622
            self.varray_item()
            self.state = 2628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ELEMENT or _la==plsqlParser.IS or _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                    self.state = 2623
                    self.substitutable_column_clause()


                self.state = 2626
                self.varray_storage_clause()
                pass

            elif la_ == 2:
                self.state = 2627
                self.substitutable_column_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def lob_storage_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_storage_clause" ):
                listener.enterVarray_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_storage_clause" ):
                listener.exitVarray_storage_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_storage_clause" ):
                return visitor.visitVarray_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def varray_storage_clause(self):

        localctx = plsqlParser.Varray_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_varray_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.match(plsqlParser.STORE)
            self.state = 2631
            self.match(plsqlParser.AS)
            self.state = 2633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                self.state = 2632
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2635
            self.match(plsqlParser.LOB)
            self.state = 2644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 2636
                    self.lob_segname()


                self.state = 2639
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2640
                self.lob_storage_parameters()
                self.state = 2641
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2643
                self.lob_segname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_storage_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(plsqlParser.TABLESPACE, 0)

        def tablespace(self):
            return self.getTypedRuleContext(plsqlParser.TablespaceContext,0)


        def lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_parametersContext,0)


        def storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_storage_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_storage_parameters" ):
                listener.enterLob_storage_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_storage_parameters" ):
                listener.exitLob_storage_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_storage_parameters" ):
                return visitor.visitLob_storage_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lob_storage_parameters(self):

        localctx = plsqlParser.Lob_storage_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lob_storage_parameters)
        self._la = 0 # Token type
        try:
            self.state = 2653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLESPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2646
                self.match(plsqlParser.TABLESPACE)
                self.state = 2647
                self.tablespace()
                pass
            elif token in [plsqlParser.CACHE, plsqlParser.CHUNK, plsqlParser.COMPRESS, plsqlParser.DECRYPT, plsqlParser.DEDUPLICATE, plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ENCRYPT, plsqlParser.FREEPOOLS, plsqlParser.KEEP_DUPLICATES, plsqlParser.NOCACHE, plsqlParser.NOCOMPRESS, plsqlParser.PCTVERSION, plsqlParser.RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2648
                self.lob_parameters()
                self.state = 2650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORAGE:
                    self.state = 2649
                    self.storage_clause()


                pass
            elif token in [plsqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2652
                self.storage_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STORAGE)
            else:
                return self.getToken(plsqlParser.STORAGE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROW)
            else:
                return self.getToken(plsqlParser.ROW, i)

        def CHUNK(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHUNK)
            else:
                return self.getToken(plsqlParser.CHUNK, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTVERSION)
            else:
                return self.getToken(plsqlParser.PCTVERSION, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREEPOOLS)
            else:
                return self.getToken(plsqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DECRYPT)
            else:
                return self.getToken(plsqlParser.DECRYPT, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENABLE)
            else:
                return self.getToken(plsqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DISABLE)
            else:
                return self.getToken(plsqlParser.DISABLE, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.READS)
            else:
                return self.getToken(plsqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_lob_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_parameters" ):
                listener.enterLob_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_parameters" ):
                listener.exitLob_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_parameters" ):
                return visitor.visitLob_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lob_parameters(self):

        localctx = plsqlParser.Lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2680 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                    self.state = 2655
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2656
                    self.match(plsqlParser.STORAGE)
                    self.state = 2657
                    self.match(plsqlParser.IN)
                    self.state = 2658
                    self.match(plsqlParser.ROW)
                    pass
                elif token in [plsqlParser.CHUNK]:
                    self.state = 2659
                    self.match(plsqlParser.CHUNK)
                    self.state = 2660
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.PCTVERSION]:
                    self.state = 2661
                    self.match(plsqlParser.PCTVERSION)
                    self.state = 2662
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.FREEPOOLS]:
                    self.state = 2663
                    self.match(plsqlParser.FREEPOOLS)
                    self.state = 2664
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [plsqlParser.RETENTION]:
                    self.state = 2665
                    self.lob_retention_clause()
                    pass
                elif token in [plsqlParser.DEDUPLICATE, plsqlParser.KEEP_DUPLICATES]:
                    self.state = 2666
                    self.lob_deduplicate_clause()
                    pass
                elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                    self.state = 2667
                    self.lob_compression_clause()
                    pass
                elif token in [plsqlParser.ENCRYPT]:
                    self.state = 2668
                    self.match(plsqlParser.ENCRYPT)
                    self.state = 2669
                    self.encryption_spec()
                    pass
                elif token in [plsqlParser.DECRYPT]:
                    self.state = 2670
                    self.match(plsqlParser.DECRYPT)
                    pass
                elif token in [plsqlParser.CACHE, plsqlParser.NOCACHE]:
                    self.state = 2675
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                    if la_ == 1:
                        self.state = 2671
                        self.match(plsqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 2672
                        self.match(plsqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 2673
                        self.match(plsqlParser.CACHE)
                        self.state = 2674
                        self.match(plsqlParser.READS)
                        pass


                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING:
                        self.state = 2677
                        self.logging_clause()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2682 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (plsqlParser.CACHE - 54)) | (1 << (plsqlParser.CHUNK - 54)) | (1 << (plsqlParser.COMPRESS - 54)))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (plsqlParser.DECRYPT - 126)) | (1 << (plsqlParser.DEDUPLICATE - 126)) | (1 << (plsqlParser.DISABLE - 126)) | (1 << (plsqlParser.ENABLE - 126)) | (1 << (plsqlParser.ENCRYPT - 126)))) != 0) or _la==plsqlParser.FREEPOOLS or _la==plsqlParser.KEEP_DUPLICATES or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (plsqlParser.NOCACHE - 319)) | (1 << (plsqlParser.NOCOMPRESS - 319)) | (1 << (plsqlParser.PCTVERSION - 319)))) != 0) or _la==plsqlParser.RETENTION):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_retention_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETENTION(self):
            return self.getToken(plsqlParser.RETENTION, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_retention_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_retention_clause" ):
                listener.enterLob_retention_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_retention_clause" ):
                listener.exitLob_retention_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_retention_clause" ):
                return visitor.visitLob_retention_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_retention_clause(self):

        localctx = plsqlParser.Lob_retention_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lob_retention_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.match(plsqlParser.RETENTION)
            self.state = 2690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAX]:
                self.state = 2685
                self.match(plsqlParser.MAX)
                pass
            elif token in [plsqlParser.MIN]:
                self.state = 2686
                self.match(plsqlParser.MIN)
                self.state = 2687
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.AUTO]:
                self.state = 2688
                self.match(plsqlParser.AUTO)
                pass
            elif token in [plsqlParser.NONE]:
                self.state = 2689
                self.match(plsqlParser.NONE)
                pass
            elif token in [plsqlParser.ALLOCATE, plsqlParser.CACHE, plsqlParser.CHUNK, plsqlParser.COMPRESS, plsqlParser.DEALLOCATE, plsqlParser.DECRYPT, plsqlParser.DEDUPLICATE, plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ENCRYPT, plsqlParser.FREEPOOLS, plsqlParser.KEEP_DUPLICATES, plsqlParser.NOCACHE, plsqlParser.NOCOMPRESS, plsqlParser.PCTVERSION, plsqlParser.REBUILD, plsqlParser.RETENTION, plsqlParser.SHRINK, plsqlParser.STORAGE, plsqlParser.RIGHT_PAREN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_deduplicate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDUPLICATE(self):
            return self.getToken(plsqlParser.DEDUPLICATE, 0)

        def KEEP_DUPLICATES(self):
            return self.getToken(plsqlParser.KEEP_DUPLICATES, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_deduplicate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_deduplicate_clause" ):
                listener.enterLob_deduplicate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_deduplicate_clause" ):
                listener.exitLob_deduplicate_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_deduplicate_clause" ):
                return visitor.visitLob_deduplicate_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_deduplicate_clause(self):

        localctx = plsqlParser.Lob_deduplicate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lob_deduplicate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEDUPLICATE or _la==plsqlParser.KEEP_DUPLICATES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_compression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(plsqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(plsqlParser.COMPRESS, 0)

        def HIGH(self):
            return self.getToken(plsqlParser.HIGH, 0)

        def MEDIUM(self):
            return self.getToken(plsqlParser.MEDIUM, 0)

        def LOW(self):
            return self.getToken(plsqlParser.LOW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_compression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_compression_clause" ):
                listener.enterLob_compression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_compression_clause" ):
                listener.exitLob_compression_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_compression_clause" ):
                return visitor.visitLob_compression_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_compression_clause(self):

        localctx = plsqlParser.Lob_compression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_lob_compression_clause)
        self._la = 0 # Token type
        try:
            self.state = 2699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2694
                self.match(plsqlParser.NOCOMPRESS)
                pass
            elif token in [plsqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2695
                self.match(plsqlParser.COMPRESS)
                self.state = 2697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.HIGH or _la==plsqlParser.LOW or _la==plsqlParser.MEDIUM:
                    self.state = 2696
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.HIGH or _la==plsqlParser.LOW or _la==plsqlParser.MEDIUM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encryption_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(plsqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def SALT(self):
            return self.getToken(plsqlParser.SALT, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_encryption_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncryption_spec" ):
                listener.enterEncryption_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncryption_spec" ):
                listener.exitEncryption_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncryption_spec" ):
                return visitor.visitEncryption_spec(self)
            else:
                return visitor.visitChildren(self)




    def encryption_spec(self):

        localctx = plsqlParser.Encryption_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_encryption_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 2701
                self.match(plsqlParser.USING)
                self.state = 2702
                self.match(plsqlParser.CHAR_STRING)


            self.state = 2708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IDENTIFIED:
                self.state = 2705
                self.match(plsqlParser.IDENTIFIED)
                self.state = 2706
                self.match(plsqlParser.BY)
                self.state = 2707
                self.match(plsqlParser.REGULAR_ID)


            self.state = 2711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CHAR_STRING:
                self.state = 2710
                self.match(plsqlParser.CHAR_STRING)


            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NO:
                    self.state = 2713
                    self.match(plsqlParser.NO)


                self.state = 2716
                self.match(plsqlParser.SALT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def lob_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_itemContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_itemContext,i)


        def lob_storage_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_storage_parametersContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_storage_parametersContext,i)


        def lob_segname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_segnameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,i)


        def SECUREFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECUREFILE)
            else:
                return self.getToken(plsqlParser.SECUREFILE, i)

        def BASICFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BASICFILE)
            else:
                return self.getToken(plsqlParser.BASICFILE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_lob_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_storage_clause" ):
                listener.enterLob_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_storage_clause" ):
                listener.exitLob_storage_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLob_storage_clause" ):
                return visitor.visitLob_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def lob_storage_clause(self):

        localctx = plsqlParser.Lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_lob_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self.match(plsqlParser.LOB)
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2720
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2721
                        self.match(plsqlParser.COMMA)


                    self.state = 2724
                    self.lob_item()
                    self.state = 2727 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 2729
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2730
                self.match(plsqlParser.STORE)
                self.state = 2731
                self.match(plsqlParser.AS)
                self.state = 2737 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2737
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.BASICFILE, plsqlParser.SECUREFILE]:
                            self.state = 2732
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [plsqlParser.LEFT_PAREN]:
                            self.state = 2733
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2734
                            self.lob_storage_parameters()
                            self.state = 2735
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2739 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2741
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2742
                self.lob_item()
                self.state = 2743
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2744
                self.match(plsqlParser.STORE)
                self.state = 2745
                self.match(plsqlParser.AS)
                self.state = 2752 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2752
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.BASICFILE, plsqlParser.SECUREFILE]:
                            self.state = 2746
                            _la = self._input.LA(1)
                            if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                            self.state = 2747
                            self.lob_segname()
                            pass
                        elif token in [plsqlParser.LEFT_PAREN]:
                            self.state = 2748
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2749
                            self.lob_storage_parameters()
                            self.state = 2750
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2754 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLTYPE(self):
            return self.getToken(plsqlParser.XMLTYPE, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def xmltype_storage(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(plsqlParser.Xmlschema_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_column_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_column_properties" ):
                listener.enterXmltype_column_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_column_properties" ):
                listener.exitXmltype_column_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_column_properties" ):
                return visitor.visitXmltype_column_properties(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_column_properties(self):

        localctx = plsqlParser.Xmltype_column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_xmltype_column_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self.match(plsqlParser.XMLTYPE)
            self.state = 2760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 2759
                self.match(plsqlParser.COLUMN)


            self.state = 2762
            self.column_name()
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 2763
                self.xmltype_storage()


            self.state = 2767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.XMLSCHEMA:
                self.state = 2766
                self.xmlschema_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def RELATIONAL(self):
            return self.getToken(plsqlParser.RELATIONAL, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def BINARY(self):
            return self.getToken(plsqlParser.BINARY, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(plsqlParser.Lob_segnameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Lob_parametersContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SECUREFILE(self):
            return self.getToken(plsqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(plsqlParser.BASICFILE, 0)

        def VARRAYS(self):
            return self.getToken(plsqlParser.VARRAYS, 0)

        def LOBS(self):
            return self.getToken(plsqlParser.LOBS, 0)

        def TABLES(self):
            return self.getToken(plsqlParser.TABLES, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_storage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_storage" ):
                listener.enterXmltype_storage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_storage" ):
                listener.exitXmltype_storage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_storage" ):
                return visitor.visitXmltype_storage(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_storage(self):

        localctx = plsqlParser.Xmltype_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_xmltype_storage)
        self._la = 0 # Token type
        try:
            self.state = 2800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2769
                self.match(plsqlParser.STORE)
                self.state = 2770
                self.match(plsqlParser.AS)
                self.state = 2794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.OBJECT]:
                    self.state = 2771
                    self.match(plsqlParser.OBJECT)
                    self.state = 2772
                    self.match(plsqlParser.RELATIONAL)
                    pass
                elif token in [plsqlParser.BASICFILE, plsqlParser.BINARY, plsqlParser.CLOB, plsqlParser.SECUREFILE]:
                    self.state = 2774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE:
                        self.state = 2773
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BASICFILE or _la==plsqlParser.SECUREFILE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2779
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CLOB]:
                        self.state = 2776
                        self.match(plsqlParser.CLOB)
                        pass
                    elif token in [plsqlParser.BINARY]:
                        self.state = 2777
                        self.match(plsqlParser.BINARY)
                        self.state = 2778
                        self.match(plsqlParser.XML)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2792
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                    if la_ == 1:
                        self.state = 2781
                        self.lob_segname()
                        self.state = 2786
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                        if la_ == 1:
                            self.state = 2782
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 2783
                            self.lob_parameters()
                            self.state = 2784
                            self.match(plsqlParser.RIGHT_PAREN)



                    elif la_ == 2:
                        self.state = 2788
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 2789
                        self.lob_parameters()
                        self.state = 2790
                        self.match(plsqlParser.RIGHT_PAREN)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2796
                self.match(plsqlParser.STORE)
                self.state = 2797
                self.match(plsqlParser.VARRAYS)
                self.state = 2798
                self.match(plsqlParser.AS)
                self.state = 2799
                _la = self._input.LA(1)
                if not(_la==plsqlParser.LOBS or _la==plsqlParser.TABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlschema_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def DELIMITED_ID(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DELIMITED_ID)
            else:
                return self.getToken(plsqlParser.DELIMITED_ID, i)

        def XMLSCHEMA(self):
            return self.getToken(plsqlParser.XMLSCHEMA, 0)

        def allow_or_disallow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allow_or_disallowContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allow_or_disallowContext,i)


        def NONSCHEMA(self):
            return self.getToken(plsqlParser.NONSCHEMA, 0)

        def ANYSCHEMA(self):
            return self.getToken(plsqlParser.ANYSCHEMA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmlschema_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlschema_spec" ):
                listener.enterXmlschema_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlschema_spec" ):
                listener.exitXmlschema_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlschema_spec" ):
                return visitor.visitXmlschema_spec(self)
            else:
                return visitor.visitChildren(self)




    def xmlschema_spec(self):

        localctx = plsqlParser.Xmlschema_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_xmlschema_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XMLSCHEMA:
                self.state = 2802
                self.match(plsqlParser.XMLSCHEMA)
                self.state = 2803
                self.match(plsqlParser.DELIMITED_ID)


            self.state = 2806
            self.match(plsqlParser.ELEMENT)
            self.state = 2807
            self.match(plsqlParser.DELIMITED_ID)
            self.state = 2811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2808
                self.allow_or_disallow()
                self.state = 2809
                self.match(plsqlParser.NONSCHEMA)


            self.state = 2816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALLOW or _la==plsqlParser.DISALLOW:
                self.state = 2813
                self.allow_or_disallow()
                self.state = 2814
                self.match(plsqlParser.ANYSCHEMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_or_disallowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(plsqlParser.ALLOW, 0)

        def DISALLOW(self):
            return self.getToken(plsqlParser.DISALLOW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_allow_or_disallow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_or_disallow" ):
                listener.enterAllow_or_disallow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_or_disallow" ):
                listener.exitAllow_or_disallow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_or_disallow" ):
                return visitor.visitAllow_or_disallow(self)
            else:
                return visitor.visitChildren(self)




    def allow_or_disallow(self):

        localctx = plsqlParser.Allow_or_disallowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_allow_or_disallow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALLOW or _la==plsqlParser.DISALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_partitioning_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Range_partitionsContext,0)


        def list_partitions(self):
            return self.getTypedRuleContext(plsqlParser.List_partitionsContext,0)


        def hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitionsContext,0)


        def composite_range_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_range_partitionsContext,0)


        def composite_list_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_list_partitionsContext,0)


        def composite_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Composite_hash_partitionsContext,0)


        def reference_partitioning(self):
            return self.getTypedRuleContext(plsqlParser.Reference_partitioningContext,0)


        def system_partitioning(self):
            return self.getTypedRuleContext(plsqlParser.System_partitioningContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_partitioning_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_partitioning_clauses" ):
                listener.enterTable_partitioning_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_partitioning_clauses" ):
                listener.exitTable_partitioning_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_partitioning_clauses" ):
                return visitor.visitTable_partitioning_clauses(self)
            else:
                return visitor.visitChildren(self)




    def table_partitioning_clauses(self):

        localctx = plsqlParser.Table_partitioning_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_table_partitioning_clauses)
        try:
            self.state = 2828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2820
                self.range_partitions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2821
                self.list_partitions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2822
                self.hash_partitions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2823
                self.composite_range_partitions()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2824
                self.composite_list_partitions()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2825
                self.composite_hash_partitions()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2826
                self.reference_partitioning()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2827
                self.system_partitioning()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def range_values_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_values_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,i)


        def table_partition_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_partition_descriptionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,i)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_range_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_partitions" ):
                listener.enterRange_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_partitions" ):
                listener.exitRange_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_partitions" ):
                return visitor.visitRange_partitions(self)
            else:
                return visitor.visitChildren(self)




    def range_partitions(self):

        localctx = plsqlParser.Range_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_range_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2830
            self.match(plsqlParser.PARTITION)
            self.state = 2831
            self.match(plsqlParser.BY)
            self.state = 2832
            self.match(plsqlParser.RANGE)
            self.state = 2833
            self.paren_column_list()
            self.state = 2853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTERVAL:
                self.state = 2834
                self.match(plsqlParser.INTERVAL)
                self.state = 2835
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2836
                self.expression(0)
                self.state = 2837
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 2838
                    self.match(plsqlParser.STORE)
                    self.state = 2839
                    self.match(plsqlParser.IN)
                    self.state = 2840
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2845 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2841
                            self.match(plsqlParser.COMMA)


                        self.state = 2844
                        self.tablespace()
                        self.state = 2847 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 2849
                    self.match(plsqlParser.RIGHT_PAREN)




            self.state = 2855
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2866 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2856
                    self.match(plsqlParser.COMMA)


                self.state = 2859
                self.match(plsqlParser.PARTITION)
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 2860
                    self.partition_name()


                self.state = 2863
                self.range_values_clause()
                self.state = 2864
                self.table_partition_description()
                self.state = 2868 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2870
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LESS(self):
            return self.getToken(plsqlParser.LESS, 0)

        def THAN(self):
            return self.getToken(plsqlParser.THAN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_range_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_values_clause" ):
                listener.enterRange_values_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_values_clause" ):
                listener.exitRange_values_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_values_clause" ):
                return visitor.visitRange_values_clause(self)
            else:
                return visitor.visitChildren(self)




    def range_values_clause(self):

        localctx = plsqlParser.Range_values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_range_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2872
            self.match(plsqlParser.VALUES)
            self.state = 2873
            self.match(plsqlParser.LESS)
            self.state = 2874
            self.match(plsqlParser.THAN)
            self.state = 2875
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2880 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2876
                    self.match(plsqlParser.COMMA)


                self.state = 2879
                self.literal()
                self.state = 2882 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.DECODE - 65)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 503)) & ~0x3f) == 0 and ((1 << (_la - 503)) & ((1 << (plsqlParser.SUBSTRING - 503)) | (1 << (plsqlParser.TO_CHAR - 503)) | (1 << (plsqlParser.TO_DATE - 503)) | (1 << (plsqlParser.TRIM - 503)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 639)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 639)) | (1 << (plsqlParser.CHAR_STRING - 639)) | (1 << (plsqlParser.COMMA - 639)))) != 0)):
                    break

            self.state = 2884
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_partition_descriptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deferred_segment_creation(self):
            return self.getTypedRuleContext(plsqlParser.Deferred_segment_creationContext,0)


        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def table_compression(self):
            return self.getTypedRuleContext(plsqlParser.Table_compressionContext,0)


        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def varray_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Varray_col_propertiesContext,0)


        def nested_table_col_properties(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_col_propertiesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_partition_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_partition_description" ):
                listener.enterTable_partition_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_partition_description" ):
                listener.exitTable_partition_description(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_partition_description" ):
                return visitor.visitTable_partition_description(self)
            else:
                return visitor.visitChildren(self)




    def table_partition_description(self):

        localctx = plsqlParser.Table_partition_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_table_partition_description)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEGMENT:
                self.state = 2886
                self.deferred_segment_creation()


            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 2889
                self.segment_attributes_clause()


            self.state = 2894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2892
                self.table_compression()

            elif la_ == 2:
                self.state = 2893
                self.key_compression()


            self.state = 2900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OVERFLOW:
                self.state = 2896
                self.match(plsqlParser.OVERFLOW)
                self.state = 2898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                    self.state = 2897
                    self.segment_attributes_clause()




            self.state = 2905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LOB]:
                self.state = 2902
                self.lob_storage_clause()
                pass
            elif token in [plsqlParser.VARRAY]:
                self.state = 2903
                self.varray_col_properties()
                pass
            elif token in [plsqlParser.NESTED]:
                self.state = 2904
                self.nested_table_col_properties()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.AS, plsqlParser.CACHE, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DISABLE, plsqlParser.DROP, plsqlParser.ENABLE, plsqlParser.EXPLAIN, plsqlParser.FLASHBACK, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.NO, plsqlParser.NOCACHE, plsqlParser.NOPARALLEL, plsqlParser.NOROWDEPENDENCIES, plsqlParser.PARALLEL, plsqlParser.PARTITION, plsqlParser.PROCEDURE, plsqlParser.REFRESH, plsqlParser.RESULT_CACHE, plsqlParser.REVOKE, plsqlParser.ROW, plsqlParser.ROWDEPENDENCIES, plsqlParser.SELECT, plsqlParser.SUBPARTITIONS, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def list_values_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_values_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,i)


        def table_partition_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_partition_descriptionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Partition_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_list_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_partitions" ):
                listener.enterList_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_partitions" ):
                listener.exitList_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_partitions" ):
                return visitor.visitList_partitions(self)
            else:
                return visitor.visitChildren(self)




    def list_partitions(self):

        localctx = plsqlParser.List_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_list_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(plsqlParser.PARTITION)
            self.state = 2908
            self.match(plsqlParser.BY)
            self.state = 2909
            self.match(plsqlParser.LIST)
            self.state = 2910
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2911
            self.column_name()
            self.state = 2912
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2913
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2924 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2914
                        self.match(plsqlParser.COMMA)


                    self.state = 2917
                    self.match(plsqlParser.PARTITION)
                    self.state = 2919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 2918
                        self.partition_name()


                    self.state = 2921
                    self.list_values_clause()
                    self.state = 2922
                    self.table_partition_description()
                    self.state = 2926 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 2928
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.LiteralContext)
            else:
                return self.getTypedRuleContext(plsqlParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_list_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_values_clause" ):
                listener.enterList_values_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_values_clause" ):
                listener.exitList_values_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_values_clause" ):
                return visitor.visitList_values_clause(self)
            else:
                return visitor.visitChildren(self)




    def list_values_clause(self):

        localctx = plsqlParser.List_values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_list_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2932
            self.match(plsqlParser.VALUES)
            self.state = 2933
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CHR, plsqlParser.CONCAT, plsqlParser.DECODE, plsqlParser.MAXVALUE, plsqlParser.NVL, plsqlParser.SUBSTRING, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRIM, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.COMMA]:
                self.state = 2938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2934
                        self.match(plsqlParser.COMMA)


                    self.state = 2937
                    self.literal()
                    self.state = 2940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.DECODE - 65)))) != 0) or _la==plsqlParser.MAXVALUE or _la==plsqlParser.NVL or ((((_la - 503)) & ~0x3f) == 0 and ((1 << (_la - 503)) & ((1 << (plsqlParser.SUBSTRING - 503)) | (1 << (plsqlParser.TO_CHAR - 503)) | (1 << (plsqlParser.TO_DATE - 503)) | (1 << (plsqlParser.TRIM - 503)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (plsqlParser.UNSIGNED_INTEGER - 639)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 639)) | (1 << (plsqlParser.CHAR_STRING - 639)) | (1 << (plsqlParser.COMMA - 639)))) != 0)):
                        break

                pass
            elif token in [plsqlParser.DEFAULT]:
                self.state = 2942
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2945
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_hash_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partitions" ):
                listener.enterHash_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partitions" ):
                listener.exitHash_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_partitions" ):
                return visitor.visitHash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def hash_partitions(self):

        localctx = plsqlParser.Hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_hash_partitions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(plsqlParser.PARTITION)
            self.state = 2948
            self.match(plsqlParser.BY)
            self.state = 2949
            self.match(plsqlParser.HASH)
            self.state = 2950
            self.paren_column_list()
            self.state = 2953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 2951
                self.individual_hash_partitions()
                pass
            elif token in [plsqlParser.PARTITIONS]:
                self.state = 2952
                self.hash_partitions_by_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_range_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def range_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_partition_descContext,i)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_composite_range_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposite_range_partitions" ):
                listener.enterComposite_range_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposite_range_partitions" ):
                listener.exitComposite_range_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_range_partitions" ):
                return visitor.visitComposite_range_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_range_partitions(self):

        localctx = plsqlParser.Composite_range_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_composite_range_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.match(plsqlParser.PARTITION)
            self.state = 2956
            self.match(plsqlParser.BY)
            self.state = 2957
            self.match(plsqlParser.RANGE)
            self.state = 2958
            self.paren_column_list()
            self.state = 2978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTERVAL:
                self.state = 2959
                self.match(plsqlParser.INTERVAL)
                self.state = 2960
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2961
                self.expression(0)
                self.state = 2962
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 2976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 2963
                    self.match(plsqlParser.STORE)
                    self.state = 2964
                    self.match(plsqlParser.IN)
                    self.state = 2965
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2970 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2967
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 2966
                            self.match(plsqlParser.COMMA)


                        self.state = 2969
                        self.tablespace()
                        self.state = 2972 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 2974
                    self.match(plsqlParser.RIGHT_PAREN)




            self.state = 2983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2980
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 2981
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 2982
                self.subpartition_by_hash()
                pass


            self.state = 2985
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 2986
                    self.match(plsqlParser.COMMA)


                self.state = 2989
                self.range_partition_desc()
                self.state = 2992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 2994
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_rangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartition_by_range" ):
                listener.enterSubpartition_by_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartition_by_range" ):
                listener.exitSubpartition_by_range(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_range" ):
                return visitor.visitSubpartition_by_range(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_range(self):

        localctx = plsqlParser.Subpartition_by_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_subpartition_by_range)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2996
            self.match(plsqlParser.SUBPARTITION)
            self.state = 2997
            self.match(plsqlParser.BY)
            self.state = 2998
            self.match(plsqlParser.RANGE)
            self.state = 2999
            self.paren_column_list()
            self.state = 3001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITION:
                self.state = 3000
                self.subpartition_template()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartition_by_list" ):
                listener.enterSubpartition_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartition_by_list" ):
                listener.exitSubpartition_by_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_list" ):
                return visitor.visitSubpartition_by_list(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_list(self):

        localctx = plsqlParser.Subpartition_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_subpartition_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3004
            self.match(plsqlParser.BY)
            self.state = 3005
            self.match(plsqlParser.LIST)
            self.state = 3006
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3007
            self.column_name()
            self.state = 3008
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITION:
                self.state = 3009
                self.subpartition_template()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_templateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def TEMPLATE(self):
            return self.getToken(plsqlParser.TEMPLATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subpartition_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subpartition_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_template

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartition_template" ):
                listener.enterSubpartition_template(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartition_template" ):
                listener.exitSubpartition_template(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_template" ):
                return visitor.visitSubpartition_template(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_template(self):

        localctx = plsqlParser.Subpartition_templateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_subpartition_template)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3012
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3013
            self.match(plsqlParser.TEMPLATE)

            self.state = 3044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3014
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 3019 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3015
                            self.match(plsqlParser.COMMA)


                        self.state = 3018
                        self.range_subpartition_desc()
                        self.state = 3021 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass

                elif la_ == 2:
                    self.state = 3027 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3024
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3023
                            self.match(plsqlParser.COMMA)


                        self.state = 3026
                        self.list_subpartition_desc()
                        self.state = 3029 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass

                elif la_ == 3:
                    self.state = 3035 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3032
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3031
                            self.match(plsqlParser.COMMA)


                        self.state = 3034
                        self.individual_hash_subparts()
                        self.state = 3037 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                            break

                    pass


                self.state = 3041
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER]:
                self.state = 3043
                self.hash_subpartition_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_subpartition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def range_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,0)


        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_range_subpartition_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_subpartition_desc" ):
                listener.enterRange_subpartition_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_subpartition_desc" ):
                listener.exitRange_subpartition_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_subpartition_desc" ):
                return visitor.visitRange_subpartition_desc(self)
            else:
                return visitor.visitChildren(self)




    def range_subpartition_desc(self):

        localctx = plsqlParser.Range_subpartition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_range_subpartition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3046
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3047
                self.subpartition_name()


            self.state = 3050
            self.range_values_clause()
            self.state = 3052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 3051
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_subpartition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def list_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,0)


        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_list_subpartition_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_subpartition_desc" ):
                listener.enterList_subpartition_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_subpartition_desc" ):
                listener.exitList_subpartition_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_subpartition_desc" ):
                return visitor.visitList_subpartition_desc(self)
            else:
                return visitor.visitChildren(self)




    def list_subpartition_desc(self):

        localctx = plsqlParser.List_subpartition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_list_subpartition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3054
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3055
                self.subpartition_name()


            self.state = 3058
            self.list_values_clause()
            self.state = 3060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 3059
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Individual_hash_subpartsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def subpartition_name(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_nameContext,0)


        def partitioning_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partitioning_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_individual_hash_subparts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividual_hash_subparts" ):
                listener.enterIndividual_hash_subparts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividual_hash_subparts" ):
                listener.exitIndividual_hash_subparts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndividual_hash_subparts" ):
                return visitor.visitIndividual_hash_subparts(self)
            else:
                return visitor.visitChildren(self)




    def individual_hash_subparts(self):

        localctx = plsqlParser.Individual_hash_subpartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_individual_hash_subparts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3062
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 3063
                self.subpartition_name()


            self.state = 3067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPRESS or _la==plsqlParser.LOB or _la==plsqlParser.NOCOMPRESS or _la==plsqlParser.OVERFLOW or _la==plsqlParser.TABLESPACE or _la==plsqlParser.VARRAY:
                self.state = 3066
                self.partitioning_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_subpartition_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_subpartition_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_subpartition_quantity" ):
                listener.enterHash_subpartition_quantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_subpartition_quantity" ):
                listener.exitHash_subpartition_quantity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_subpartition_quantity" ):
                return visitor.visitHash_subpartition_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_subpartition_quantity(self):

        localctx = plsqlParser.Hash_subpartition_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_hash_subpartition_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3069
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subpartition_by_hashContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def SUBPARTITIONS(self):
            return self.getToken(plsqlParser.SUBPARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def subpartition_template(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_templateContext,0)


        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subpartition_by_hash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartition_by_hash" ):
                listener.enterSubpartition_by_hash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartition_by_hash" ):
                listener.exitSubpartition_by_hash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartition_by_hash" ):
                return visitor.visitSubpartition_by_hash(self)
            else:
                return visitor.visitChildren(self)




    def subpartition_by_hash(self):

        localctx = plsqlParser.Subpartition_by_hashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_subpartition_by_hash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3071
            self.match(plsqlParser.SUBPARTITION)
            self.state = 3072
            self.match(plsqlParser.BY)
            self.state = 3073
            self.match(plsqlParser.HASH)
            self.state = 3074
            self.paren_column_list()
            self.state = 3093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SUBPARTITIONS]:
                self.state = 3075
                self.match(plsqlParser.SUBPARTITIONS)
                self.state = 3076
                self.match(plsqlParser.UNSIGNED_INTEGER)
                self.state = 3090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.STORE:
                    self.state = 3077
                    self.match(plsqlParser.STORE)
                    self.state = 3078
                    self.match(plsqlParser.IN)
                    self.state = 3079
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3084 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3081
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3080
                            self.match(plsqlParser.COMMA)


                        self.state = 3083
                        self.tablespace()
                        self.state = 3086 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 3088
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.SUBPARTITION]:
                self.state = 3092
                self.subpartition_template()
                pass
            elif token in [plsqlParser.PARTITIONS, plsqlParser.LEFT_PAREN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def range_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Range_values_clauseContext,0)


        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subparts_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subparts_by_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_range_partition_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_partition_desc" ):
                listener.enterRange_partition_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_partition_desc" ):
                listener.exitRange_partition_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_partition_desc" ):
                return visitor.visitRange_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def range_partition_desc(self):

        localctx = plsqlParser.Range_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_range_partition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3095
            self.match(plsqlParser.PARTITION)
            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3096
                self.partition_name()


            self.state = 3099
            self.range_values_clause()
            self.state = 3100
            self.table_partition_description()
            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITIONS or _la==plsqlParser.LEFT_PAREN:
                self.state = 3131
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3101
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3126
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                    if la_ == 1:
                        self.state = 3106 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3103
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3102
                                self.match(plsqlParser.COMMA)


                            self.state = 3105
                            self.range_subpartition_desc()
                            self.state = 3108 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 2:
                        self.state = 3114 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3111
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3110
                                self.match(plsqlParser.COMMA)


                            self.state = 3113
                            self.list_subpartition_desc()
                            self.state = 3116 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 3122 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3119
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3118
                                self.match(plsqlParser.COMMA)


                            self.state = 3121
                            self.individual_hash_subparts()
                            self.state = 3124 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass


                    self.state = 3128
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                elif token in [plsqlParser.SUBPARTITIONS]:
                    self.state = 3130
                    self.hash_subparts_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_subparts_by_quantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITIONS(self):
            return self.getToken(plsqlParser.SUBPARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def STORE(self):
            return self.getToken(plsqlParser.STORE, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_hash_subparts_by_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_subparts_by_quantity" ):
                listener.enterHash_subparts_by_quantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_subparts_by_quantity" ):
                listener.exitHash_subparts_by_quantity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHash_subparts_by_quantity" ):
                return visitor.visitHash_subparts_by_quantity(self)
            else:
                return visitor.visitChildren(self)




    def hash_subparts_by_quantity(self):

        localctx = plsqlParser.Hash_subparts_by_quantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_hash_subparts_by_quantity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3135
            self.match(plsqlParser.SUBPARTITIONS)
            self.state = 3136
            self.match(plsqlParser.UNSIGNED_INTEGER)
            self.state = 3150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.STORE:
                self.state = 3137
                self.match(plsqlParser.STORE)
                self.state = 3138
                self.match(plsqlParser.IN)
                self.state = 3139
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3140
                        self.match(plsqlParser.COMMA)


                    self.state = 3143
                    self.tablespace()
                    self.state = 3146 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3148
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_list_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def list_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_composite_list_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposite_list_partitions" ):
                listener.enterComposite_list_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposite_list_partitions" ):
                listener.exitComposite_list_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_list_partitions" ):
                return visitor.visitComposite_list_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_list_partitions(self):

        localctx = plsqlParser.Composite_list_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_composite_list_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3152
            self.match(plsqlParser.PARTITION)
            self.state = 3153
            self.match(plsqlParser.BY)
            self.state = 3154
            self.match(plsqlParser.LIST)
            self.state = 3155
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3156
            self.column_name()
            self.state = 3157
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3158
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 3159
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 3160
                self.subpartition_by_hash()
                pass


            self.state = 3163
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3168 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 3164
                    self.match(plsqlParser.COMMA)


                self.state = 3167
                self.list_partition_desc()
                self.state = 3170 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                    break

            self.state = 3172
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def list_values_clause(self):
            return self.getTypedRuleContext(plsqlParser.List_values_clauseContext,0)


        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def hash_subparts_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_subparts_by_quantityContext,0)


        def range_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Range_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Range_subpartition_descContext,i)


        def list_subpartition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.List_subpartition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.List_subpartition_descContext,i)


        def individual_hash_subparts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Individual_hash_subpartsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Individual_hash_subpartsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_list_partition_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_partition_desc" ):
                listener.enterList_partition_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_partition_desc" ):
                listener.exitList_partition_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_partition_desc" ):
                return visitor.visitList_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def list_partition_desc(self):

        localctx = plsqlParser.List_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_list_partition_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3174
            self.match(plsqlParser.PARTITION)
            self.state = 3176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3175
                self.partition_name()


            self.state = 3178
            self.list_values_clause()
            self.state = 3179
            self.table_partition_description()
            self.state = 3212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SUBPARTITIONS or _la==plsqlParser.LEFT_PAREN:
                self.state = 3210
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3180
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3205
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                    if la_ == 1:
                        self.state = 3185 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3182
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3181
                                self.match(plsqlParser.COMMA)


                            self.state = 3184
                            self.range_subpartition_desc()
                            self.state = 3187 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 2:
                        self.state = 3193 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3190
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3189
                                self.match(plsqlParser.COMMA)


                            self.state = 3192
                            self.list_subpartition_desc()
                            self.state = 3195 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 3201 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3198
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==plsqlParser.COMMA:
                                self.state = 3197
                                self.match(plsqlParser.COMMA)


                            self.state = 3200
                            self.individual_hash_subparts()
                            self.state = 3203 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==plsqlParser.SUBPARTITION or _la==plsqlParser.COMMA):
                                break

                        pass


                    self.state = 3207
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                elif token in [plsqlParser.SUBPARTITIONS]:
                    self.state = 3209
                    self.hash_subparts_by_quantity()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_hash_partitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subpartition_by_range(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_rangeContext,0)


        def subpartition_by_list(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_listContext,0)


        def subpartition_by_hash(self):
            return self.getTypedRuleContext(plsqlParser.Subpartition_by_hashContext,0)


        def individual_hash_partitions(self):
            return self.getTypedRuleContext(plsqlParser.Individual_hash_partitionsContext,0)


        def hash_partitions_by_quantity(self):
            return self.getTypedRuleContext(plsqlParser.Hash_partitions_by_quantityContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_composite_hash_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposite_hash_partitions" ):
                listener.enterComposite_hash_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposite_hash_partitions" ):
                listener.exitComposite_hash_partitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_hash_partitions" ):
                return visitor.visitComposite_hash_partitions(self)
            else:
                return visitor.visitChildren(self)




    def composite_hash_partitions(self):

        localctx = plsqlParser.Composite_hash_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_composite_hash_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.match(plsqlParser.PARTITION)
            self.state = 3215
            self.match(plsqlParser.BY)
            self.state = 3216
            self.match(plsqlParser.HASH)
            self.state = 3217
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3220 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3218
                self.match(plsqlParser.COMMA)
                self.state = 3219
                self.column_name()
                self.state = 3222 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.COMMA):
                    break

            self.state = 3224
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 3225
                self.subpartition_by_range()
                pass

            elif la_ == 2:
                self.state = 3226
                self.subpartition_by_list()
                pass

            elif la_ == 3:
                self.state = 3227
                self.subpartition_by_hash()
                pass


            self.state = 3232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3230
                self.individual_hash_partitions()
                pass
            elif token in [plsqlParser.PARTITIONS]:
                self.state = 3231
                self.hash_partitions_by_quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_partitioningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def reference_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_reference_partitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_partitioning" ):
                listener.enterReference_partitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_partitioning" ):
                listener.exitReference_partitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_partitioning" ):
                return visitor.visitReference_partitioning(self)
            else:
                return visitor.visitChildren(self)




    def reference_partitioning(self):

        localctx = plsqlParser.Reference_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_reference_partitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.match(plsqlParser.PARTITION)
            self.state = 3235
            self.match(plsqlParser.BY)
            self.state = 3236
            self.match(plsqlParser.REFERENCE)
            self.state = 3237
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3238
            self.regular_id()
            self.state = 3239
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 3240
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3245 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3241
                        self.match(plsqlParser.COMMA)


                    self.state = 3244
                    self.reference_partition_desc()
                    self.state = 3247 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 3249
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_partition_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def table_partition_description(self):
            return self.getTypedRuleContext(plsqlParser.Table_partition_descriptionContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(plsqlParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_partition_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_partition_desc" ):
                listener.enterReference_partition_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_partition_desc" ):
                listener.exitReference_partition_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_partition_desc" ):
                return visitor.visitReference_partition_desc(self)
            else:
                return visitor.visitChildren(self)




    def reference_partition_desc(self):

        localctx = plsqlParser.Reference_partition_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_reference_partition_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3253
            self.match(plsqlParser.PARTITION)
            self.state = 3255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 3254
                self.partition_name()


            self.state = 3257
            self.table_partition_description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_partitioningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def SYSTEM(self):
            return self.getToken(plsqlParser.SYSTEM, 0)

        def PARTITIONS(self):
            return self.getToken(plsqlParser.PARTITIONS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def reference_partition_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_partition_descContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_partition_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_system_partitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_partitioning" ):
                listener.enterSystem_partitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_partitioning" ):
                listener.exitSystem_partitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystem_partitioning" ):
                return visitor.visitSystem_partitioning(self)
            else:
                return visitor.visitChildren(self)




    def system_partitioning(self):

        localctx = plsqlParser.System_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_system_partitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3259
            self.match(plsqlParser.PARTITION)
            self.state = 3260
            self.match(plsqlParser.BY)
            self.state = 3261
            self.match(plsqlParser.SYSTEM)
            self.state = 3272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 3262
                self.match(plsqlParser.PARTITIONS)
                self.state = 3263
                self.match(plsqlParser.UNSIGNED_INTEGER)

            elif la_ == 2:
                self.state = 3268 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3264
                            self.match(plsqlParser.COMMA)


                        self.state = 3267
                        self.reference_partition_desc()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3270 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,415,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_disable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def using_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_index_clauseContext,0)


        def exceptions_clause(self):
            return self.getTypedRuleContext(plsqlParser.Exceptions_clauseContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def NOVALIDATE(self):
            return self.getToken(plsqlParser.NOVALIDATE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_enable_disable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_disable_clause" ):
                listener.enterEnable_disable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_disable_clause" ):
                listener.exitEnable_disable_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnable_disable_clause" ):
                return visitor.visitEnable_disable_clause(self)
            else:
                return visitor.visitChildren(self)




    def enable_disable_clause(self):

        localctx = plsqlParser.Enable_disable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_enable_disable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3274
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE:
                self.state = 3275
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOVALIDATE or _la==plsqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UNIQUE]:
                self.state = 3278
                self.match(plsqlParser.UNIQUE)
                self.state = 3279
                self.paren_column_list()
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 3280
                self.match(plsqlParser.PRIMARY)
                self.state = 3281
                self.match(plsqlParser.KEY)
                pass
            elif token in [plsqlParser.CONSTRAINT]:
                self.state = 3282
                self.match(plsqlParser.CONSTRAINT)
                self.state = 3283
                self.constraint_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 3286
                self.using_index_clause()


            self.state = 3290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCEPTIONS:
                self.state = 3289
                self.exceptions_clause()


            self.state = 3293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE:
                self.state = 3292
                self.match(plsqlParser.CASCADE)


            self.state = 3297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3295
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DROP or _la==plsqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3296
                self.match(plsqlParser.INDEX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exceptions_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_exceptions_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptions_clause" ):
                listener.enterExceptions_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptions_clause" ):
                listener.exitExceptions_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptions_clause" ):
                return visitor.visitExceptions_clause(self)
            else:
                return visitor.visitChildren(self)




    def exceptions_clause(self):

        localctx = plsqlParser.Exceptions_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_exceptions_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            self.match(plsqlParser.EXCEPTIONS)
            self.state = 3300
            self.match(plsqlParser.INTO)
            self.state = 3301
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_movement_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def MOVEMENT(self):
            return self.getToken(plsqlParser.MOVEMENT, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_row_movement_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_movement_clause" ):
                listener.enterRow_movement_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_movement_clause" ):
                listener.exitRow_movement_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_movement_clause" ):
                return visitor.visitRow_movement_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_movement_clause(self):

        localctx = plsqlParser.Row_movement_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_row_movement_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE:
                self.state = 3303
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3306
            self.match(plsqlParser.ROW)
            self.state = 3307
            self.match(plsqlParser.MOVEMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flashback_archive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flashback_archive = None # Token

        def FLASHBACK(self):
            return self.getToken(plsqlParser.FLASHBACK, 0)

        def ARCHIVE(self):
            return self.getToken(plsqlParser.ARCHIVE, 0)

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_flashback_archive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_archive_clause" ):
                listener.enterFlashback_archive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_archive_clause" ):
                listener.exitFlashback_archive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_archive_clause" ):
                return visitor.visitFlashback_archive_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_archive_clause(self):

        localctx = plsqlParser.Flashback_archive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_flashback_archive_clause)
        try:
            self.state = 3315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.FLASHBACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3309
                self.match(plsqlParser.FLASHBACK)
                self.state = 3310
                self.match(plsqlParser.ARCHIVE)
                self.state = 3311
                localctx.flashback_archive = self.match(plsqlParser.REGULAR_ID)
                pass
            elif token in [plsqlParser.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3312
                self.match(plsqlParser.NO)
                self.state = 3313
                self.match(plsqlParser.FLASHBACK)
                self.state = 3314
                self.match(plsqlParser.ARCHIVE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def object_table_substitution(self):
            return self.getTypedRuleContext(plsqlParser.Object_table_substitutionContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,i)


        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_table" ):
                listener.enterObject_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_table" ):
                listener.exitObject_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_table" ):
                return visitor.visitObject_table(self)
            else:
                return visitor.visitChildren(self)




    def object_table(self):

        localctx = plsqlParser.Object_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_object_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3317
            self.match(plsqlParser.OF)
            self.state = 3318
            self.type_name()
            self.state = 3320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT or _la==plsqlParser.SUBSTITUTABLE:
                self.state = 3319
                self.object_table_substitution()


            self.state = 3333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 3322
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3327 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3323
                        self.match(plsqlParser.COMMA)


                    self.state = 3326
                    self.object_properties()
                    self.state = 3329 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FOREIGN - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIMARY - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SCOPE - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUPPLEMENTAL - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNIQUE - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3331
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 3335
                self.match(plsqlParser.ON)
                self.state = 3336
                self.match(plsqlParser.COMMIT)
                self.state = 3337
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3338
                self.match(plsqlParser.ROWS)


            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OBJECT:
                self.state = 3341
                self.oid_clause()


            self.state = 3345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OIDINDEX:
                self.state = 3344
                self.oid_index_clause()


            self.state = 3348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (plsqlParser.SEGMENT - 459)) | (1 << (plsqlParser.STORAGE - 459)) | (1 << (plsqlParser.TABLESPACE - 459)))) != 0):
                self.state = 3347
                self.physical_properties()


            self.state = 3351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3350
                self.column_properties()


            self.state = 3354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 3353
                self.table_partitioning_clauses()


            self.state = 3357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 3356
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 3359
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 3360
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3361
                self.match(plsqlParser.MODE)
                self.state = 3362
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3363
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 3366
                self.parallel_clause()


            self.state = 3370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 3369
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 3373 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3372
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3375 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,439,self._ctx)



            self.state = 3380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 3379
                self.row_movement_clause()


            self.state = 3383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 3382
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_table_substitutionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_table_substitution

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_table_substitution" ):
                listener.enterObject_table_substitution(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_table_substitution" ):
                listener.exitObject_table_substitution(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_table_substitution" ):
                return visitor.visitObject_table_substitution(self)
            else:
                return visitor.visitChildren(self)




    def object_table_substitution(self):

        localctx = plsqlParser.Object_table_substitutionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_object_table_substitution)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3385
                self.match(plsqlParser.NOT)


            self.state = 3388
            self.match(plsqlParser.SUBSTITUTABLE)
            self.state = 3389
            self.match(plsqlParser.AT)
            self.state = 3390
            self.match(plsqlParser.ALL)
            self.state = 3391
            self.match(plsqlParser.LEVELS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oid_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def IDENTIFIER(self):
            return self.getToken(plsqlParser.IDENTIFIER, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def SYSTEM(self):
            return self.getToken(plsqlParser.SYSTEM, 0)

        def GENERATED(self):
            return self.getToken(plsqlParser.GENERATED, 0)

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_oid_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOid_clause" ):
                listener.enterOid_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOid_clause" ):
                listener.exitOid_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOid_clause" ):
                return visitor.visitOid_clause(self)
            else:
                return visitor.visitChildren(self)




    def oid_clause(self):

        localctx = plsqlParser.Oid_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oid_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3393
            self.match(plsqlParser.OBJECT)
            self.state = 3394
            self.match(plsqlParser.IDENTIFIER)
            self.state = 3395
            self.match(plsqlParser.IS)
            self.state = 3400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SYSTEM]:
                self.state = 3396
                self.match(plsqlParser.SYSTEM)
                self.state = 3397
                self.match(plsqlParser.GENERATED)
                pass
            elif token in [plsqlParser.PRIMARY]:
                self.state = 3398
                self.match(plsqlParser.PRIMARY)
                self.state = 3399
                self.match(plsqlParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oid_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OIDINDEX(self):
            return self.getToken(plsqlParser.OIDINDEX, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.TABLESPACE)
            else:
                return self.getToken(plsqlParser.TABLESPACE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(plsqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_oid_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOid_index_clause" ):
                listener.enterOid_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOid_index_clause" ):
                listener.exitOid_index_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOid_index_clause" ):
                return visitor.visitOid_index_clause(self)
            else:
                return visitor.visitChildren(self)




    def oid_index_clause(self):

        localctx = plsqlParser.Oid_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oid_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402
            self.match(plsqlParser.OIDINDEX)
            self.state = 3404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3403
                self.index_name()


            self.state = 3406
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3410 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                    self.state = 3407
                    self.physical_attributes_clause()
                    pass
                elif token in [plsqlParser.TABLESPACE]:
                    self.state = 3408
                    self.match(plsqlParser.TABLESPACE)
                    self.state = 3409
                    self.tablespace()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3412 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INITRANS or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE):
                    break

            self.state = 3414
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def XMLTYPE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.XMLTYPE)
            else:
                return self.getToken(plsqlParser.XMLTYPE, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def object_properties(self):
            return self.getTypedRuleContext(plsqlParser.Object_propertiesContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def xmltype_storage(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(plsqlParser.Xmlschema_specContext,0)


        def xmltype_virtual_columns(self):
            return self.getTypedRuleContext(plsqlParser.Xmltype_virtual_columnsContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(plsqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(plsqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(plsqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(plsqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_table" ):
                listener.enterXmltype_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_table" ):
                listener.exitXmltype_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_table" ):
                return visitor.visitXmltype_table(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_table(self):

        localctx = plsqlParser.Xmltype_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_xmltype_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3416
            self.match(plsqlParser.OF)
            self.state = 3417
            self.match(plsqlParser.XMLTYPE)
            self.state = 3422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 3418
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3419
                self.object_properties()
                self.state = 3420
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 3424
                self.match(plsqlParser.XMLTYPE)
                self.state = 3425
                self.xmltype_storage()


            self.state = 3429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELEMENT or _la==plsqlParser.XMLSCHEMA:
                self.state = 3428
                self.xmlschema_spec()


            self.state = 3432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VIRTUAL:
                self.state = 3431
                self.xmltype_virtual_columns()


            self.state = 3438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ON:
                self.state = 3434
                self.match(plsqlParser.ON)
                self.state = 3435
                self.match(plsqlParser.COMMIT)
                self.state = 3436
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DELETE or _la==plsqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3437
                self.match(plsqlParser.ROWS)


            self.state = 3441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OBJECT:
                self.state = 3440
                self.oid_clause()


            self.state = 3444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OIDINDEX:
                self.state = 3443
                self.oid_index_clause()


            self.state = 3447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (plsqlParser.SEGMENT - 459)) | (1 << (plsqlParser.STORAGE - 459)) | (1 << (plsqlParser.TABLESPACE - 459)))) != 0):
                self.state = 3446
                self.physical_properties()


            self.state = 3450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3449
                self.column_properties()


            self.state = 3453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3452
                self.table_partitioning_clauses()


            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE:
                self.state = 3455
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 3458
                self.match(plsqlParser.RESULT_CACHE)
                self.state = 3459
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3460
                self.match(plsqlParser.MODE)
                self.state = 3461
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3462
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 3466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOPARALLEL or _la==plsqlParser.PARALLEL:
                self.state = 3465
                self.parallel_clause()


            self.state = 3469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES:
                self.state = 3468
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOROWDEPENDENCIES or _la==plsqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3472 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3471
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3474 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,462,self._ctx)



            self.state = 3479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE or _la==plsqlParser.ROW:
                self.state = 3478
                self.row_movement_clause()


            self.state = 3482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FLASHBACK or _la==plsqlParser.NO:
                self.state = 3481
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltype_virtual_columnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRTUAL(self):
            return self.getToken(plsqlParser.VIRTUAL, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmltype_virtual_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_virtual_columns" ):
                listener.enterXmltype_virtual_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_virtual_columns" ):
                listener.exitXmltype_virtual_columns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmltype_virtual_columns" ):
                return visitor.visitXmltype_virtual_columns(self)
            else:
                return visitor.visitChildren(self)




    def xmltype_virtual_columns(self):

        localctx = plsqlParser.Xmltype_virtual_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_xmltype_virtual_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3484
            self.match(plsqlParser.VIRTUAL)
            self.state = 3485
            self.match(plsqlParser.COLUMNS)
            self.state = 3486
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3496 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 3487
                    self.match(plsqlParser.COMMA)


                self.state = 3490
                self.column_name()
                self.state = 3491
                self.match(plsqlParser.AS)
                self.state = 3492
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3493
                self.expression(0)
                self.state = 3494
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 3498 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 3500
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def IF(self):
            return self.getToken(plsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(plsqlParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(plsqlParser.PURGE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = plsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3502
            self.match(plsqlParser.DROP)
            self.state = 3503
            self.match(plsqlParser.TABLE)
            self.state = 3506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IF:
                self.state = 3504
                self.match(plsqlParser.IF)
                self.state = 3505
                self.match(plsqlParser.EXISTS)


            self.state = 3508
            self.tableview_name()
            self.state = 3510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PURGE:
                self.state = 3509
                self.match(plsqlParser.PURGE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def alter_table_properties(self):
            return self.getTypedRuleContext(plsqlParser.Alter_table_propertiesContext,0)


        def constraint_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_clausesContext,0)


        def column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Column_clausesContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = plsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_alter_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3512
            self.match(plsqlParser.ALTER)
            self.state = 3513
            self.match(plsqlParser.TABLE)
            self.state = 3514
            self.tableview_name()
            self.state = 3519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                pass

            elif la_ == 2:
                self.state = 3516
                self.alter_table_properties()
                pass

            elif la_ == 3:
                self.state = 3517
                self.constraint_clauses()
                pass

            elif la_ == 4:
                self.state = 3518
                self.column_clauses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_properties_1(self):
            return self.getTypedRuleContext(plsqlParser.Alter_table_properties_1Context,0)


        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def shrink_clause(self):
            return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,0)


        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def REKEY(self):
            return self.getToken(plsqlParser.REKEY, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_properties" ):
                listener.enterAlter_table_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_properties" ):
                listener.exitAlter_table_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_properties" ):
                return visitor.visitAlter_table_properties(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_properties(self):

        localctx = plsqlParser.Alter_table_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_alter_table_properties)
        try:
            self.state = 3532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3521
                self.alter_table_properties_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3522
                self.match(plsqlParser.RENAME)
                self.state = 3523
                self.match(plsqlParser.TO)
                self.state = 3524
                self.tableview_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3525
                self.shrink_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3526
                self.match(plsqlParser.READ)
                self.state = 3527
                self.match(plsqlParser.ONLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3528
                self.match(plsqlParser.READ)
                self.state = 3529
                self.match(plsqlParser.WRITE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3530
                self.match(plsqlParser.REKEY)
                self.state = 3531
                self.match(plsqlParser.CHAR_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_properties_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Physical_attributes_clauseContext,i)


        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def table_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_compressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_compressionContext,i)


        def supplemental_table_logging(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_table_loggingContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_table_loggingContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def RESULT_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RESULT_CACHE)
            else:
                return self.getToken(plsqlParser.RESULT_CACHE, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def MODE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MODE)
            else:
                return self.getToken(plsqlParser.MODE, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def upgrade_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Upgrade_table_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Upgrade_table_clauseContext,i)


        def records_per_block_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Records_per_block_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Records_per_block_clauseContext,i)


        def parallel_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_clauseContext,i)


        def row_movement_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Row_movement_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Row_movement_clauseContext,i)


        def flashback_archive_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_archive_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_archive_clauseContext,i)


        def alter_iot_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Alter_iot_clausesContext,0)


        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DEFAULT)
            else:
                return self.getToken(plsqlParser.DEFAULT, i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FORCE)
            else:
                return self.getToken(plsqlParser.FORCE, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_table_properties_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_properties_1" ):
                listener.enterAlter_table_properties_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_properties_1" ):
                listener.exitAlter_table_properties_1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_properties_1" ):
                return visitor.visitAlter_table_properties_1(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_properties_1(self):

        localctx = plsqlParser.Alter_table_properties_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_alter_table_properties_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3551
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.INITRANS, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE]:
                        self.state = 3534
                        self.physical_attributes_clause()
                        pass
                    elif token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.LOGGING, plsqlParser.NOLOGGING]:
                        self.state = 3535
                        self.logging_clause()
                        pass
                    elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                        self.state = 3536
                        self.table_compression()
                        pass
                    elif token in [plsqlParser.ADD, plsqlParser.DROP]:
                        self.state = 3537
                        self.supplemental_table_logging()
                        pass
                    elif token in [plsqlParser.ALLOCATE]:
                        self.state = 3538
                        self.allocate_extent_clause()
                        pass
                    elif token in [plsqlParser.DEALLOCATE]:
                        self.state = 3539
                        self.deallocate_unused_clause()
                        pass
                    elif token in [plsqlParser.CACHE, plsqlParser.NOCACHE]:
                        self.state = 3540
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.CACHE or _la==plsqlParser.NOCACHE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.RESULT_CACHE]:
                        self.state = 3541
                        self.match(plsqlParser.RESULT_CACHE)
                        self.state = 3542
                        self.match(plsqlParser.LEFT_PAREN)
                        self.state = 3543
                        self.match(plsqlParser.MODE)
                        self.state = 3544
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.FORCE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3545
                        self.match(plsqlParser.RIGHT_PAREN)
                        pass
                    elif token in [plsqlParser.UPGRADE]:
                        self.state = 3546
                        self.upgrade_table_clause()
                        pass
                    elif token in [plsqlParser.MINIMIZE, plsqlParser.NOMINIMIZE, plsqlParser.RECORDS_PER_BLOCK]:
                        self.state = 3547
                        self.records_per_block_clause()
                        pass
                    elif token in [plsqlParser.NOPARALLEL, plsqlParser.PARALLEL]:
                        self.state = 3548
                        self.parallel_clause()
                        pass
                    elif token in [plsqlParser.DISABLE, plsqlParser.ENABLE, plsqlParser.ROW]:
                        self.state = 3549
                        self.row_movement_clause()
                        pass
                    elif token in [plsqlParser.FLASHBACK, plsqlParser.NO]:
                        self.state = 3550
                        self.flashback_archive_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3553 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,473,self._ctx)

            self.state = 3556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ADD or _la==plsqlParser.COALESCE or _la==plsqlParser.COMPRESS or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (plsqlParser.MAPPING - 284)) | (1 << (plsqlParser.NOCOMPRESS - 284)) | (1 << (plsqlParser.NOMAPPING - 284)))) != 0) or _la==plsqlParser.OVERFLOW or _la==plsqlParser.PCTTHRESHOLD:
                self.state = 3555
                self.alter_iot_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supplemental_table_loggingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def SUPPLEMENTAL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SUPPLEMENTAL)
            else:
                return self.getToken(plsqlParser.SUPPLEMENTAL, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOG)
            else:
                return self.getToken(plsqlParser.LOG, i)

        def supplemental_log_grp_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_log_grp_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_log_grp_clauseContext,i)


        def supplemental_id_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Supplemental_id_key_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Supplemental_id_key_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GROUP)
            else:
                return self.getToken(plsqlParser.GROUP, i)

        def log_grp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Log_grpContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Log_grpContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_supplemental_table_logging

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_table_logging" ):
                listener.enterSupplemental_table_logging(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_table_logging" ):
                listener.exitSupplemental_table_logging(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupplemental_table_logging" ):
                return visitor.visitSupplemental_table_logging(self)
            else:
                return visitor.visitChildren(self)




    def supplemental_table_logging(self):

        localctx = plsqlParser.Supplemental_table_loggingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_supplemental_table_logging)
        self._la = 0 # Token type
        try:
            self.state = 3589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3558
                self.match(plsqlParser.ADD)
                self.state = 3570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.SUPPLEMENTAL or _la==plsqlParser.COMMA:
                    self.state = 3560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3559
                        self.match(plsqlParser.COMMA)


                    self.state = 3562
                    self.match(plsqlParser.SUPPLEMENTAL)
                    self.state = 3563
                    self.match(plsqlParser.LOG)
                    self.state = 3566
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GROUP]:
                        self.state = 3564
                        self.supplemental_log_grp_clause()
                        pass
                    elif token in [plsqlParser.DATA]:
                        self.state = 3565
                        self.supplemental_id_key_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3573
                self.match(plsqlParser.DROP)
                self.state = 3586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.SUPPLEMENTAL or _la==plsqlParser.COMMA:
                    self.state = 3575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3574
                        self.match(plsqlParser.COMMA)


                    self.state = 3577
                    self.match(plsqlParser.SUPPLEMENTAL)
                    self.state = 3578
                    self.match(plsqlParser.LOG)
                    self.state = 3582
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DATA]:
                        self.state = 3579
                        self.supplemental_id_key_clause()
                        pass
                    elif token in [plsqlParser.GROUP]:
                        self.state = 3580
                        self.match(plsqlParser.GROUP)
                        self.state = 3581
                        self.log_grp()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allocate_extent_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.inst_num = None # Token

        def ALLOCATE(self):
            return self.getToken(plsqlParser.ALLOCATE, 0)

        def EXTENT(self):
            return self.getToken(plsqlParser.EXTENT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def SIZE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SIZE)
            else:
                return self.getToken(plsqlParser.SIZE, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Size_clauseContext,i)


        def DATAFILE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DATAFILE)
            else:
                return self.getToken(plsqlParser.DATAFILE, i)

        def INSTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INSTANCE)
            else:
                return self.getToken(plsqlParser.INSTANCE, i)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CHAR_STRING)
            else:
                return self.getToken(plsqlParser.CHAR_STRING, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_allocate_extent_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocate_extent_clause" ):
                listener.enterAllocate_extent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocate_extent_clause" ):
                listener.exitAllocate_extent_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocate_extent_clause" ):
                return visitor.visitAllocate_extent_clause(self)
            else:
                return visitor.visitChildren(self)




    def allocate_extent_clause(self):

        localctx = plsqlParser.Allocate_extent_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_allocate_extent_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.match(plsqlParser.ALLOCATE)
            self.state = 3592
            self.match(plsqlParser.EXTENT)
            self.state = 3605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 3593
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3600 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3600
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.SIZE]:
                        self.state = 3594
                        self.match(plsqlParser.SIZE)
                        self.state = 3595
                        self.size_clause()
                        pass
                    elif token in [plsqlParser.DATAFILE]:
                        self.state = 3596
                        self.match(plsqlParser.DATAFILE)
                        self.state = 3597
                        localctx.datafile = self.match(plsqlParser.CHAR_STRING)
                        pass
                    elif token in [plsqlParser.INSTANCE]:
                        self.state = 3598
                        self.match(plsqlParser.INSTANCE)
                        self.state = 3599
                        localctx.inst_num = self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3602 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.DATAFILE or _la==plsqlParser.INSTANCE or _la==plsqlParser.SIZE):
                        break

                self.state = 3604
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deallocate_unused_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(plsqlParser.DEALLOCATE, 0)

        def UNUSED(self):
            return self.getToken(plsqlParser.UNUSED, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def size_clause(self):
            return self.getTypedRuleContext(plsqlParser.Size_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_deallocate_unused_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate_unused_clause" ):
                listener.enterDeallocate_unused_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate_unused_clause" ):
                listener.exitDeallocate_unused_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate_unused_clause" ):
                return visitor.visitDeallocate_unused_clause(self)
            else:
                return visitor.visitChildren(self)




    def deallocate_unused_clause(self):

        localctx = plsqlParser.Deallocate_unused_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_deallocate_unused_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            self.match(plsqlParser.DEALLOCATE)
            self.state = 3608
            self.match(plsqlParser.UNUSED)
            self.state = 3611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.KEEP:
                self.state = 3609
                self.match(plsqlParser.KEEP)
                self.state = 3610
                self.size_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upgrade_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPGRADE(self):
            return self.getToken(plsqlParser.UPGRADE, 0)

        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_upgrade_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpgrade_table_clause" ):
                listener.enterUpgrade_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpgrade_table_clause" ):
                listener.exitUpgrade_table_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpgrade_table_clause" ):
                return visitor.visitUpgrade_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def upgrade_table_clause(self):

        localctx = plsqlParser.Upgrade_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_upgrade_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3613
            self.match(plsqlParser.UPGRADE)

            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3614
                self.match(plsqlParser.NOT)


            self.state = 3617
            self.match(plsqlParser.INCLUDING)
            self.state = 3618
            self.match(plsqlParser.DATA)
            self.state = 3620
            self.column_properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Records_per_block_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORDS_PER_BLOCK(self):
            return self.getToken(plsqlParser.RECORDS_PER_BLOCK, 0)

        def MINIMIZE(self):
            return self.getToken(plsqlParser.MINIMIZE, 0)

        def NOMINIMIZE(self):
            return self.getToken(plsqlParser.NOMINIMIZE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_records_per_block_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecords_per_block_clause" ):
                listener.enterRecords_per_block_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecords_per_block_clause" ):
                listener.exitRecords_per_block_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecords_per_block_clause" ):
                return visitor.visitRecords_per_block_clause(self)
            else:
                return visitor.visitChildren(self)




    def records_per_block_clause(self):

        localctx = plsqlParser.Records_per_block_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_records_per_block_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.MINIMIZE or _la==plsqlParser.NOMINIMIZE:
                self.state = 3622
                _la = self._input.LA(1)
                if not(_la==plsqlParser.MINIMIZE or _la==plsqlParser.NOMINIMIZE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3625
            self.match(plsqlParser.RECORDS_PER_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_iot_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_org_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_org_table_clauseContext,0)


        def alter_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Alter_overflow_clauseContext,0)


        def alter_mapping_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Alter_mapping_table_clauseContext,0)


        def COALESCE(self):
            return self.getToken(plsqlParser.COALESCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_iot_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_iot_clauses" ):
                listener.enterAlter_iot_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_iot_clauses" ):
                listener.exitAlter_iot_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_iot_clauses" ):
                return visitor.visitAlter_iot_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_iot_clauses(self):

        localctx = plsqlParser.Alter_iot_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_alter_iot_clauses)
        try:
            self.state = 3631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3627
                self.index_org_table_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3628
                self.alter_overflow_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3629
                self.alter_mapping_table_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3630
                self.match(plsqlParser.COALESCE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_org_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapping_table_clause(self):
            return self.getTypedRuleContext(plsqlParser.Mapping_table_clauseContext,0)


        def PCTTHRESHOLD(self):
            return self.getToken(plsqlParser.PCTTHRESHOLD, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def key_compression(self):
            return self.getTypedRuleContext(plsqlParser.Key_compressionContext,0)


        def index_org_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Index_org_overflow_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_org_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_org_table_clause" ):
                listener.enterIndex_org_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_org_table_clause" ):
                listener.exitIndex_org_table_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_org_table_clause" ):
                return visitor.visitIndex_org_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_org_table_clause(self):

        localctx = plsqlParser.Index_org_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_index_org_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAPPING, plsqlParser.NOMAPPING]:
                self.state = 3633
                self.mapping_table_clause()
                pass
            elif token in [plsqlParser.PCTTHRESHOLD]:
                self.state = 3634
                self.match(plsqlParser.PCTTHRESHOLD)
                self.state = 3635
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.COMPRESS, plsqlParser.NOCOMPRESS]:
                self.state = 3636
                self.key_compression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INCLUDING or _la==plsqlParser.OVERFLOW:
                self.state = 3639
                self.index_org_overflow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(plsqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def NOMAPPING(self):
            return self.getToken(plsqlParser.NOMAPPING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_mapping_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_table_clause" ):
                listener.enterMapping_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_table_clause" ):
                listener.exitMapping_table_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_table_clause" ):
                return visitor.visitMapping_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def mapping_table_clause(self):

        localctx = plsqlParser.Mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_mapping_table_clause)
        try:
            self.state = 3645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAPPING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3642
                self.match(plsqlParser.MAPPING)
                self.state = 3643
                self.match(plsqlParser.TABLE)
                pass
            elif token in [plsqlParser.NOMAPPING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3644
                self.match(plsqlParser.NOMAPPING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_org_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def segment_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_org_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_org_overflow_clause" ):
                listener.enterIndex_org_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_org_overflow_clause" ):
                listener.exitIndex_org_overflow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_org_overflow_clause" ):
                return visitor.visitIndex_org_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def index_org_overflow_clause(self):

        localctx = plsqlParser.Index_org_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_index_org_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INCLUDING:
                self.state = 3647
                self.match(plsqlParser.INCLUDING)
                self.state = 3648
                self.column_name()


            self.state = 3651
            self.match(plsqlParser.OVERFLOW)
            self.state = 3653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 3652
                self.segment_attributes_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_overflow_clause(self):
            return self.getTypedRuleContext(plsqlParser.Add_overflow_clauseContext,0)


        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_overflow_clause" ):
                listener.enterAlter_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_overflow_clause" ):
                listener.exitAlter_overflow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_overflow_clause" ):
                return visitor.visitAlter_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_overflow_clause(self):

        localctx = plsqlParser.Alter_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_alter_overflow_clause)
        self._la = 0 # Token type
        try:
            self.state = 3665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3655
                self.add_overflow_clause()
                pass
            elif token in [plsqlParser.OVERFLOW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3656
                self.match(plsqlParser.OVERFLOW)
                self.state = 3661 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3661
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.FILESYSTEM_LIKE_LOGGING, plsqlParser.INITRANS, plsqlParser.LOGGING, plsqlParser.NOLOGGING, plsqlParser.PCTFREE, plsqlParser.PCTUSED, plsqlParser.STORAGE, plsqlParser.TABLESPACE]:
                        self.state = 3657
                        self.segment_attributes_clause()
                        pass
                    elif token in [plsqlParser.ALLOCATE]:
                        self.state = 3658
                        self.allocate_extent_clause()
                        pass
                    elif token in [plsqlParser.SHRINK]:
                        self.state = 3659
                        self.shrink_clause()
                        pass
                    elif token in [plsqlParser.DEALLOCATE]:
                        self.state = 3660
                        self.deallocate_unused_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.ALLOCATE or _la==plsqlParser.DEALLOCATE or _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (plsqlParser.NOLOGGING - 324)) | (1 << (plsqlParser.PCTFREE - 324)) | (1 << (plsqlParser.PCTUSED - 324)))) != 0) or ((((_la - 473)) & ~0x3f) == 0 and ((1 << (_la - 473)) & ((1 << (plsqlParser.SHRINK - 473)) | (1 << (plsqlParser.STORAGE - 473)) | (1 << (plsqlParser.TABLESPACE - 473)))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def OVERFLOW(self):
            return self.getToken(plsqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Segment_attributes_clauseContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PARTITION)
            else:
                return self.getToken(plsqlParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_add_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_overflow_clause" ):
                listener.enterAdd_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_overflow_clause" ):
                listener.exitAdd_overflow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_overflow_clause" ):
                return visitor.visitAdd_overflow_clause(self)
            else:
                return visitor.visitChildren(self)




    def add_overflow_clause(self):

        localctx = plsqlParser.Add_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_add_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3667
            self.match(plsqlParser.ADD)
            self.state = 3668
            self.match(plsqlParser.OVERFLOW)
            self.state = 3670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                self.state = 3669
                self.segment_attributes_clause()


            self.state = 3685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 3672
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3680 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3673
                        self.match(plsqlParser.COMMA)


                    self.state = 3676
                    self.match(plsqlParser.PARTITION)
                    self.state = 3678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.INITRANS or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING or _la==plsqlParser.PCTFREE or _la==plsqlParser.PCTUSED or _la==plsqlParser.STORAGE or _la==plsqlParser.TABLESPACE:
                        self.state = 3677
                        self.segment_attributes_clause()


                    self.state = 3682 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.PARTITION or _la==plsqlParser.COMMA):
                        break

                self.state = 3684
                self.match(plsqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shrink_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHRINK(self):
            return self.getToken(plsqlParser.SHRINK, 0)

        def SPACE_KEYWORD(self):
            return self.getToken(plsqlParser.SPACE_KEYWORD, 0)

        def COMPACT(self):
            return self.getToken(plsqlParser.COMPACT, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_shrink_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShrink_clause" ):
                listener.enterShrink_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShrink_clause" ):
                listener.exitShrink_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShrink_clause" ):
                return visitor.visitShrink_clause(self)
            else:
                return visitor.visitChildren(self)




    def shrink_clause(self):

        localctx = plsqlParser.Shrink_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_shrink_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3687
            self.match(plsqlParser.SHRINK)
            self.state = 3688
            self.match(plsqlParser.SPACE_KEYWORD)
            self.state = 3690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMPACT:
                self.state = 3689
                self.match(plsqlParser.COMPACT)


            self.state = 3693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE:
                self.state = 3692
                self.match(plsqlParser.CASCADE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(plsqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def allocate_extent_clause(self):
            return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,0)


        def deallocate_unused_clause(self):
            return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_mapping_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_mapping_table_clause" ):
                listener.enterAlter_mapping_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_mapping_table_clause" ):
                listener.exitAlter_mapping_table_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_mapping_table_clause" ):
                return visitor.visitAlter_mapping_table_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_mapping_table_clause(self):

        localctx = plsqlParser.Alter_mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_alter_mapping_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3695
            self.match(plsqlParser.MAPPING)
            self.state = 3696
            self.match(plsqlParser.TABLE)
            self.state = 3699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALLOCATE]:
                self.state = 3697
                self.allocate_extent_clause()
                pass
            elif token in [plsqlParser.DEALLOCATE]:
                self.state = 3698
                self.deallocate_unused_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(plsqlParser.Out_of_line_ref_constraintContext,0)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Out_of_line_constraintContext,i)


        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def constraint_state(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_stateContext,0)


        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def old_constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Old_constraint_nameContext,0)


        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def new_constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.New_constraint_nameContext,0)


        def drop_constraint_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Drop_constraint_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Drop_constraint_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_clauses" ):
                listener.enterConstraint_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_clauses" ):
                listener.exitConstraint_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_clauses" ):
                return visitor.visitConstraint_clauses(self)
            else:
                return visitor.visitChildren(self)




    def constraint_clauses(self):

        localctx = plsqlParser.Constraint_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_constraint_clauses)
        self._la = 0 # Token type
        try:
            self.state = 3747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3701
                self.match(plsqlParser.ADD)
                self.state = 3702
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 3706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.CHECK or _la==plsqlParser.CONSTRAINT or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE:
                        self.state = 3703
                        self.out_of_line_constraint()
                        self.state = 3708
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3709
                    self.out_of_line_ref_constraint()
                    pass


                self.state = 3712
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3713
                self.match(plsqlParser.ADD)
                self.state = 3721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
                if la_ == 1:
                    self.state = 3717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.CHECK or _la==plsqlParser.CONSTRAINT or _la==plsqlParser.FOREIGN or _la==plsqlParser.PRIMARY or _la==plsqlParser.UNIQUE:
                        self.state = 3714
                        self.out_of_line_constraint()
                        self.state = 3719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3720
                    self.out_of_line_ref_constraint()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3723
                self.match(plsqlParser.MODIFY)
                self.state = 3730
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.CONSTRAINT]:
                    self.state = 3724
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 3725
                    self.constraint_name()
                    pass
                elif token in [plsqlParser.PRIMARY]:
                    self.state = 3726
                    self.match(plsqlParser.PRIMARY)
                    self.state = 3727
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 3728
                    self.match(plsqlParser.UNIQUE)
                    self.state = 3729
                    self.paren_column_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3732
                self.constraint_state()
                self.state = 3734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3733
                    self.match(plsqlParser.CASCADE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3736
                self.match(plsqlParser.RENAME)
                self.state = 3737
                self.match(plsqlParser.CONSTRAINT)
                self.state = 3738
                self.old_constraint_name()
                self.state = 3739
                self.match(plsqlParser.TO)
                self.state = 3740
                self.new_constraint_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3743 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3742
                        self.drop_constraint_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3745 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,511,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_old_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_constraint_name" ):
                listener.enterOld_constraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_constraint_name" ):
                listener.exitOld_constraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_constraint_name" ):
                return visitor.visitOld_constraint_name(self)
            else:
                return visitor.visitChildren(self)




    def old_constraint_name(self):

        localctx = plsqlParser.Old_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_old_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_new_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_constraint_name" ):
                listener.enterNew_constraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_constraint_name" ):
                listener.exitNew_constraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_constraint_name" ):
                return visitor.visitNew_constraint_name(self)
            else:
                return visitor.visitChildren(self)




    def new_constraint_name(self):

        localctx = plsqlParser.New_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_new_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3751
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_constraint_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def drop_primary_key_or_unique_or_generic_clause(self):
            return self.getTypedRuleContext(plsqlParser.Drop_primary_key_or_unique_or_generic_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_constraint_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_constraint_clause" ):
                listener.enterDrop_constraint_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_constraint_clause" ):
                listener.exitDrop_constraint_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_constraint_clause" ):
                return visitor.visitDrop_constraint_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_constraint_clause(self):

        localctx = plsqlParser.Drop_constraint_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_drop_constraint_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3753
            self.match(plsqlParser.DROP)
            self.state = 3754
            self.drop_primary_key_or_unique_or_generic_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_primary_key_or_unique_or_generic_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(plsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(plsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_primary_key_or_unique_or_generic_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_primary_key_or_unique_or_generic_clause" ):
                listener.enterDrop_primary_key_or_unique_or_generic_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_primary_key_or_unique_or_generic_clause" ):
                listener.exitDrop_primary_key_or_unique_or_generic_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_primary_key_or_unique_or_generic_clause" ):
                return visitor.visitDrop_primary_key_or_unique_or_generic_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_primary_key_or_unique_or_generic_clause(self):

        localctx = plsqlParser.Drop_primary_key_or_unique_or_generic_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_drop_primary_key_or_unique_or_generic_clause)
        self._la = 0 # Token type
        try:
            self.state = 3773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PRIMARY, plsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3760
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.PRIMARY]:
                    self.state = 3756
                    self.match(plsqlParser.PRIMARY)
                    self.state = 3757
                    self.match(plsqlParser.KEY)
                    pass
                elif token in [plsqlParser.UNIQUE]:
                    self.state = 3758
                    self.match(plsqlParser.UNIQUE)
                    self.state = 3759
                    self.paren_column_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3762
                    self.match(plsqlParser.CASCADE)


                self.state = 3766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 3765
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DROP or _la==plsqlParser.KEEP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [plsqlParser.CONSTRAINT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3768
                self.match(plsqlParser.CONSTRAINT)
                self.state = 3769
                self.constraint_name()
                self.state = 3771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CASCADE:
                    self.state = 3770
                    self.match(plsqlParser.CASCADE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_modify_drop_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Add_modify_drop_column_clausesContext,0)


        def rename_column_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rename_column_clauseContext,0)


        def modify_collection_retrieval(self):
            return self.getTypedRuleContext(plsqlParser.Modify_collection_retrievalContext,0)


        def modify_lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modify_lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_clauses" ):
                listener.enterColumn_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_clauses" ):
                listener.exitColumn_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_clauses" ):
                return visitor.visitColumn_clauses(self)
            else:
                return visitor.visitChildren(self)




    def column_clauses(self):

        localctx = plsqlParser.Column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_column_clauses)
        try:
            self.state = 3779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3775
                self.add_modify_drop_column_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3776
                self.rename_column_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3777
                self.modify_collection_retrieval()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3778
                self.modify_lob_storage_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_modify_drop_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Add_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Add_column_clauseContext,i)


        def modify_column_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modify_column_clausesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modify_column_clausesContext,i)


        def alter_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Alter_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Alter_column_clauseContext,i)


        def drop_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Drop_column_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Drop_column_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_add_modify_drop_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_modify_drop_column_clauses" ):
                listener.enterAdd_modify_drop_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_modify_drop_column_clauses" ):
                listener.exitAdd_modify_drop_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_modify_drop_column_clauses" ):
                return visitor.visitAdd_modify_drop_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def add_modify_drop_column_clauses(self):

        localctx = plsqlParser.Add_modify_drop_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_add_modify_drop_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3792 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3792
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.ADD]:
                        self.state = 3781
                        self.add_column_clause()
                        pass
                    elif token in [plsqlParser.MODIFY]:
                        self.state = 3782
                        self.modify_column_clauses()
                        pass
                    elif token in [plsqlParser.ALTER]:
                        self.state = 3783
                        self.alter_column_clause()
                        pass
                    elif token in [plsqlParser.DROP, plsqlParser.SET]:
                        self.state = 3784
                        self.drop_column_clause()
                        self.state = 3789
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==plsqlParser.COMMA:
                            self.state = 3785
                            self.match(plsqlParser.COMMA)
                            self.state = 3786
                            self.drop_column_clause()
                            self.state = 3791
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3794 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,521,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_properties(self):
            return self.getTypedRuleContext(plsqlParser.Column_propertiesContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Virtual_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_add_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_column_clause" ):
                listener.enterAdd_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_column_clause" ):
                listener.exitAdd_column_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_column_clause" ):
                return visitor.visitAdd_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def add_column_clause(self):

        localctx = plsqlParser.Add_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_add_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3796
            self.match(plsqlParser.ADD)
            self.state = 3798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3797
                self.match(plsqlParser.COLUMN)


            self.state = 3819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3800
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3809 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3809
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                    if la_ == 1:
                        self.state = 3802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3801
                            self.match(plsqlParser.COMMA)


                        self.state = 3804
                        self.column_definition()
                        pass

                    elif la_ == 2:
                        self.state = 3806
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3805
                            self.match(plsqlParser.COMMA)


                        self.state = 3808
                        self.virtual_column_definition()
                        pass


                    self.state = 3811 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3813
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 3817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                if la_ == 1:
                    self.state = 3815
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 3816
                    self.virtual_column_definition()
                    pass


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN or _la==plsqlParser.LOB or _la==plsqlParser.NESTED or _la==plsqlParser.VARRAY or _la==plsqlParser.XMLTYPE:
                self.state = 3821
                self.column_properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def modify_col_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modify_col_propertiesContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modify_col_propertiesContext,i)


        def modify_col_substitutable(self):
            return self.getTypedRuleContext(plsqlParser.Modify_col_substitutableContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_column_clauses" ):
                listener.enterModify_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_column_clauses" ):
                listener.exitModify_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_column_clauses" ):
                return visitor.visitModify_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def modify_column_clauses(self):

        localctx = plsqlParser.Modify_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_modify_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3824
            self.match(plsqlParser.MODIFY)
            self.state = 3838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                self.state = 3825
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 3826
                        self.match(plsqlParser.COMMA)


                    self.state = 3829
                    self.modify_col_properties()
                    self.state = 3832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                        break

                self.state = 3834
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 3836
                self.modify_col_properties()
                pass
            elif token in [plsqlParser.COLUMN]:
                self.state = 3837
                self.modify_col_substitutable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_clause" ):
                listener.enterAlter_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_clause" ):
                listener.exitAlter_column_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_column_clause" ):
                return visitor.visitAlter_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def alter_column_clause(self):

        localctx = plsqlParser.Alter_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_alter_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3840
            self.match(plsqlParser.ALTER)
            self.state = 3842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3841
                self.match(plsqlParser.COLUMN)


            self.state = 3844
            self.column_name()
            self.state = 3854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DROP, plsqlParser.SET]:
                self.state = 3845
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DROP or _la==plsqlParser.SET):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3846
                self.match(plsqlParser.NOT)
                self.state = 3847
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.TYPE]:
                self.state = 3848
                self.match(plsqlParser.TYPE)
                self.state = 3849
                self.datatype()
                self.state = 3852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 3850
                    self.match(plsqlParser.USING)

                    self.state = 3851
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(plsqlParser.ENCRYPT, 0)

        def encryption_spec(self):
            return self.getTypedRuleContext(plsqlParser.Encryption_specContext,0)


        def DECRYPT(self):
            return self.getToken(plsqlParser.DECRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Inline_constraintContext,i)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(plsqlParser.Lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_col_properties" ):
                listener.enterModify_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_col_properties" ):
                listener.exitModify_col_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_col_properties" ):
                return visitor.visitModify_col_properties(self)
            else:
                return visitor.visitChildren(self)




    def modify_col_properties(self):

        localctx = plsqlParser.Modify_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_modify_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3856
            self.column_name()
            self.state = 3858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
            if la_ == 1:
                self.state = 3857
                self.datatype()


            self.state = 3862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 3860
                self.match(plsqlParser.DEFAULT)
                self.state = 3861
                self.expression(0)


            self.state = 3867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ENCRYPT]:
                self.state = 3864
                self.match(plsqlParser.ENCRYPT)
                self.state = 3865
                self.encryption_spec()
                pass
            elif token in [plsqlParser.DECRYPT]:
                self.state = 3866
                self.match(plsqlParser.DECRYPT)
                pass
            elif token in [plsqlParser.EOF, plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALTER, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHECK, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CREATE, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DELETE, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DROP, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOB, plsqlParser.LOCK, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIMARY, plsqlParser.PROCEDURE, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCES, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REVOKE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNIQUE, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATE, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITH, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON, plsqlParser.REGULAR_ID]:
                pass
            else:
                pass
            self.state = 3872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,539,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3869
                    self.inline_constraint() 
                self.state = 3874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,539,self._ctx)

            self.state = 3876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOB:
                self.state = 3875
                self.lob_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_col_substitutableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(plsqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_col_substitutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_col_substitutable" ):
                listener.enterModify_col_substitutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_col_substitutable" ):
                listener.exitModify_col_substitutable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_col_substitutable" ):
                return visitor.visitModify_col_substitutable(self)
            else:
                return visitor.visitChildren(self)




    def modify_col_substitutable(self):

        localctx = plsqlParser.Modify_col_substitutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_modify_col_substitutable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            self.match(plsqlParser.COLUMN)
            self.state = 3879
            self.column_name()
            self.state = 3881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3880
                self.match(plsqlParser.NOT)


            self.state = 3883
            self.match(plsqlParser.SUBSTITUTABLE)
            self.state = 3884
            self.match(plsqlParser.AT)
            self.state = 3885
            self.match(plsqlParser.ALL)
            self.state = 3886
            self.match(plsqlParser.LEVELS)
            self.state = 3888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE:
                self.state = 3887
                self.match(plsqlParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_name = None # Column_nameContext
            self.names = list() # of Column_nameContexts

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def UNUSED(self):
            return self.getToken(plsqlParser.UNUSED, 0)

        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASCADE)
            else:
                return self.getToken(plsqlParser.CASCADE, i)

        def CONSTRAINTS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CONSTRAINTS)
            else:
                return self.getToken(plsqlParser.CONSTRAINTS, i)

        def INVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INVALIDATE)
            else:
                return self.getToken(plsqlParser.INVALIDATE, i)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def CHECKPOINT(self):
            return self.getToken(plsqlParser.CHECKPOINT, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_clause" ):
                listener.enterDrop_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_clause" ):
                listener.exitDrop_column_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_column_clause" ):
                return visitor.visitDrop_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def drop_column_clause(self):

        localctx = plsqlParser.Drop_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_drop_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 3952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3890
                self.match(plsqlParser.SET)
                self.state = 3891
                self.match(plsqlParser.UNUSED)
                self.state = 3905
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.COLUMN]:
                    self.state = 3892
                    self.match(plsqlParser.COLUMN)
                    self.state = 3893
                    localctx._column_name = self.column_name()
                    localctx.names.append(localctx._column_name)
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3894
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3899 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3895
                            self.match(plsqlParser.COMMA)


                        self.state = 3898
                        localctx._column_name = self.column_name()
                        localctx.names.append(localctx._column_name)
                        self.state = 3901 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 3903
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                    self.state = 3910
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CASCADE]:
                        self.state = 3907
                        self.match(plsqlParser.CASCADE)
                        self.state = 3908
                        self.match(plsqlParser.CONSTRAINTS)
                        pass
                    elif token in [plsqlParser.INVALIDATE]:
                        self.state = 3909
                        self.match(plsqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3915
                self.match(plsqlParser.DROP)
                self.state = 3929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.COLUMN]:
                    self.state = 3916
                    self.match(plsqlParser.COLUMN)
                    self.state = 3917
                    localctx._column_name = self.column_name()
                    localctx.names.append(localctx._column_name)
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 3918
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3923 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3920
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.COMMA:
                            self.state = 3919
                            self.match(plsqlParser.COMMA)


                        self.state = 3922
                        localctx._column_name = self.column_name()
                        localctx.names.append(localctx._column_name)
                        self.state = 3925 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.COMMA or _la==plsqlParser.REGULAR_ID):
                            break

                    self.state = 3927
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                    self.state = 3934
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.CASCADE]:
                        self.state = 3931
                        self.match(plsqlParser.CASCADE)
                        self.state = 3932
                        self.match(plsqlParser.CONSTRAINTS)
                        pass
                    elif token in [plsqlParser.INVALIDATE]:
                        self.state = 3933
                        self.match(plsqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CHECKPOINT:
                    self.state = 3939
                    self.match(plsqlParser.CHECKPOINT)
                    self.state = 3940
                    self.match(plsqlParser.UNSIGNED_INTEGER)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3943
                self.match(plsqlParser.DROP)
                self.state = 3948
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.UNUSED]:
                    self.state = 3944
                    self.match(plsqlParser.UNUSED)
                    self.state = 3945
                    self.match(plsqlParser.COLUMNS)
                    pass
                elif token in [plsqlParser.COLUMNS]:
                    self.state = 3946
                    self.match(plsqlParser.COLUMNS)
                    self.state = 3947
                    self.match(plsqlParser.CONTINUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3950
                self.match(plsqlParser.CHECKPOINT)
                self.state = 3951
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def old_column_name(self):
            return self.getTypedRuleContext(plsqlParser.Old_column_nameContext,0)


        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def new_column_name(self):
            return self.getTypedRuleContext(plsqlParser.New_column_nameContext,0)


        def COLUMN(self):
            return self.getToken(plsqlParser.COLUMN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rename_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_column_clause" ):
                listener.enterRename_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_column_clause" ):
                listener.exitRename_column_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRename_column_clause" ):
                return visitor.visitRename_column_clause(self)
            else:
                return visitor.visitChildren(self)




    def rename_column_clause(self):

        localctx = plsqlParser.Rename_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_rename_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3954
            self.match(plsqlParser.RENAME)
            self.state = 3956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COLUMN:
                self.state = 3955
                self.match(plsqlParser.COLUMN)


            self.state = 3958
            self.old_column_name()
            self.state = 3959
            self.match(plsqlParser.TO)
            self.state = 3960
            self.new_column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_old_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_column_name" ):
                listener.enterOld_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_column_name" ):
                listener.exitOld_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_column_name" ):
                return visitor.visitOld_column_name(self)
            else:
                return visitor.visitChildren(self)




    def old_column_name(self):

        localctx = plsqlParser.Old_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_old_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3962
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_new_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_column_name" ):
                listener.enterNew_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_column_name" ):
                listener.exitNew_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_column_name" ):
                return visitor.visitNew_column_name(self)
            else:
                return visitor.visitChildren(self)




    def new_column_name(self):

        localctx = plsqlParser.New_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_new_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3964
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_collection_retrievalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def collection_item(self):
            return self.getTypedRuleContext(plsqlParser.Collection_itemContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(plsqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modify_collection_retrieval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_collection_retrieval" ):
                listener.enterModify_collection_retrieval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_collection_retrieval" ):
                listener.exitModify_collection_retrieval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_collection_retrieval" ):
                return visitor.visitModify_collection_retrieval(self)
            else:
                return visitor.visitChildren(self)




    def modify_collection_retrieval(self):

        localctx = plsqlParser.Modify_collection_retrievalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_modify_collection_retrieval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.match(plsqlParser.MODIFY)
            self.state = 3967
            self.match(plsqlParser.NESTED)
            self.state = 3968
            self.match(plsqlParser.TABLE)
            self.state = 3969
            self.collection_item()
            self.state = 3970
            self.match(plsqlParser.RETURN)
            self.state = 3971
            self.match(plsqlParser.AS)
            self.state = 3972
            _la = self._input.LA(1)
            if not(_la==plsqlParser.LOCATOR or _la==plsqlParser.VALUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collection_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_item" ):
                listener.enterCollection_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_item" ):
                listener.exitCollection_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_item" ):
                return visitor.visitCollection_item(self)
            else:
                return visitor.visitChildren(self)




    def collection_item(self):

        localctx = plsqlParser.Collection_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_collection_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3974
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LOB(self):
            return self.getToken(plsqlParser.LOB, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def lob_item(self):
            return self.getTypedRuleContext(plsqlParser.Lob_itemContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def modify_lob_parameters(self):
            return self.getTypedRuleContext(plsqlParser.Modify_lob_parametersContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_lob_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_lob_storage_clause" ):
                listener.enterModify_lob_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_lob_storage_clause" ):
                listener.exitModify_lob_storage_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_lob_storage_clause" ):
                return visitor.visitModify_lob_storage_clause(self)
            else:
                return visitor.visitChildren(self)




    def modify_lob_storage_clause(self):

        localctx = plsqlParser.Modify_lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_modify_lob_storage_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self.match(plsqlParser.MODIFY)
            self.state = 3977
            self.match(plsqlParser.LOB)
            self.state = 3978
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3979
            self.lob_item()
            self.state = 3980
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3981
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3982
            self.modify_lob_parameters()
            self.state = 3983
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def REBUILD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.REBUILD)
            else:
                return self.getToken(plsqlParser.REBUILD, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FREEPOOLS)
            else:
                return self.getToken(plsqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ENCRYPT)
            else:
                return self.getToken(plsqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DECRYPT)
            else:
                return self.getToken(plsqlParser.DECRYPT, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CACHE)
            else:
                return self.getToken(plsqlParser.CACHE, i)

        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Deallocate_unused_clauseContext,i)


        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PCTVERSION)
            else:
                return self.getToken(plsqlParser.PCTVERSION, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCACHE)
            else:
                return self.getToken(plsqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.READS)
            else:
                return self.getToken(plsqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_modify_lob_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_lob_parameters" ):
                listener.enterModify_lob_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_lob_parameters" ):
                listener.exitModify_lob_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_lob_parameters" ):
                return visitor.visitModify_lob_parameters(self)
            else:
                return visitor.visitChildren(self)




    def modify_lob_parameters(self):

        localctx = plsqlParser.Modify_lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_modify_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4009 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                if la_ == 1:
                    self.state = 3985
                    self.storage_clause()
                    pass

                elif la_ == 2:
                    self.state = 3986
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.FREEPOOLS or _la==plsqlParser.PCTVERSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3987
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass

                elif la_ == 3:
                    self.state = 3988
                    self.match(plsqlParser.REBUILD)
                    self.state = 3989
                    self.match(plsqlParser.FREEPOOLS)
                    pass

                elif la_ == 4:
                    self.state = 3990
                    self.lob_retention_clause()
                    pass

                elif la_ == 5:
                    self.state = 3991
                    self.lob_deduplicate_clause()
                    pass

                elif la_ == 6:
                    self.state = 3992
                    self.lob_compression_clause()
                    pass

                elif la_ == 7:
                    self.state = 3993
                    self.match(plsqlParser.ENCRYPT)
                    self.state = 3994
                    self.encryption_spec()
                    pass

                elif la_ == 8:
                    self.state = 3995
                    self.match(plsqlParser.DECRYPT)
                    pass

                elif la_ == 9:
                    self.state = 3996
                    self.match(plsqlParser.CACHE)
                    pass

                elif la_ == 10:
                    self.state = 4001
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                    if la_ == 1:
                        self.state = 3997
                        self.match(plsqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 3998
                        self.match(plsqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 3999
                        self.match(plsqlParser.CACHE)
                        self.state = 4000
                        self.match(plsqlParser.READS)
                        pass


                    self.state = 4004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.FILESYSTEM_LIKE_LOGGING or _la==plsqlParser.LOGGING or _la==plsqlParser.NOLOGGING:
                        self.state = 4003
                        self.logging_clause()


                    pass

                elif la_ == 11:
                    self.state = 4006
                    self.allocate_extent_clause()
                    pass

                elif la_ == 12:
                    self.state = 4007
                    self.shrink_clause()
                    pass

                elif la_ == 13:
                    self.state = 4008
                    self.deallocate_unused_clause()
                    pass


                self.state = 4011 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.ALLOCATE or _la==plsqlParser.CACHE or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (plsqlParser.COMPRESS - 83)) | (1 << (plsqlParser.DEALLOCATE - 83)) | (1 << (plsqlParser.DECRYPT - 83)) | (1 << (plsqlParser.DEDUPLICATE - 83)))) != 0) or _la==plsqlParser.ENCRYPT or _la==plsqlParser.FREEPOOLS or _la==plsqlParser.KEEP_DUPLICATES or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (plsqlParser.NOCACHE - 319)) | (1 << (plsqlParser.NOCOMPRESS - 319)) | (1 << (plsqlParser.PCTVERSION - 319)))) != 0) or ((((_la - 410)) & ~0x3f) == 0 and ((1 << (_la - 410)) & ((1 << (plsqlParser.REBUILD - 410)) | (1 << (plsqlParser.RETENTION - 410)) | (1 << (plsqlParser.SHRINK - 410)))) != 0) or _la==plsqlParser.STORAGE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_function" ):
                return visitor.visitDrop_function(self)
            else:
                return visitor.visitChildren(self)




    def drop_function(self):

        localctx = plsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4013
            self.match(plsqlParser.DROP)
            self.state = 4014
            self.match(plsqlParser.FUNCTION)
            self.state = 4015
            self.function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function" ):
                listener.enterAlter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function" ):
                listener.exitAlter_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_function" ):
                return visitor.visitAlter_function(self)
            else:
                return visitor.visitChildren(self)




    def alter_function(self):

        localctx = plsqlParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4017
            self.match(plsqlParser.ALTER)
            self.state = 4018
            self.match(plsqlParser.FUNCTION)
            self.state = 4019
            self.function_name()
            self.state = 4020
            self.match(plsqlParser.COMPILE)
            self.state = 4022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4021
                self.match(plsqlParser.DEBUG)


            self.state = 4027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,562,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4024
                    self.compiler_parameters_clause() 
                self.state = 4029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,562,self._ctx)

            self.state = 4032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 4030
                self.match(plsqlParser.REUSE)
                self.state = 4031
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(plsqlParser.Implementation_type_nameContext,0)


        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DETERMINISTIC)
            else:
                return self.getToken(plsqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function_body" ):
                listener.enterCreate_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function_body" ):
                listener.exitCreate_function_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_function_body" ):
                return visitor.visitCreate_function_body(self)
            else:
                return visitor.visitChildren(self)




    def create_function_body(self):

        localctx = plsqlParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 4034
                self.match(plsqlParser.CREATE)
                self.state = 4037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 4035
                    self.match(plsqlParser.OR)
                    self.state = 4036
                    self.match(plsqlParser.REPLACE)




            self.state = 4041
            self.match(plsqlParser.FUNCTION)
            self.state = 4042
            self.function_name()
            self.state = 4054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4043
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4044
                self.parameter()
                self.state = 4049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4045
                    self.match(plsqlParser.COMMA)
                    self.state = 4046
                    self.parameter()
                    self.state = 4051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4052
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4056
            self.match(plsqlParser.RETURN)
            self.state = 4057
            self.type_spec()
            self.state = 4064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.AUTHID or _la==plsqlParser.DETERMINISTIC or _la==plsqlParser.PARALLEL_ENABLE or _la==plsqlParser.RESULT_CACHE:
                self.state = 4062
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.AUTHID]:
                    self.state = 4058
                    self.invoker_rights_clause()
                    pass
                elif token in [plsqlParser.PARALLEL_ENABLE]:
                    self.state = 4059
                    self.parallel_enable_clause()
                    pass
                elif token in [plsqlParser.RESULT_CACHE]:
                    self.state = 4060
                    self.result_cache_clause()
                    pass
                elif token in [plsqlParser.DETERMINISTIC]:
                    self.state = 4061
                    self.match(plsqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PIPELINED:
                    self.state = 4067
                    self.match(plsqlParser.PIPELINED)


                self.state = 4070
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
                if la_ == 1:
                    self.state = 4072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.DECLARE:
                        self.state = 4071
                        self.match(plsqlParser.DECLARE)


                    self.state = 4077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                        self.state = 4074
                        self.declare_spec()
                        self.state = 4079
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4080
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 4081
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 4084
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AGGREGATE or _la==plsqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4085
                self.match(plsqlParser.USING)
                self.state = 4086
                self.implementation_type_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parallel_enable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_enable_clause" ):
                listener.enterParallel_enable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_enable_clause" ):
                listener.exitParallel_enable_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_enable_clause" ):
                return visitor.visitParallel_enable_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_enable_clause(self):

        localctx = plsqlParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4089
            self.match(plsqlParser.PARALLEL_ENABLE)
            self.state = 4091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4090
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(plsqlParser.Streaming_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_by_clause" ):
                return visitor.visitPartition_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_by_clause(self):

        localctx = plsqlParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4093
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4094
            self.match(plsqlParser.PARTITION)
            self.state = 4095
            self.expression(0)
            self.state = 4096
            self.match(plsqlParser.BY)
            self.state = 4110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ANY]:
                self.state = 4097
                self.match(plsqlParser.ANY)
                pass
            elif token in [plsqlParser.HASH, plsqlParser.RANGE]:
                self.state = 4098
                _la = self._input.LA(1)
                if not(_la==plsqlParser.HASH or _la==plsqlParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4099
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4100
                self.column_name()
                self.state = 4105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4101
                    self.match(plsqlParser.COMMA)
                    self.state = 4102
                    self.column_name()
                    self.state = 4107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4108
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER:
                self.state = 4112
                self.streaming_clause()


            self.state = 4115
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_cache_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def relies_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Relies_on_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_result_cache_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_cache_clause" ):
                listener.enterResult_cache_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_cache_clause" ):
                listener.exitResult_cache_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_cache_clause" ):
                return visitor.visitResult_cache_clause(self)
            else:
                return visitor.visitChildren(self)




    def result_cache_clause(self):

        localctx = plsqlParser.Result_cache_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_result_cache_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self.match(plsqlParser.RESULT_CACHE)
            self.state = 4119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RELIES_ON:
                self.state = 4118
                self.relies_on_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relies_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_relies_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelies_on_part" ):
                listener.enterRelies_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelies_on_part" ):
                listener.exitRelies_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelies_on_part" ):
                return visitor.visitRelies_on_part(self)
            else:
                return visitor.visitChildren(self)




    def relies_on_part(self):

        localctx = plsqlParser.Relies_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_relies_on_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4121
            self.match(plsqlParser.RELIES_ON)
            self.state = 4122
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4123
            self.tableview_name()
            self.state = 4128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4124
                self.match(plsqlParser.COMMA)
                self.state = 4125
                self.tableview_name()
                self.state = 4130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4131
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_streaming_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStreaming_clause" ):
                listener.enterStreaming_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStreaming_clause" ):
                listener.exitStreaming_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStreaming_clause" ):
                return visitor.visitStreaming_clause(self)
            else:
                return visitor.visitChildren(self)




    def streaming_clause(self):

        localctx = plsqlParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4134
            self.expression(0)
            self.state = 4135
            self.match(plsqlParser.BY)
            self.state = 4136
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4137
            self.column_name()
            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4138
                self.match(plsqlParser.COMMA)
                self.state = 4139
                self.column_name()
                self.state = 4144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4145
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_package" ):
                listener.enterDrop_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_package" ):
                listener.exitDrop_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_package" ):
                return visitor.visitDrop_package(self)
            else:
                return visitor.visitChildren(self)




    def drop_package(self):

        localctx = plsqlParser.Drop_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_drop_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4147
            self.match(plsqlParser.DROP)
            self.state = 4148
            self.match(plsqlParser.PACKAGE)
            self.state = 4150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.state = 4149
                self.match(plsqlParser.BODY)


            self.state = 4152
            self.package_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PACKAGE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PACKAGE)
            else:
                return self.getToken(plsqlParser.PACKAGE, i)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_package" ):
                listener.enterAlter_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_package" ):
                listener.exitAlter_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_package" ):
                return visitor.visitAlter_package(self)
            else:
                return visitor.visitChildren(self)




    def alter_package(self):

        localctx = plsqlParser.Alter_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alter_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.match(plsqlParser.ALTER)
            self.state = 4155
            self.match(plsqlParser.PACKAGE)
            self.state = 4156
            self.package_name()
            self.state = 4157
            self.match(plsqlParser.COMPILE)
            self.state = 4159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.state = 4158
                self.match(plsqlParser.DEBUG)


            self.state = 4162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.state = 4161
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.PACKAGE or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4167
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,585,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4164
                    self.compiler_parameters_clause() 
                self.state = 4169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,585,self._ctx)

            self.state = 4172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 4170
                self.match(plsqlParser.REUSE)
                self.state = 4171
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def package_spec(self):
            return self.getTypedRuleContext(plsqlParser.Package_specContext,0)


        def package_body(self):
            return self.getTypedRuleContext(plsqlParser.Package_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package" ):
                listener.enterCreate_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package" ):
                listener.exitCreate_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_package" ):
                return visitor.visitCreate_package(self)
            else:
                return visitor.visitChildren(self)




    def create_package(self):

        localctx = plsqlParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4174
            self.match(plsqlParser.CREATE)
            self.state = 4177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 4175
                self.match(plsqlParser.OR)
                self.state = 4176
                self.match(plsqlParser.REPLACE)


            self.state = 4179
            self.match(plsqlParser.PACKAGE)
            self.state = 4182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                self.state = 4180
                self.package_spec()

            elif la_ == 2:
                self.state = 4181
                self.package_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_bodyContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_body" ):
                listener.enterPackage_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_body" ):
                listener.exitPackage_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_body" ):
                return visitor.visitPackage_body(self)
            else:
                return visitor.visitChildren(self)




    def package_body(self):

        localctx = plsqlParser.Package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4184
            self.match(plsqlParser.BODY)
            self.state = 4185
            self.package_name()
            self.state = 4186
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                self.state = 4187
                self.package_obj_body()
                self.state = 4192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEGIN]:
                self.state = 4193
                self.match(plsqlParser.BEGIN)
                self.state = 4194
                self.seq_of_statements()
                pass
            elif token in [plsqlParser.END]:
                self.state = 4195
                self.match(plsqlParser.END)
                self.state = 4197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
                if la_ == 1:
                    self.state = 4196
                    self.package_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_spec" ):
                listener.enterPackage_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_spec" ):
                listener.exitPackage_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_spec" ):
                return visitor.visitPackage_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_spec(self):

        localctx = plsqlParser.Package_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_package_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            self.package_name()
            self.state = 4203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4202
                self.invoker_rights_clause()


            self.state = 4205
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                self.state = 4206
                self.package_obj_spec()
                self.state = 4211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4212
            self.match(plsqlParser.END)
            self.state = 4214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.state = 4213
                self.package_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_spec" ):
                listener.enterPackage_obj_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_spec" ):
                listener.exitPackage_obj_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_spec" ):
                return visitor.visitPackage_obj_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_spec(self):

        localctx = plsqlParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_package_obj_spec)
        try:
            self.state = 4225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4216
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4217
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4218
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4219
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4220
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4221
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4222
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4223
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4224
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_spec" ):
                listener.enterProcedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_spec" ):
                listener.exitProcedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_spec" ):
                return visitor.visitProcedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def procedure_spec(self):

        localctx = plsqlParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4227
            self.match(plsqlParser.PROCEDURE)
            self.state = 4228
            self.procedure_name()
            self.state = 4240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4229
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4230
                self.parameter()
                self.state = 4235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4231
                    self.match(plsqlParser.COMMA)
                    self.state = 4232
                    self.parameter()
                    self.state = 4237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4238
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4242
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_spec" ):
                listener.enterFunction_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_spec" ):
                listener.exitFunction_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_spec" ):
                return visitor.visitFunction_spec(self)
            else:
                return visitor.visitChildren(self)




    def function_spec(self):

        localctx = plsqlParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4244
            self.match(plsqlParser.FUNCTION)
            self.state = 4245
            self.function_name()
            self.state = 4257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4246
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4247
                self.parameter()
                self.state = 4252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4248
                    self.match(plsqlParser.COMMA)
                    self.state = 4249
                    self.parameter()
                    self.state = 4254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4255
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4259
            self.match(plsqlParser.RETURN)
            self.state = 4260
            self.type_spec()
            self.state = 4262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DETERMINISTIC:
                self.state = 4261
                self.match(plsqlParser.DETERMINISTIC)


            self.state = 4265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 4264
                self.match(plsqlParser.RESULT_CACHE)


            self.state = 4267
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_body" ):
                listener.enterPackage_obj_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_body" ):
                listener.exitPackage_obj_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_body" ):
                return visitor.visitPackage_obj_body(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_body(self):

        localctx = plsqlParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_package_obj_body)
        try:
            self.state = 4279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4269
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4270
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4271
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4272
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4273
                self.record_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4274
                self.table_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4275
                self.create_procedure_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4276
                self.create_function_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4277
                self.procedure_spec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4278
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = plsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4281
            self.match(plsqlParser.DROP)
            self.state = 4282
            self.match(plsqlParser.PROCEDURE)
            self.state = 4283
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_procedure" ):
                listener.enterAlter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_procedure" ):
                listener.exitAlter_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_procedure" ):
                return visitor.visitAlter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def alter_procedure(self):

        localctx = plsqlParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4285
            self.match(plsqlParser.ALTER)
            self.state = 4286
            self.match(plsqlParser.PROCEDURE)
            self.state = 4287
            self.procedure_name()
            self.state = 4288
            self.match(plsqlParser.COMPILE)
            self.state = 4290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.state = 4289
                self.match(plsqlParser.DEBUG)


            self.state = 4295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,604,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4292
                    self.compiler_parameters_clause() 
                self.state = 4297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,604,self._ctx)

            self.state = 4300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 4298
                self.match(plsqlParser.REUSE)
                self.state = 4299
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure_body" ):
                return visitor.visitCreate_procedure_body(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure_body(self):

        localctx = plsqlParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 4302
                self.match(plsqlParser.CREATE)
                self.state = 4305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 4303
                    self.match(plsqlParser.OR)
                    self.state = 4304
                    self.match(plsqlParser.REPLACE)




            self.state = 4309
            self.match(plsqlParser.PROCEDURE)
            self.state = 4310
            self.procedure_name()
            self.state = 4322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4311
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4312
                self.parameter()
                self.state = 4317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4313
                    self.match(plsqlParser.COMMA)
                    self.state = 4314
                    self.parameter()
                    self.state = 4319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4320
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4324
                self.invoker_rights_clause()


            self.state = 4327
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                self.state = 4329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4328
                    self.match(plsqlParser.DECLARE)


                self.state = 4334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                    self.state = 4331
                    self.declare_spec()
                    self.state = 4336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4337
                self.body()
                pass

            elif la_ == 2:
                self.state = 4338
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 4339
                self.match(plsqlParser.EXTERNAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_trigger" ):
                return visitor.visitDrop_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_trigger(self):

        localctx = plsqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_drop_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4342
            self.match(plsqlParser.DROP)
            self.state = 4343
            self.match(plsqlParser.TRIGGER)
            self.state = 4344
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tn1 = None # Trigger_nameContext
            self.tn2 = None # Trigger_nameContext

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_trigger" ):
                listener.enterAlter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_trigger" ):
                listener.exitAlter_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_trigger" ):
                return visitor.visitAlter_trigger(self)
            else:
                return visitor.visitChildren(self)




    def alter_trigger(self):

        localctx = plsqlParser.Alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_alter_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4346
            self.match(plsqlParser.ALTER)
            self.state = 4347
            self.match(plsqlParser.TRIGGER)
            self.state = 4348
            localctx.tn1 = self.trigger_name()
            self.state = 4367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                self.state = 4349
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.RENAME]:
                self.state = 4350
                self.match(plsqlParser.RENAME)
                self.state = 4351
                self.match(plsqlParser.TO)
                self.state = 4352
                localctx.tn2 = self.trigger_name()
                pass
            elif token in [plsqlParser.COMPILE]:
                self.state = 4353
                self.match(plsqlParser.COMPILE)
                self.state = 4355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
                if la_ == 1:
                    self.state = 4354
                    self.match(plsqlParser.DEBUG)


                self.state = 4360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,615,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4357
                        self.compiler_parameters_clause() 
                    self.state = 4362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,615,self._ctx)

                self.state = 4365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.REUSE:
                    self.state = 4363
                    self.match(plsqlParser.REUSE)
                    self.state = 4364
                    self.match(plsqlParser.SETTINGS)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_trigger" ):
                return visitor.visitCreate_trigger(self)
            else:
                return visitor.visitChildren(self)




    def create_trigger(self):

        localctx = plsqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4369
            self.match(plsqlParser.CREATE)
            self.state = 4372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 4370
                self.match(plsqlParser.OR)
                self.state = 4371
                self.match(plsqlParser.REPLACE)


            self.state = 4374
            self.match(plsqlParser.TRIGGER)
            self.state = 4375
            self.trigger_name()
            self.state = 4379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
            if la_ == 1:
                self.state = 4376
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 4377
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 4378
                self.non_dml_trigger()
                pass


            self.state = 4382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.state = 4381
                self.trigger_follows_clause()


            self.state = 4385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 4384
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 4387
                self.trigger_when_clause()


            self.state = 4390
            self.trigger_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_follows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_follows_clause" ):
                listener.enterTrigger_follows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_follows_clause" ):
                listener.exitTrigger_follows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_follows_clause" ):
                return visitor.visitTrigger_follows_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_follows_clause(self):

        localctx = plsqlParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4392
            self.match(plsqlParser.FOLLOWS)
            self.state = 4393
            self.trigger_name()
            self.state = 4398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4394
                self.match(plsqlParser.COMMA)
                self.state = 4395
                self.trigger_name()
                self.state = 4400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_when_clause" ):
                listener.enterTrigger_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_when_clause" ):
                listener.exitTrigger_when_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_when_clause" ):
                return visitor.visitTrigger_when_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_when_clause(self):

        localctx = plsqlParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4401
            self.match(plsqlParser.WHEN)
            self.state = 4402
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4403
            self.condition()
            self.state = 4404
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(plsqlParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_dml_trigger" ):
                listener.enterSimple_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_dml_trigger" ):
                listener.exitSimple_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_dml_trigger" ):
                return visitor.visitSimple_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def simple_dml_trigger(self):

        localctx = plsqlParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEFORE]:
                self.state = 4406
                self.match(plsqlParser.BEFORE)
                pass
            elif token in [plsqlParser.AFTER]:
                self.state = 4407
                self.match(plsqlParser.AFTER)
                pass
            elif token in [plsqlParser.INSTEAD]:
                self.state = 4408
                self.match(plsqlParser.INSTEAD)
                self.state = 4409
                self.match(plsqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4412
            self.dml_event_clause()
            self.state = 4414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
            if la_ == 1:
                self.state = 4413
                self.referencing_clause()


            self.state = 4417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 4416
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_each_row" ):
                return visitor.visitFor_each_row(self)
            else:
                return visitor.visitChildren(self)




    def for_each_row(self):

        localctx = plsqlParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4419
            self.match(plsqlParser.FOR)
            self.state = 4420
            self.match(plsqlParser.EACH)
            self.state = 4421
            self.match(plsqlParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_dml_trigger" ):
                listener.enterCompound_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_dml_trigger" ):
                listener.exitCompound_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_dml_trigger" ):
                return visitor.visitCompound_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def compound_dml_trigger(self):

        localctx = plsqlParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4423
            self.match(plsqlParser.FOR)
            self.state = 4424
            self.dml_event_clause()
            self.state = 4426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,627,self._ctx)
            if la_ == 1:
                self.state = 4425
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(plsqlParser.Schema_nameContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_trigger" ):
                listener.enterNon_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_trigger" ):
                listener.exitNon_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_trigger" ):
                return visitor.visitNon_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_trigger(self):

        localctx = plsqlParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4428
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4429
            self.non_dml_event()
            self.state = 4434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 4430
                self.match(plsqlParser.OR)
                self.state = 4431
                self.non_dml_event()
                self.state = 4436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4437
            self.match(plsqlParser.ON)
            self.state = 4445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
            if la_ == 1:
                self.state = 4438
                self.match(plsqlParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 4442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
                if la_ == 1:
                    self.state = 4439
                    self.schema_name()
                    self.state = 4440
                    self.match(plsqlParser.PERIOD)


                self.state = 4444
                self.match(plsqlParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_body" ):
                listener.enterTrigger_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_body" ):
                listener.exitTrigger_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_body" ):
                return visitor.visitTrigger_body(self)
            else:
                return visitor.visitChildren(self)




    def trigger_body(self):

        localctx = plsqlParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_trigger_body)
        try:
            self.state = 4452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4447
                self.match(plsqlParser.COMPOUND)
                self.state = 4448
                self.match(plsqlParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4449
                self.match(plsqlParser.CALL)
                self.state = 4450
                self.r_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4451
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_clause" ):
                listener.enterRoutine_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_clause" ):
                listener.exitRoutine_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_clause" ):
                return visitor.visitRoutine_clause(self)
            else:
                return visitor.visitChildren(self)




    def routine_clause(self):

        localctx = plsqlParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4454
            self.routine_name()
            self.state = 4456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4455
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_trigger_block" ):
                listener.enterCompound_trigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_trigger_block" ):
                listener.exitCompound_trigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_trigger_block" ):
                return visitor.visitCompound_trigger_block(self)
            else:
                return visitor.visitChildren(self)




    def compound_trigger_block(self):

        localctx = plsqlParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4458
            self.match(plsqlParser.COMPOUND)
            self.state = 4459
            self.match(plsqlParser.TRIGGER)
            self.state = 4463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,633,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4460
                    self.declare_spec() 
                self.state = 4465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,633,self._ctx)

            self.state = 4467 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4466
                self.timing_point_section()
                self.state = 4469 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                    break

            self.state = 4471
            self.match(plsqlParser.END)
            self.state = 4472
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STATEMENT)
            else:
                return self.getToken(plsqlParser.STATEMENT, i)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BEFORE)
            else:
                return self.getToken(plsqlParser.BEFORE, i)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EACH)
            else:
                return self.getToken(plsqlParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROW)
            else:
                return self.getToken(plsqlParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AFTER)
            else:
                return self.getToken(plsqlParser.AFTER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_timing_point_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTiming_point_section" ):
                listener.enterTiming_point_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTiming_point_section" ):
                listener.exitTiming_point_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTiming_point_section" ):
                return visitor.visitTiming_point_section(self)
            else:
                return visitor.visitChildren(self)




    def timing_point_section(self):

        localctx = plsqlParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_timing_point_section)
        try:
            self.state = 4510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,635,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4474
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 4475
                self.match(plsqlParser.STATEMENT)
                self.state = 4476
                self.match(plsqlParser.IS)
                self.state = 4477
                self.trigger_block()
                self.state = 4478
                self.match(plsqlParser.BEFORE)
                self.state = 4479
                self.match(plsqlParser.STATEMENT)
                self.state = 4480
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4482
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 4483
                self.match(plsqlParser.EACH)
                self.state = 4484
                self.match(plsqlParser.ROW)
                self.state = 4485
                self.match(plsqlParser.IS)
                self.state = 4486
                self.trigger_block()
                self.state = 4487
                self.match(plsqlParser.BEFORE)
                self.state = 4488
                self.match(plsqlParser.EACH)
                self.state = 4489
                self.match(plsqlParser.ROW)
                self.state = 4490
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4492
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 4493
                self.match(plsqlParser.STATEMENT)
                self.state = 4494
                self.match(plsqlParser.IS)
                self.state = 4495
                self.trigger_block()
                self.state = 4496
                self.match(plsqlParser.AFTER)
                self.state = 4497
                self.match(plsqlParser.STATEMENT)
                self.state = 4498
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4500
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 4501
                self.match(plsqlParser.EACH)
                self.state = 4502
                self.match(plsqlParser.ROW)
                self.state = 4503
                self.match(plsqlParser.IS)
                self.state = 4504
                self.trigger_block()
                self.state = 4505
                self.match(plsqlParser.AFTER)
                self.state = 4506
                self.match(plsqlParser.EACH)
                self.state = 4507
                self.match(plsqlParser.ROW)
                self.state = 4508
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(plsqlParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_event" ):
                listener.enterNon_dml_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_event" ):
                listener.exitNon_dml_event(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_event" ):
                return visitor.visitNon_dml_event(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_event(self):

        localctx = plsqlParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_non_dml_event)
        try:
            self.state = 4538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4512
                self.match(plsqlParser.ALTER)
                pass
            elif token in [plsqlParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4513
                self.match(plsqlParser.ANALYZE)
                pass
            elif token in [plsqlParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4514
                self.match(plsqlParser.ASSOCIATE)
                self.state = 4515
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4516
                self.match(plsqlParser.AUDIT)
                pass
            elif token in [plsqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4517
                self.match(plsqlParser.COMMENT)
                pass
            elif token in [plsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4518
                self.match(plsqlParser.CREATE)
                pass
            elif token in [plsqlParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4519
                self.match(plsqlParser.DISASSOCIATE)
                self.state = 4520
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4521
                self.match(plsqlParser.DROP)
                pass
            elif token in [plsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4522
                self.match(plsqlParser.GRANT)
                pass
            elif token in [plsqlParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4523
                self.match(plsqlParser.NOAUDIT)
                pass
            elif token in [plsqlParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4524
                self.match(plsqlParser.RENAME)
                pass
            elif token in [plsqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4525
                self.match(plsqlParser.REVOKE)
                pass
            elif token in [plsqlParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4526
                self.match(plsqlParser.TRUNCATE)
                pass
            elif token in [plsqlParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4527
                self.match(plsqlParser.DDL)
                pass
            elif token in [plsqlParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4528
                self.match(plsqlParser.STARTUP)
                pass
            elif token in [plsqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4529
                self.match(plsqlParser.SHUTDOWN)
                pass
            elif token in [plsqlParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4530
                self.match(plsqlParser.DB_ROLE_CHANGE)
                pass
            elif token in [plsqlParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4531
                self.match(plsqlParser.LOGON)
                pass
            elif token in [plsqlParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4532
                self.match(plsqlParser.LOGOFF)
                pass
            elif token in [plsqlParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4533
                self.match(plsqlParser.SERVERERROR)
                pass
            elif token in [plsqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4534
                self.match(plsqlParser.SUSPEND)
                pass
            elif token in [plsqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4535
                self.match(plsqlParser.DATABASE)
                pass
            elif token in [plsqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4536
                self.match(plsqlParser.SCHEMA)
                pass
            elif token in [plsqlParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4537
                self.match(plsqlParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_clause" ):
                listener.enterDml_event_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_clause" ):
                listener.exitDml_event_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_clause" ):
                return visitor.visitDml_event_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_clause(self):

        localctx = plsqlParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4540
            self.dml_event_element()
            self.state = 4545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 4541
                self.match(plsqlParser.OR)
                self.state = 4542
                self.dml_event_element()
                self.state = 4547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4548
            self.match(plsqlParser.ON)
            self.state = 4550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4549
                self.dml_event_nested_clause()


            self.state = 4552
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_element" ):
                listener.enterDml_event_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_element" ):
                listener.exitDml_event_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_element" ):
                return visitor.visitDml_event_element(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_element(self):

        localctx = plsqlParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4554
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DELETE or _la==plsqlParser.INSERT or _la==plsqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OF:
                self.state = 4555
                self.match(plsqlParser.OF)
                self.state = 4556
                self.column_name()
                self.state = 4561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4557
                    self.match(plsqlParser.COMMA)
                    self.state = 4558
                    self.column_name()
                    self.state = 4563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_nested_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_nested_clause" ):
                listener.enterDml_event_nested_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_nested_clause" ):
                listener.exitDml_event_nested_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_nested_clause" ):
                return visitor.visitDml_event_nested_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_nested_clause(self):

        localctx = plsqlParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4566
            self.match(plsqlParser.NESTED)
            self.state = 4567
            self.match(plsqlParser.TABLE)
            self.state = 4568
            self.tableview_name()
            self.state = 4569
            self.match(plsqlParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_clause" ):
                listener.enterReferencing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_clause" ):
                listener.exitReferencing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_clause" ):
                return visitor.visitReferencing_clause(self)
            else:
                return visitor.visitChildren(self)




    def referencing_clause(self):

        localctx = plsqlParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4571
            self.match(plsqlParser.REFERENCING)
            self.state = 4573 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4572
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 4575 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,641,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_element" ):
                listener.enterReferencing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_element" ):
                listener.exitReferencing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_element" ):
                return visitor.visitReferencing_element(self)
            else:
                return visitor.visitChildren(self)




    def referencing_element(self):

        localctx = plsqlParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4577
            _la = self._input.LA(1)
            if not(((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & ((1 << (plsqlParser.NEW - 315)) | (1 << (plsqlParser.OLD - 315)) | (1 << (plsqlParser.PARENT - 315)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4578
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = plsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4580
            self.match(plsqlParser.DROP)
            self.state = 4581
            self.match(plsqlParser.TYPE)
            self.state = 4583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.state = 4582
                self.match(plsqlParser.BODY)


            self.state = 4585
            self.type_name()
            self.state = 4587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE:
                self.state = 4586
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def compile_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Compile_type_clauseContext,0)


        def replace_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Replace_type_clauseContext,0)


        def alter_method_spec(self):
            return self.getTypedRuleContext(plsqlParser.Alter_method_specContext,0)


        def alter_collection_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Alter_collection_clausesContext,0)


        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def dependent_handling_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_handling_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type" ):
                listener.enterAlter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type" ):
                listener.exitAlter_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_type" ):
                return visitor.visitAlter_type(self)
            else:
                return visitor.visitChildren(self)




    def alter_type(self):

        localctx = plsqlParser.Alter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_alter_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4589
            self.match(plsqlParser.ALTER)
            self.state = 4590
            self.match(plsqlParser.TYPE)
            self.state = 4591
            self.type_name()
            self.state = 4597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPILE]:
                self.state = 4592
                self.compile_type_clause()
                pass
            elif token in [plsqlParser.REPLACE]:
                self.state = 4593
                self.replace_type_clause()
                pass
            elif token in [plsqlParser.ADD, plsqlParser.DROP]:
                self.state = 4594
                self.alter_method_spec()
                pass
            elif token in [plsqlParser.MODIFY]:
                self.state = 4595
                self.alter_collection_clauses()
                pass
            elif token in [plsqlParser.FINAL, plsqlParser.INSTANTIABLE, plsqlParser.NOT, plsqlParser.OVERRIDING]:
                self.state = 4596
                self.modifier_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                self.state = 4599
                self.dependent_handling_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compile_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_compile_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompile_type_clause" ):
                listener.enterCompile_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompile_type_clause" ):
                listener.exitCompile_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompile_type_clause" ):
                return visitor.visitCompile_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def compile_type_clause(self):

        localctx = plsqlParser.Compile_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_compile_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4602
            self.match(plsqlParser.COMPILE)
            self.state = 4604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
            if la_ == 1:
                self.state = 4603
                self.match(plsqlParser.DEBUG)


            self.state = 4607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
            if la_ == 1:
                self.state = 4606
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,648,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4609
                    self.compiler_parameters_clause() 
                self.state = 4614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,648,self._ctx)

            self.state = 4617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 4615
                self.match(plsqlParser.REUSE)
                self.state = 4616
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replace_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_replace_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_type_clause" ):
                listener.enterReplace_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_type_clause" ):
                listener.exitReplace_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplace_type_clause" ):
                return visitor.visitReplace_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def replace_type_clause(self):

        localctx = plsqlParser.Replace_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_replace_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4619
            self.match(plsqlParser.REPLACE)
            self.state = 4621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4620
                self.invoker_rights_clause()


            self.state = 4623
            self.match(plsqlParser.AS)
            self.state = 4624
            self.match(plsqlParser.OBJECT)
            self.state = 4625
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4626
            self.object_member_spec()
            self.state = 4631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4627
                self.match(plsqlParser.COMMA)
                self.state = 4628
                self.object_member_spec()
                self.state = 4633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4634
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_method_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_method_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Alter_method_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Alter_method_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_spec" ):
                listener.enterAlter_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_spec" ):
                listener.exitAlter_method_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_spec" ):
                return visitor.visitAlter_method_spec(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_spec(self):

        localctx = plsqlParser.Alter_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_alter_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4636
            self.alter_method_element()
            self.state = 4641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4637
                self.match(plsqlParser.COMMA)
                self.state = 4638
                self.alter_method_element()
                self.state = 4643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_method_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_element" ):
                listener.enterAlter_method_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_element" ):
                listener.exitAlter_method_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_element" ):
                return visitor.visitAlter_method_element(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_element(self):

        localctx = plsqlParser.Alter_method_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_alter_method_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4644
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.state = 4645
                self.map_order_function_spec()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.state = 4646
                self.subprogram_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Attribute_definitionContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_attribute_definition" ):
                listener.enterAlter_attribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_attribute_definition" ):
                listener.exitAlter_attribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_attribute_definition" ):
                return visitor.visitAlter_attribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def alter_attribute_definition(self):

        localctx = plsqlParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4649
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP or _la==plsqlParser.MODIFY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4650
            self.match(plsqlParser.ATTRIBUTE)
            self.state = 4663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 4651
                self.attribute_definition()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 4652
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4653
                self.attribute_definition()
                self.state = 4658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4654
                    self.match(plsqlParser.COMMA)
                    self.state = 4655
                    self.attribute_definition()
                    self.state = 4660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4661
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(plsqlParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = plsqlParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4665
            self.attribute_name()
            self.state = 4667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4666
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_collection_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_collection_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_collection_clauses" ):
                listener.enterAlter_collection_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_collection_clauses" ):
                listener.exitAlter_collection_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_collection_clauses" ):
                return visitor.visitAlter_collection_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_collection_clauses(self):

        localctx = plsqlParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4669
            self.match(plsqlParser.MODIFY)
            self.state = 4675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LIMIT]:
                self.state = 4670
                self.match(plsqlParser.LIMIT)
                self.state = 4671
                self.expression(0)
                pass
            elif token in [plsqlParser.ELEMENT]:
                self.state = 4672
                self.match(plsqlParser.ELEMENT)
                self.state = 4673
                self.match(plsqlParser.TYPE)
                self.state = 4674
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_handling_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_handling_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_handling_clause" ):
                listener.enterDependent_handling_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_handling_clause" ):
                listener.exitDependent_handling_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_handling_clause" ):
                return visitor.visitDependent_handling_clause(self)
            else:
                return visitor.visitChildren(self)




    def dependent_handling_clause(self):

        localctx = plsqlParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 4693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INVALIDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4677
                self.match(plsqlParser.INVALIDATE)
                pass
            elif token in [plsqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4678
                self.match(plsqlParser.CASCADE)
                self.state = 4688
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.CONVERT]:
                    self.state = 4679
                    self.match(plsqlParser.CONVERT)
                    self.state = 4680
                    self.match(plsqlParser.TO)
                    self.state = 4681
                    self.match(plsqlParser.SUBSTITUTABLE)
                    pass
                elif token in [plsqlParser.INCLUDING, plsqlParser.NOT]:
                    self.state = 4683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NOT:
                        self.state = 4682
                        self.match(plsqlParser.NOT)


                    self.state = 4685
                    self.match(plsqlParser.INCLUDING)
                    self.state = 4686
                    self.match(plsqlParser.TABLE)
                    self.state = 4687
                    self.match(plsqlParser.DATA)
                    pass
                elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXCEPTIONS, plsqlParser.EXPLAIN, plsqlParser.FORCE, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.REFRESH, plsqlParser.REVOKE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 4691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXCEPTIONS or _la==plsqlParser.FORCE:
                    self.state = 4690
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_exceptions_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_exceptions_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_exceptions_part" ):
                listener.enterDependent_exceptions_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_exceptions_part" ):
                listener.exitDependent_exceptions_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_exceptions_part" ):
                return visitor.visitDependent_exceptions_part(self)
            else:
                return visitor.visitChildren(self)




    def dependent_exceptions_part(self):

        localctx = plsqlParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE:
                self.state = 4695
                self.match(plsqlParser.FORCE)


            self.state = 4698
            self.match(plsqlParser.EXCEPTIONS)
            self.state = 4699
            self.match(plsqlParser.INTO)
            self.state = 4700
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(plsqlParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(plsqlParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = plsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4702
            self.match(plsqlParser.CREATE)
            self.state = 4705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 4703
                self.match(plsqlParser.OR)
                self.state = 4704
                self.match(plsqlParser.REPLACE)


            self.state = 4707
            self.match(plsqlParser.TYPE)
            self.state = 4710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.state = 4708
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 4709
                self.type_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = plsqlParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4712
            self.type_name()
            self.state = 4715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OID:
                self.state = 4713
                self.match(plsqlParser.OID)
                self.state = 4714
                self.match(plsqlParser.CHAR_STRING)


            self.state = 4718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.AUTHID or _la==plsqlParser.IS or _la==plsqlParser.UNDER:
                self.state = 4717
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_typeContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_def" ):
                return visitor.visitObject_type_def(self)
            else:
                return visitor.visitChildren(self)




    def object_type_def(self):

        localctx = plsqlParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 4720
                self.invoker_rights_clause()


            self.state = 4725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 4723
                self.object_as_part()
                pass
            elif token in [plsqlParser.UNDER]:
                self.state = 4724
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXTERNAL:
                self.state = 4727
                self.sqlj_object_type()


            self.state = 4741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
            if la_ == 1:
                self.state = 4730
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4731
                self.object_member_spec()
                self.state = 4736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4732
                    self.match(plsqlParser.COMMA)
                    self.state = 4733
                    self.object_member_spec()
                    self.state = 4738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4739
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.NOT or _la==plsqlParser.OVERRIDING:
                self.state = 4743
                self.modifier_clause()
                self.state = 4748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_as_part" ):
                return visitor.visitObject_as_part(self)
            else:
                return visitor.visitChildren(self)




    def object_as_part(self):

        localctx = plsqlParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4749
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.OBJECT]:
                self.state = 4750
                self.match(plsqlParser.OBJECT)
                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 4751
                self.varray_type_def()
                pass
            elif token in [plsqlParser.TABLE]:
                self.state = 4752
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_under_part" ):
                return visitor.visitObject_under_part(self)
            else:
                return visitor.visitChildren(self)




    def object_under_part(self):

        localctx = plsqlParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4755
            self.match(plsqlParser.UNDER)
            self.state = 4756
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_type_def" ):
                return visitor.visitNested_table_type_def(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_type_def(self):

        localctx = plsqlParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4758
            self.match(plsqlParser.TABLE)
            self.state = 4759
            self.match(plsqlParser.OF)
            self.state = 4760
            self.type_spec()
            self.state = 4763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
            if la_ == 1:
                self.state = 4761
                self.match(plsqlParser.NOT)
                self.state = 4762
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type" ):
                return visitor.visitSqlj_object_type(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type(self):

        localctx = plsqlParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4765
            self.match(plsqlParser.EXTERNAL)
            self.state = 4766
            self.match(plsqlParser.NAME)
            self.state = 4767
            self.expression(0)
            self.state = 4768
            self.match(plsqlParser.LANGUAGE)
            self.state = 4769
            self.match(plsqlParser.JAVA)
            self.state = 4770
            self.match(plsqlParser.USING)
            self.state = 4771
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUSTOMDATUM or _la==plsqlParser.ORADATA or _la==plsqlParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body" ):
                return visitor.visitType_body(self)
            else:
                return visitor.visitChildren(self)




    def type_body(self):

        localctx = plsqlParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4773
            self.match(plsqlParser.BODY)
            self.state = 4774
            self.type_name()
            self.state = 4775
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4777 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4776
                self.type_body_elements()
                self.state = 4779 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.MAP or _la==plsqlParser.MEMBER or _la==plsqlParser.ORDER or _la==plsqlParser.STATIC):
                    break

            self.state = 4781
            self.match(plsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body_elements" ):
                return visitor.visitType_body_elements(self)
            else:
                return visitor.visitChildren(self)




    def type_body_elements(self):

        localctx = plsqlParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_type_body_elements)
        try:
            self.state = 4785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4783
                self.map_order_func_declaration()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4784
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_func_declaration" ):
                return visitor.visitMap_order_func_declaration(self)
            else:
                return visitor.visitChildren(self)




    def map_order_func_declaration(self):

        localctx = plsqlParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4788
            self.match(plsqlParser.MEMBER)
            self.state = 4789
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_decl_in_type" ):
                return visitor.visitSubprog_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def subprog_decl_in_type(self):

        localctx = plsqlParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4791
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 4792
                self.proc_decl_in_type()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 4793
                self.func_decl_in_type()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.state = 4794
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_in_type" ):
                return visitor.visitProc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_in_type(self):

        localctx = plsqlParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4797
            self.match(plsqlParser.PROCEDURE)
            self.state = 4798
            self.procedure_name()
            self.state = 4799
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4800
            self.type_elements_parameter()
            self.state = 4805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4801
                self.match(plsqlParser.COMMA)
                self.state = 4802
                self.type_elements_parameter()
                self.state = 4807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4808
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4809
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,681,self._ctx)
            if la_ == 1:
                self.state = 4810
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4811
                    self.match(plsqlParser.DECLARE)


                self.state = 4817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                    self.state = 4814
                    self.declare_spec()
                    self.state = 4819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4820
                self.body()
                self.state = 4821
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl_in_type" ):
                return visitor.visitFunc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def func_decl_in_type(self):

        localctx = plsqlParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4825
            self.match(plsqlParser.FUNCTION)
            self.state = 4826
            self.function_name()
            self.state = 4838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4827
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4828
                self.type_elements_parameter()
                self.state = 4833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4829
                    self.match(plsqlParser.COMMA)
                    self.state = 4830
                    self.type_elements_parameter()
                    self.state = 4835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4836
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4840
            self.match(plsqlParser.RETURN)
            self.state = 4841
            self.type_spec()
            self.state = 4842
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 4843
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4844
                    self.match(plsqlParser.DECLARE)


                self.state = 4850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                    self.state = 4847
                    self.declare_spec()
                    self.state = 4852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4853
                self.body()
                self.state = 4854
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = plsqlParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 4858
                self.match(plsqlParser.FINAL)


            self.state = 4862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 4861
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 4864
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 4865
            self.match(plsqlParser.FUNCTION)
            self.state = 4866
            self.type_spec()
            self.state = 4884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4867
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 4868
                self.match(plsqlParser.SELF)
                self.state = 4869
                self.match(plsqlParser.IN)
                self.state = 4870
                self.match(plsqlParser.OUT)
                self.state = 4871
                self.type_spec()
                self.state = 4872
                self.match(plsqlParser.COMMA)
                self.state = 4874
                self.type_elements_parameter()
                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4875
                    self.match(plsqlParser.COMMA)
                    self.state = 4876
                    self.type_elements_parameter()
                    self.state = 4881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4882
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4886
            self.match(plsqlParser.RETURN)
            self.state = 4887
            self.match(plsqlParser.SELF)
            self.state = 4888
            self.match(plsqlParser.AS)
            self.state = 4889
            self.match(plsqlParser.RESULT)
            self.state = 4890
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
            if la_ == 1:
                self.state = 4891
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 4893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 4892
                    self.match(plsqlParser.DECLARE)


                self.state = 4898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                    self.state = 4895
                    self.declare_spec()
                    self.state = 4900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4901
                self.body()
                self.state = 4902
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_clause" ):
                return visitor.visitModifier_clause(self)
            else:
                return visitor.visitChildren(self)




    def modifier_clause(self):

        localctx = plsqlParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 4906
                self.match(plsqlParser.NOT)


            self.state = 4909
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(plsqlParser.Element_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_member_spec" ):
                return visitor.visitObject_member_spec(self)
            else:
                return visitor.visitChildren(self)




    def object_member_spec(self):

        localctx = plsqlParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 4917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4911
                self.r_id()
                self.state = 4912
                self.type_spec()
                self.state = 4914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXTERNAL:
                    self.state = 4913
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4916
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type_attr" ):
                return visitor.visitSqlj_object_type_attr(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type_attr(self):

        localctx = plsqlParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4919
            self.match(plsqlParser.EXTERNAL)
            self.state = 4920
            self.match(plsqlParser.NAME)
            self.state = 4921
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Element_spec_optionsContext,i)


        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def pragma_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec" ):
                return visitor.visitElement_spec(self)
            else:
                return visitor.visitChildren(self)




    def element_spec(self):

        localctx = plsqlParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
            if la_ == 1:
                self.state = 4923
                self.modifier_clause()


            self.state = 4927 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4926
                self.element_spec_options()
                self.state = 4929 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CONSTRUCTOR or _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.MAP or _la==plsqlParser.MEMBER or _la==plsqlParser.ORDER or _la==plsqlParser.STATIC):
                    break

            self.state = 4933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
            if la_ == 1:
                self.state = 4931
                self.match(plsqlParser.COMMA)
                self.state = 4932
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec_options" ):
                return visitor.visitElement_spec_options(self)
            else:
                return visitor.visitChildren(self)




    def element_spec_options(self):

        localctx = plsqlParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_element_spec_options)
        try:
            self.state = 4938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4935
                self.subprogram_spec()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4936
                self.constructor_spec()
                pass
            elif token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4937
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprogram_spec" ):
                return visitor.visitSubprogram_spec(self)
            else:
                return visitor.visitChildren(self)




    def subprogram_spec(self):

        localctx = plsqlParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4940
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 4941
                self.type_procedure_spec()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 4942
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_procedure_spec" ):
                return visitor.visitType_procedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_procedure_spec(self):

        localctx = plsqlParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4945
            self.match(plsqlParser.PROCEDURE)
            self.state = 4946
            self.procedure_name()
            self.state = 4947
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4948
            self.type_elements_parameter()
            self.state = 4953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4949
                self.match(plsqlParser.COMMA)
                self.state = 4950
                self.type_elements_parameter()
                self.state = 4955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4956
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 4957
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4958
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_function_spec" ):
                return visitor.visitType_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_function_spec(self):

        localctx = plsqlParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4961
            self.match(plsqlParser.FUNCTION)
            self.state = 4962
            self.function_name()
            self.state = 4974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 4963
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4964
                self.type_elements_parameter()
                self.state = 4969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4965
                    self.match(plsqlParser.COMMA)
                    self.state = 4966
                    self.type_elements_parameter()
                    self.state = 4971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4972
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 4976
            self.match(plsqlParser.RETURN)
            self.state = 4981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                self.state = 4977
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 4978
                self.match(plsqlParser.SELF)
                self.state = 4979
                self.match(plsqlParser.AS)
                self.state = 4980
                self.match(plsqlParser.RESULT)
                pass


            self.state = 4991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 4983
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4984
                self.call_spec()
                pass
            elif token in [plsqlParser.EXTERNAL]:
                self.state = 4985
                self.match(plsqlParser.EXTERNAL)
                self.state = 4987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VARIABLE:
                    self.state = 4986
                    self.match(plsqlParser.VARIABLE)


                self.state = 4989
                self.match(plsqlParser.NAME)
                self.state = 4990
                self.expression(0)
                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CASCADE, plsqlParser.CONSTRUCTOR, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FINAL, plsqlParser.FUNCTION, plsqlParser.GRANT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INVALIDATE, plsqlParser.LOCK, plsqlParser.MAP, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.ORDER, plsqlParser.PROCEDURE, plsqlParser.REFRESH, plsqlParser.REVOKE, plsqlParser.SELECT, plsqlParser.STATIC, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_spec" ):
                return visitor.visitConstructor_spec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_spec(self):

        localctx = plsqlParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 4993
                self.match(plsqlParser.FINAL)


            self.state = 4997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 4996
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 4999
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 5000
            self.match(plsqlParser.FUNCTION)
            self.state = 5001
            self.type_spec()
            self.state = 5019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5002
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 5003
                self.match(plsqlParser.SELF)
                self.state = 5004
                self.match(plsqlParser.IN)
                self.state = 5005
                self.match(plsqlParser.OUT)
                self.state = 5006
                self.type_spec()
                self.state = 5007
                self.match(plsqlParser.COMMA)
                self.state = 5009
                self.type_elements_parameter()
                self.state = 5014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5010
                    self.match(plsqlParser.COMMA)
                    self.state = 5011
                    self.type_elements_parameter()
                    self.state = 5016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5017
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 5021
            self.match(plsqlParser.RETURN)
            self.state = 5022
            self.match(plsqlParser.SELF)
            self.state = 5023
            self.match(plsqlParser.AS)
            self.state = 5024
            self.match(plsqlParser.RESULT)
            self.state = 5027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 5025
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5026
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_function_spec" ):
                return visitor.visitMap_order_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def map_order_function_spec(self):

        localctx = plsqlParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5029
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5030
            self.match(plsqlParser.MEMBER)
            self.state = 5031
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pragma_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_clause" ):
                return visitor.visitPragma_clause(self)
            else:
                return visitor.visitChildren(self)




    def pragma_clause(self):

        localctx = plsqlParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5033
            self.match(plsqlParser.PRAGMA)
            self.state = 5034
            self.match(plsqlParser.RESTRICT_REFERENCES)
            self.state = 5035
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5036
            self.pragma_elements()
            self.state = 5041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5037
                self.match(plsqlParser.COMMA)
                self.state = 5038
                self.pragma_elements()
                self.state = 5043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5044
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_elements" ):
                return visitor.visitPragma_elements(self)
            else:
                return visitor.visitChildren(self)




    def pragma_elements(self):

        localctx = plsqlParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_pragma_elements)
        try:
            self.state = 5048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5046
                self.r_id()
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5047
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_elements_parameter" ):
                return visitor.visitType_elements_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_elements_parameter(self):

        localctx = plsqlParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5050
            self.parameter_name()
            self.state = 5051
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_sequence" ):
                return visitor.visitDrop_sequence(self)
            else:
                return visitor.visitChildren(self)




    def drop_sequence(self):

        localctx = plsqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_drop_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5053
            self.match(plsqlParser.DROP)
            self.state = 5054
            self.match(plsqlParser.SEQUENCE)
            self.state = 5055
            self.sequence_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_sequence" ):
                return visitor.visitAlter_sequence(self)
            else:
                return visitor.visitChildren(self)




    def alter_sequence(self):

        localctx = plsqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5057
            self.match(plsqlParser.ALTER)
            self.state = 5058
            self.match(plsqlParser.SEQUENCE)
            self.state = 5059
            self.sequence_name()
            self.state = 5061 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5060
                self.sequence_spec()
                self.state = 5063 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or _la==plsqlParser.INCREMENT or ((((_la - 288)) & ~0x3f) == 0 and ((1 << (_la - 288)) & ((1 << (plsqlParser.MAXVALUE - 288)) | (1 << (plsqlParser.MINVALUE - 288)) | (1 << (plsqlParser.NOCACHE - 288)) | (1 << (plsqlParser.NOCYCLE - 288)) | (1 << (plsqlParser.NOMAXVALUE - 288)) | (1 << (plsqlParser.NOMINVALUE - 288)) | (1 << (plsqlParser.NOORDER - 288)))) != 0) or _la==plsqlParser.ORDER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_sequence" ):
                return visitor.visitCreate_sequence(self)
            else:
                return visitor.visitChildren(self)




    def create_sequence(self):

        localctx = plsqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5065
            self.match(plsqlParser.CREATE)
            self.state = 5066
            self.match(plsqlParser.SEQUENCE)
            self.state = 5067
            self.sequence_name()
            self.state = 5072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or _la==plsqlParser.INCREMENT or ((((_la - 288)) & ~0x3f) == 0 and ((1 << (_la - 288)) & ((1 << (plsqlParser.MAXVALUE - 288)) | (1 << (plsqlParser.MINVALUE - 288)) | (1 << (plsqlParser.NOCACHE - 288)) | (1 << (plsqlParser.NOCYCLE - 288)) | (1 << (plsqlParser.NOMAXVALUE - 288)) | (1 << (plsqlParser.NOMINVALUE - 288)) | (1 << (plsqlParser.NOORDER - 288)))) != 0) or _la==plsqlParser.ORDER or _la==plsqlParser.START:
                self.state = 5070
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.START]:
                    self.state = 5068
                    self.sequence_start_clause()
                    pass
                elif token in [plsqlParser.CACHE, plsqlParser.CYCLE, plsqlParser.INCREMENT, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NOCACHE, plsqlParser.NOCYCLE, plsqlParser.NOMAXVALUE, plsqlParser.NOMINVALUE, plsqlParser.NOORDER, plsqlParser.ORDER]:
                    self.state = 5069
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5074
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(plsqlParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(plsqlParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(plsqlParser.NOORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_spec" ):
                return visitor.visitSequence_spec(self)
            else:
                return visitor.visitChildren(self)




    def sequence_spec(self):

        localctx = plsqlParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_sequence_spec)
        try:
            self.state = 5091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5075
                self.match(plsqlParser.INCREMENT)
                self.state = 5076
                self.match(plsqlParser.BY)
                self.state = 5077
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5078
                self.match(plsqlParser.MAXVALUE)
                self.state = 5079
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5080
                self.match(plsqlParser.NOMAXVALUE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5081
                self.match(plsqlParser.MINVALUE)
                self.state = 5082
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5083
                self.match(plsqlParser.NOMINVALUE)
                pass
            elif token in [plsqlParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5084
                self.match(plsqlParser.CYCLE)
                pass
            elif token in [plsqlParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5085
                self.match(plsqlParser.NOCYCLE)
                pass
            elif token in [plsqlParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5086
                self.match(plsqlParser.CACHE)
                self.state = 5087
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5088
                self.match(plsqlParser.NOCACHE)
                pass
            elif token in [plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5089
                self.match(plsqlParser.ORDER)
                pass
            elif token in [plsqlParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5090
                self.match(plsqlParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_start_clause" ):
                return visitor.visitSequence_start_clause(self)
            else:
                return visitor.visitChildren(self)




    def sequence_start_clause(self):

        localctx = plsqlParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5093
            self.match(plsqlParser.START)
            self.state = 5094
            self.match(plsqlParser.WITH)
            self.state = 5095
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoker_rights_clause" ):
                return visitor.visitInvoker_rights_clause(self)
            else:
                return visitor.visitChildren(self)




    def invoker_rights_clause(self):

        localctx = plsqlParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5097
            self.match(plsqlParser.AUTHID)
            self.state = 5098
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CURRENT_USER or _la==plsqlParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_parameters_clause" ):
                return visitor.visitCompiler_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def compiler_parameters_clause(self):

        localctx = plsqlParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5100
            self.r_id()
            self.state = 5101
            self.match(plsqlParser.EQUALS_OP)
            self.state = 5102
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(plsqlParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(plsqlParser.C_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_spec" ):
                return visitor.visitCall_spec(self)
            else:
                return visitor.visitChildren(self)




    def call_spec(self):

        localctx = plsqlParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5104
            self.match(plsqlParser.LANGUAGE)
            self.state = 5107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.JAVA]:
                self.state = 5105
                self.java_spec()
                pass
            elif token in [plsqlParser.C_LETTER]:
                self.state = 5106
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJava_spec" ):
                return visitor.visitJava_spec(self)
            else:
                return visitor.visitChildren(self)




    def java_spec(self):

        localctx = plsqlParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5109
            self.match(plsqlParser.JAVA)
            self.state = 5110
            self.match(plsqlParser.NAME)
            self.state = 5111
            self.match(plsqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_spec" ):
                return visitor.visitC_spec(self)
            else:
                return visitor.visitChildren(self)




    def c_spec(self):

        localctx = plsqlParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5113
            self.match(plsqlParser.C_LETTER)
            self.state = 5116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 5114
                self.match(plsqlParser.NAME)
                self.state = 5115
                self.match(plsqlParser.CHAR_STRING)


            self.state = 5118
            self.match(plsqlParser.LIBRARY)
            self.state = 5119
            self.r_id()
            self.state = 5121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 5120
                self.c_agent_in_clause()


            self.state = 5125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.state = 5123
                self.match(plsqlParser.WITH)
                self.state = 5124
                self.match(plsqlParser.CONTEXT)


            self.state = 5128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
            if la_ == 1:
                self.state = 5127
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_agent_in_clause" ):
                return visitor.visitC_agent_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_agent_in_clause(self):

        localctx = plsqlParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5130
            self.match(plsqlParser.AGENT)
            self.state = 5131
            self.match(plsqlParser.IN)
            self.state = 5132
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5133
            self.expression(0)
            self.state = 5138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5134
                self.match(plsqlParser.COMMA)
                self.state = 5135
                self.expression(0)
                self.state = 5140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5141
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_parameters_clause" ):
                return visitor.visitC_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_parameters_clause(self):

        localctx = plsqlParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5143
            self.match(plsqlParser.PARAMETERS)
            self.state = 5144
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 5145
                self.expression(0)
                self.state = 5150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5146
                    self.match(plsqlParser.COMMA)
                    self.state = 5147
                    self.expression(0)
                    self.state = 5152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.PERIOD]:
                self.state = 5153
                self.match(plsqlParser.PERIOD)
                self.state = 5154
                self.match(plsqlParser.PERIOD)
                self.state = 5155
                self.match(plsqlParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5158
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OUT)
            else:
                return self.getToken(plsqlParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INOUT)
            else:
                return self.getToken(plsqlParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCOPY)
            else:
                return self.getToken(plsqlParser.NOCOPY, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = plsqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5160
            self.parameter_name()
            self.state = 5164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,728,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5161
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.IN or _la==plsqlParser.INOUT or _la==plsqlParser.NOCOPY or _la==plsqlParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 5166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,728,self._ctx)

            self.state = 5168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5167
                self.type_spec()


            self.state = 5171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 5170
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value_part" ):
                return visitor.visitDefault_value_part(self)
            else:
                return visitor.visitChildren(self)




    def default_value_part(self):

        localctx = plsqlParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5173
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5174
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_spec" ):
                return visitor.visitDeclare_spec(self)
            else:
                return visitor.visitChildren(self)




    def declare_spec(self):

        localctx = plsqlParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_declare_spec)
        try:
            self.state = 5185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,731,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5176
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5177
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5178
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5179
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5180
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5181
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5182
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5183
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5184
                self.create_function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = plsqlParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5187
            self.variable_name()
            self.state = 5189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,732,self._ctx)
            if la_ == 1:
                self.state = 5188
                self.match(plsqlParser.CONSTANT)


            self.state = 5191
            self.type_spec()
            self.state = 5194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 5192
                self.match(plsqlParser.NOT)
                self.state = 5193
                self.match(plsqlParser.NULL)


            self.state = 5197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 5196
                self.default_value_part()


            self.state = 5199
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_declaration" ):
                return visitor.visitSubtype_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subtype_declaration(self):

        localctx = plsqlParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5201
            self.match(plsqlParser.SUBTYPE)
            self.state = 5202
            self.type_name()
            self.state = 5203
            self.match(plsqlParser.IS)
            self.state = 5204
            self.type_spec()
            self.state = 5210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RANGE:
                self.state = 5205
                self.match(plsqlParser.RANGE)
                self.state = 5206
                self.expression(0)
                self.state = 5207
                self.match(plsqlParser.T__0)
                self.state = 5208
                self.expression(0)


            self.state = 5214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 5212
                self.match(plsqlParser.NOT)
                self.state = 5213
                self.match(plsqlParser.NULL)


            self.state = 5216
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parameter_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_declaration" ):
                return visitor.visitCursor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def cursor_declaration(self):

        localctx = plsqlParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5218
            self.match(plsqlParser.CURSOR)
            self.state = 5219
            self.cursor_name()
            self.state = 5231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5220
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5221
                self.parameter_spec()
                self.state = 5226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5222
                    self.match(plsqlParser.COMMA)
                    self.state = 5223
                    self.parameter_spec()
                    self.state = 5228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5229
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 5235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 5233
                self.match(plsqlParser.RETURN)
                self.state = 5234
                self.type_spec()


            self.state = 5239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IS:
                self.state = 5237
                self.match(plsqlParser.IS)
                self.state = 5238
                self.select_statement()


            self.state = 5241
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_spec" ):
                return visitor.visitParameter_spec(self)
            else:
                return visitor.visitChildren(self)




    def parameter_spec(self):

        localctx = plsqlParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5243
            self.parameter_name()
            self.state = 5248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.IN - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IN:
                    self.state = 5244
                    self.match(plsqlParser.IN)


                self.state = 5247
                self.type_spec()


            self.state = 5251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 5250
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_declaration" ):
                return visitor.visitException_declaration(self)
            else:
                return visitor.visitChildren(self)




    def exception_declaration(self):

        localctx = plsqlParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5253
            self.exception_name()
            self.state = 5254
            self.match(plsqlParser.EXCEPTION)
            self.state = 5255
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # R_idContext

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def numeric_negative(self):
            return self.getTypedRuleContext(plsqlParser.Numeric_negativeContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.R_idContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_declaration" ):
                return visitor.visitPragma_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pragma_declaration(self):

        localctx = plsqlParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5257
            self.match(plsqlParser.PRAGMA)
            self.state = 5288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SERIALLY_REUSABLE]:
                self.state = 5258
                self.match(plsqlParser.SERIALLY_REUSABLE)
                pass
            elif token in [plsqlParser.AUTONOMOUS_TRANSACTION]:
                self.state = 5259
                self.match(plsqlParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [plsqlParser.EXCEPTION_INIT]:
                self.state = 5260
                self.match(plsqlParser.EXCEPTION_INIT)
                self.state = 5261
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5262
                self.exception_name()
                self.state = 5263
                self.match(plsqlParser.COMMA)
                self.state = 5264
                self.numeric_negative()
                self.state = 5265
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.INLINE]:
                self.state = 5267
                self.match(plsqlParser.INLINE)
                self.state = 5268
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5269
                localctx.id1 = self.r_id()
                self.state = 5270
                self.match(plsqlParser.COMMA)
                self.state = 5271
                self.expression(0)
                self.state = 5272
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.RESTRICT_REFERENCES]:
                self.state = 5274
                self.match(plsqlParser.RESTRICT_REFERENCES)
                self.state = 5275
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5278
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 5276
                    self.r_id()
                    pass
                elif token in [plsqlParser.DEFAULT]:
                    self.state = 5277
                    self.match(plsqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5282 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5280
                    self.match(plsqlParser.COMMA)
                    self.state = 5281
                    self.r_id()
                    self.state = 5284 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMMA):
                        break

                self.state = 5286
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5290
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_type_decContext,0)


        def record_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_declaration" ):
                listener.enterRecord_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_declaration" ):
                listener.exitRecord_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = plsqlParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_record_declaration)
        try:
            self.state = 5294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5292
                self.record_type_dec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5293
                self.record_var_dec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Field_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Field_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_dec" ):
                listener.enterRecord_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_dec" ):
                listener.exitRecord_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_type_dec" ):
                return visitor.visitRecord_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_type_dec(self):

        localctx = plsqlParser.Record_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_record_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5296
            self.match(plsqlParser.TYPE)
            self.state = 5297
            self.type_name()
            self.state = 5298
            self.match(plsqlParser.IS)
            self.state = 5317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.RECORD]:
                self.state = 5299
                self.match(plsqlParser.RECORD)
                self.state = 5300
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5301
                self.field_spec()
                self.state = 5306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5302
                    self.match(plsqlParser.COMMA)
                    self.state = 5303
                    self.field_spec()
                    self.state = 5308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5309
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.REF]:
                self.state = 5311
                self.match(plsqlParser.REF)
                self.state = 5312
                self.match(plsqlParser.CURSOR)
                self.state = 5315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN:
                    self.state = 5313
                    self.match(plsqlParser.RETURN)
                    self.state = 5314
                    self.type_spec()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 5319
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_spec" ):
                return visitor.visitField_spec(self)
            else:
                return visitor.visitChildren(self)




    def field_spec(self):

        localctx = plsqlParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5321
            self.column_name()
            self.state = 5323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5322
                self.type_spec()


            self.state = 5327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 5325
                self.match(plsqlParser.NOT)
                self.state = 5326
                self.match(plsqlParser.NULL)


            self.state = 5330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 5329
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_record_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_var_dec" ):
                listener.enterRecord_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_var_dec" ):
                listener.exitRecord_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_var_dec" ):
                return visitor.visitRecord_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_var_dec(self):

        localctx = plsqlParser.Record_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_record_var_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5332
            self.record_name()
            self.state = 5333
            self.type_name()
            self.state = 5334
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5335
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(plsqlParser.SEMICOLON, 0)

        def table_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_type_decContext,0)


        def table_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_declaration" ):
                listener.enterTable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_declaration" ):
                listener.exitTable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_declaration" ):
                return visitor.visitTable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def table_declaration(self):

        localctx = plsqlParser.Table_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_table_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                self.state = 5337
                self.table_type_dec()
                pass

            elif la_ == 2:
                self.state = 5338
                self.table_var_dec()
                pass


            self.state = 5341
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_dec" ):
                listener.enterTable_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_dec" ):
                listener.exitTable_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_dec" ):
                return visitor.visitTable_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_type_dec(self):

        localctx = plsqlParser.Table_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_table_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5343
            self.match(plsqlParser.TYPE)
            self.state = 5344
            self.type_name()
            self.state = 5345
            self.match(plsqlParser.IS)
            self.state = 5357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE]:
                self.state = 5346
                self.match(plsqlParser.TABLE)
                self.state = 5347
                self.match(plsqlParser.OF)
                self.state = 5348
                self.type_spec()
                self.state = 5350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDEX or _la==plsqlParser.INDEXED:
                    self.state = 5349
                    self.table_indexed_by_part()


                self.state = 5354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 5352
                    self.match(plsqlParser.NOT)
                    self.state = 5353
                    self.match(plsqlParser.NULL)


                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 5356
                self.varray_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_indexed_by_part" ):
                return visitor.visitTable_indexed_by_part(self)
            else:
                return visitor.visitChildren(self)




    def table_indexed_by_part(self):

        localctx = plsqlParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INDEXED]:
                self.state = 5359
                localctx.idx1 = self.match(plsqlParser.INDEXED)
                pass
            elif token in [plsqlParser.INDEX]:
                self.state = 5360
                localctx.idx2 = self.match(plsqlParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5363
            self.match(plsqlParser.BY)
            self.state = 5364
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_type_def" ):
                return visitor.visitVarray_type_def(self)
            else:
                return visitor.visitChildren(self)




    def varray_type_def(self):

        localctx = plsqlParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VARRAY]:
                self.state = 5366
                self.match(plsqlParser.VARRAY)
                pass
            elif token in [plsqlParser.VARYING]:
                self.state = 5367
                self.match(plsqlParser.VARYING)
                self.state = 5368
                self.match(plsqlParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5371
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5372
            self.expression(0)
            self.state = 5373
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 5374
            self.match(plsqlParser.OF)
            self.state = 5375
            self.type_spec()
            self.state = 5378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                self.state = 5376
                self.match(plsqlParser.NOT)
                self.state = 5377
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_var_name(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_dec" ):
                listener.enterTable_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_dec" ):
                listener.exitTable_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_dec" ):
                return visitor.visitTable_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_var_dec(self):

        localctx = plsqlParser.Table_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_table_var_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5380
            self.table_var_name()
            self.state = 5381
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_declarationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SEMICOLON)
            else:
                return self.getToken(plsqlParser.SEMICOLON, i)

        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EOF)
            else:
                return self.getToken(plsqlParser.EOF, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_of_statements" ):
                return visitor.visitSeq_of_statements(self)
            else:
                return visitor.visitChildren(self)




    def seq_of_statements(self):

        localctx = plsqlParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5387 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5387
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALTER, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BEGIN, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CREATE, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECLARE, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DELETE, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FETCH, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FOR, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GOTO, plsqlParser.GRANT, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IF, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCK, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PROCEDURE, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATE, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITH, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                        self.state = 5383
                        self.statement()
                        self.state = 5384
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.EOF or _la==plsqlParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.LESS_THAN_OP]:
                        self.state = 5386
                        self.label_declaration()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 5389 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,762,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def LESS_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LESS_THAN_OP)
            else:
                return self.getToken(plsqlParser.LESS_THAN_OP, i)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def GREATER_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.GREATER_THAN_OP)
            else:
                return self.getToken(plsqlParser.GREATER_THAN_OP, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_declaration" ):
                return visitor.visitLabel_declaration(self)
            else:
                return visitor.visitChildren(self)




    def label_declaration(self):

        localctx = plsqlParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5391
            localctx.ltp1 = self.match(plsqlParser.LESS_THAN_OP)
            self.state = 5392
            self.match(plsqlParser.LESS_THAN_OP)
            self.state = 5393
            self.label_name()
            self.state = 5394
            self.match(plsqlParser.GREATER_THAN_OP)
            self.state = 5395
            self.match(plsqlParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(plsqlParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(plsqlParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(plsqlParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(plsqlParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(plsqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(plsqlParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(plsqlParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(plsqlParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(plsqlParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(plsqlParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(plsqlParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(plsqlParser.Function_callContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = plsqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_statement)
        try:
            self.state = 5423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5397
                self.match(plsqlParser.CREATE)
                self.state = 5398
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5399
                self.match(plsqlParser.ALTER)
                self.state = 5400
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5401
                self.match(plsqlParser.GRANT)
                self.state = 5403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,763,self._ctx)
                if la_ == 1:
                    self.state = 5402
                    self.match(plsqlParser.ALL)


                self.state = 5405
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5406
                self.match(plsqlParser.TRUNCATE)
                self.state = 5407
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5408
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5409
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5410
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5411
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5412
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5413
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5414
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5415
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5416
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5417
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5418
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5419
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5420
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5421
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5422
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = plsqlParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5425
                self.general_element()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.state = 5426
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5429
            self.match(plsqlParser.ASSIGN_OP)
            self.state = 5430
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = plsqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5432
            self.match(plsqlParser.CONTINUE)
            self.state = 5434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5433
                self.label_name()


            self.state = 5438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 5436
                self.match(plsqlParser.WHEN)
                self.state = 5437
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_statement" ):
                return visitor.visitExit_statement(self)
            else:
                return visitor.visitChildren(self)




    def exit_statement(self):

        localctx = plsqlParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5440
            self.match(plsqlParser.EXIT)
            self.state = 5442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5441
                self.label_name()


            self.state = 5446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 5444
                self.match(plsqlParser.WHEN)
                self.state = 5445
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(plsqlParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = plsqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5448
            self.match(plsqlParser.GOTO)
            self.state = 5449
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IF)
            else:
                return self.getToken(plsqlParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(plsqlParser.Else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = plsqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5451
            self.match(plsqlParser.IF)
            self.state = 5452
            self.condition()
            self.state = 5453
            self.match(plsqlParser.THEN)
            self.state = 5454
            self.seq_of_statements()
            self.state = 5458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ELSIF:
                self.state = 5455
                self.elsif_part()
                self.state = 5460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 5461
                self.else_part()


            self.state = 5464
            self.match(plsqlParser.END)
            self.state = 5465
            self.match(plsqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(plsqlParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElsif_part" ):
                return visitor.visitElsif_part(self)
            else:
                return visitor.visitChildren(self)




    def elsif_part(self):

        localctx = plsqlParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5467
            self.match(plsqlParser.ELSIF)
            self.state = 5468
            self.condition()
            self.state = 5469
            self.match(plsqlParser.THEN)
            self.state = 5470
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_part" ):
                return visitor.visitElse_part(self)
            else:
                return visitor.visitChildren(self)




    def else_part(self):

        localctx = plsqlParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5472
            self.match(plsqlParser.ELSE)
            self.state = 5473
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOOP)
            else:
                return self.getToken(plsqlParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = plsqlParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
            if la_ == 1:
                self.state = 5475
                self.label_name()


            self.state = 5482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WHILE]:
                self.state = 5478
                self.match(plsqlParser.WHILE)
                self.state = 5479
                self.condition()
                pass
            elif token in [plsqlParser.FOR]:
                self.state = 5480
                self.match(plsqlParser.FOR)
                self.state = 5481
                self.cursor_loop_param()
                pass
            elif token in [plsqlParser.LOOP]:
                pass
            else:
                pass
            self.state = 5484
            self.match(plsqlParser.LOOP)
            self.state = 5485
            self.seq_of_statements()
            self.state = 5486
            self.match(plsqlParser.END)
            self.state = 5487
            self.match(plsqlParser.LOOP)
            self.state = 5489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5488
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_loop_param" ):
                return visitor.visitCursor_loop_param(self)
            else:
                return visitor.visitChildren(self)




    def cursor_loop_param(self):

        localctx = plsqlParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 5512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5491
                self.index_name()
                self.state = 5492
                self.match(plsqlParser.IN)
                self.state = 5494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,775,self._ctx)
                if la_ == 1:
                    self.state = 5493
                    self.match(plsqlParser.REVERSE)


                self.state = 5496
                self.lower_bound()
                self.state = 5497
                self.match(plsqlParser.T__0)
                self.state = 5498
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5500
                self.record_name()
                self.state = 5501
                self.match(plsqlParser.IN)
                self.state = 5510
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 5502
                    self.cursor_name()
                    self.state = 5504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LEFT_PAREN:
                        self.state = 5503
                        self.expression_list()


                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 5506
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 5507
                    self.select_statement()
                    self.state = 5508
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(plsqlParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForall_statement" ):
                return visitor.visitForall_statement(self)
            else:
                return visitor.visitChildren(self)




    def forall_statement(self):

        localctx = plsqlParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5514
            self.match(plsqlParser.FORALL)
            self.state = 5515
            self.index_name()
            self.state = 5516
            self.match(plsqlParser.IN)
            self.state = 5517
            self.bounds_clause()
            self.state = 5518
            self.sql_statement()
            self.state = 5521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SAVE:
                self.state = 5519
                self.match(plsqlParser.SAVE)
                self.state = 5520
                self.match(plsqlParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(plsqlParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(plsqlParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBounds_clause" ):
                return visitor.visitBounds_clause(self)
            else:
                return visitor.visitChildren(self)




    def bounds_clause(self):

        localctx = plsqlParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 5536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5523
                self.lower_bound()
                self.state = 5524
                self.match(plsqlParser.T__0)
                self.state = 5525
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5527
                self.match(plsqlParser.INDICES)
                self.state = 5528
                self.match(plsqlParser.OF)
                self.state = 5529
                self.collection_name()
                self.state = 5531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.BETWEEN:
                    self.state = 5530
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5533
                self.match(plsqlParser.VALUES)
                self.state = 5534
                self.match(plsqlParser.OF)
                self.state = 5535
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_bound" ):
                return visitor.visitBetween_bound(self)
            else:
                return visitor.visitChildren(self)




    def between_bound(self):

        localctx = plsqlParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5538
            self.match(plsqlParser.BETWEEN)
            self.state = 5539
            self.lower_bound()
            self.state = 5540
            self.match(plsqlParser.AND)
            self.state = 5541
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLower_bound" ):
                return visitor.visitLower_bound(self)
            else:
                return visitor.visitChildren(self)




    def lower_bound(self):

        localctx = plsqlParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5543
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpper_bound" ):
                return visitor.visitUpper_bound(self)
            else:
                return visitor.visitChildren(self)




    def upper_bound(self):

        localctx = plsqlParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5545
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_statement" ):
                return visitor.visitNull_statement(self)
            else:
                return visitor.visitChildren(self)




    def null_statement(self):

        localctx = plsqlParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5547
            self.match(plsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_statement" ):
                return visitor.visitRaise_statement(self)
            else:
                return visitor.visitChildren(self)




    def raise_statement(self):

        localctx = plsqlParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5549
            self.match(plsqlParser.RAISE)
            self.state = 5551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 5550
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = plsqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5553
            self.match(plsqlParser.RETURN)
            self.state = 5555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DISTINCT - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXISTS - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FALSE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NOT - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIOR - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELECT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUE - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 586)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)) | (1 << (plsqlParser.LEFT_PAREN - 586)) | (1 << (plsqlParser.PLUS_SIGN - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (plsqlParser.MINUS_SIGN - 650)) | (1 << (plsqlParser.BINDVAR - 650)) | (1 << (plsqlParser.COLON - 650)) | (1 << (plsqlParser.REGULAR_ID - 650)))) != 0):
                self.state = 5554
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = plsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,784,self._ctx)
            if la_ == 1:
                self.state = 5557
                self.match(plsqlParser.CALL)


            self.state = 5560
            self.routine_name()
            self.state = 5562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5561
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = plsqlParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5564
            self.match(plsqlParser.BEGIN)
            self.state = 5565
            self.seq_of_statements()
            self.state = 5572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCEPTION:
                self.state = 5566
                self.match(plsqlParser.EXCEPTION)
                self.state = 5568 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5567
                    self.exception_handler()
                    self.state = 5570 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.WHEN):
                        break



            self.state = 5574
            self.match(plsqlParser.END)
            self.state = 5576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
            if la_ == 1:
                self.state = 5575
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_handler" ):
                return visitor.visitException_handler(self)
            else:
                return visitor.visitChildren(self)




    def exception_handler(self):

        localctx = plsqlParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5578
            self.match(plsqlParser.WHEN)
            self.state = 5579
            self.exception_name()
            self.state = 5584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 5580
                self.match(plsqlParser.OR)
                self.state = 5581
                self.exception_name()
                self.state = 5586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5587
            self.match(plsqlParser.THEN)
            self.state = 5588
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_block" ):
                return visitor.visitTrigger_block(self)
            else:
                return visitor.visitChildren(self)




    def trigger_block(self):

        localctx = plsqlParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECLARE - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0):
                self.state = 5591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 5590
                    self.match(plsqlParser.DECLARE)


                self.state = 5594 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5593
                    self.declare_spec()
                    self.state = 5596 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0)):
                        break



            self.state = 5600
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = plsqlParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DECLARE:
                self.state = 5602
                self.match(plsqlParser.DECLARE)


            self.state = 5606 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5605
                self.declare_spec()
                self.state = 5608 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PROCEDURE - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & ((1 << (plsqlParser.BINDVAR - 655)) | (1 << (plsqlParser.COLON - 655)) | (1 << (plsqlParser.REGULAR_ID - 655)))) != 0)):
                    break

            self.state = 5610
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(plsqlParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(plsqlParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_statement" ):
                return visitor.visitSql_statement(self)
            else:
                return visitor.visitChildren(self)




    def sql_statement(self):

        localctx = plsqlParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_sql_statement)
        try:
            self.state = 5616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5612
                self.execute_immediate()
                pass
            elif token in [plsqlParser.DELETE, plsqlParser.EXPLAIN, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5613
                self.data_manipulation_language_statements()
                pass
            elif token in [plsqlParser.CLOSE, plsqlParser.FETCH, plsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5614
                self.cursor_manipulation_statements()
                pass
            elif token in [plsqlParser.COMMIT, plsqlParser.ROLLBACK, plsqlParser.SAVEPOINT, plsqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5615
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_immediate" ):
                return visitor.visitExecute_immediate(self)
            else:
                return visitor.visitChildren(self)




    def execute_immediate(self):

        localctx = plsqlParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5618
            self.match(plsqlParser.EXECUTE)
            self.state = 5619
            self.match(plsqlParser.IMMEDIATE)
            self.state = 5620
            self.expression(0)
            self.state = 5630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BULK, plsqlParser.INTO]:
                self.state = 5621
                self.into_clause()
                self.state = 5623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 5622
                    self.using_clause()


                pass
            elif token in [plsqlParser.USING]:
                self.state = 5625
                self.using_clause()
                self.state = 5627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 5626
                    self.dynamic_returning_clause()


                pass
            elif token in [plsqlParser.RETURN, plsqlParser.RETURNING]:
                self.state = 5629
                self.dynamic_returning_clause()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamic_returning_clause" ):
                return visitor.visitDynamic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def dynamic_returning_clause(self):

        localctx = plsqlParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5632
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5633
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_manipulation_language_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(plsqlParser.Lock_table_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(plsqlParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_data_manipulation_language_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_language_statements" ):
                listener.enterData_manipulation_language_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_language_statements" ):
                listener.exitData_manipulation_language_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_manipulation_language_statements" ):
                return visitor.visitData_manipulation_language_statements(self)
            else:
                return visitor.visitChildren(self)




    def data_manipulation_language_statements(self):

        localctx = plsqlParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 5642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MERGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5635
                self.merge_statement()
                pass
            elif token in [plsqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5636
                self.lock_table_statement()
                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5637
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5638
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5639
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5640
                self.insert_statement()
                pass
            elif token in [plsqlParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5641
                self.explain_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(plsqlParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(plsqlParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_manipulation_statements" ):
                return visitor.visitCursor_manipulation_statements(self)
            else:
                return visitor.visitChildren(self)




    def cursor_manipulation_statements(self):

        localctx = plsqlParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 5648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5644
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5645
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5646
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5647
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_statement" ):
                return visitor.visitClose_statement(self)
            else:
                return visitor.visitChildren(self)




    def close_statement(self):

        localctx = plsqlParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5650
            self.match(plsqlParser.CLOSE)
            self.state = 5651
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_statement" ):
                return visitor.visitOpen_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_statement(self):

        localctx = plsqlParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5653
            self.match(plsqlParser.OPEN)
            self.state = 5654
            self.cursor_name()
            self.state = 5656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5655
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(plsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_statement" ):
                return visitor.visitFetch_statement(self)
            else:
                return visitor.visitChildren(self)




    def fetch_statement(self):

        localctx = plsqlParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5658
            self.match(plsqlParser.FETCH)
            self.state = 5659
            self.cursor_name()
            self.state = 5680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 5660
                localctx.it1 = self.match(plsqlParser.INTO)
                self.state = 5661
                self.variable_name()
                self.state = 5666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5662
                    self.match(plsqlParser.COMMA)
                    self.state = 5663
                    self.variable_name()
                    self.state = 5668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.BULK]:
                self.state = 5669
                self.match(plsqlParser.BULK)
                self.state = 5670
                self.match(plsqlParser.COLLECT)
                self.state = 5671
                self.match(plsqlParser.INTO)
                self.state = 5672
                self.variable_name()
                self.state = 5677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5673
                    self.match(plsqlParser.COMMA)
                    self.state = 5674
                    self.variable_name()
                    self.state = 5679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_for_statement" ):
                return visitor.visitOpen_for_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_for_statement(self):

        localctx = plsqlParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5682
            self.match(plsqlParser.OPEN)
            self.state = 5683
            self.variable_name()
            self.state = 5684
            self.match(plsqlParser.FOR)
            self.state = 5687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.state = 5685
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 5686
                self.expression(0)
                pass


            self.state = 5690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 5689
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_control_statements" ):
                return visitor.visitTransaction_control_statements(self)
            else:
                return visitor.visitChildren(self)




    def transaction_control_statements(self):

        localctx = plsqlParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_transaction_control_statements)
        try:
            self.state = 5697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,807,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5692
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5693
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5694
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5695
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5696
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_transaction_command" ):
                return visitor.visitSet_transaction_command(self)
            else:
                return visitor.visitChildren(self)




    def set_transaction_command(self):

        localctx = plsqlParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5699
            self.match(plsqlParser.SET)
            self.state = 5700
            self.match(plsqlParser.TRANSACTION)
            self.state = 5714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 5701
                self.match(plsqlParser.READ)
                self.state = 5702
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ONLY or _la==plsqlParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.ISOLATION]:
                self.state = 5703
                self.match(plsqlParser.ISOLATION)
                self.state = 5704
                self.match(plsqlParser.LEVEL)
                self.state = 5708
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.SERIALIZABLE]:
                    self.state = 5705
                    self.match(plsqlParser.SERIALIZABLE)
                    pass
                elif token in [plsqlParser.READ]:
                    self.state = 5706
                    self.match(plsqlParser.READ)
                    self.state = 5707
                    self.match(plsqlParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [plsqlParser.USE]:
                self.state = 5710
                self.match(plsqlParser.USE)
                self.state = 5711
                self.match(plsqlParser.ROLLBACK)
                self.state = 5712
                self.match(plsqlParser.SEGMENT)
                self.state = 5713
                self.rollback_segment_name()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.NAME, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 5718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 5716
                self.match(plsqlParser.NAME)
                self.state = 5717
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_constraint_command" ):
                return visitor.visitSet_constraint_command(self)
            else:
                return visitor.visitChildren(self)




    def set_constraint_command(self):

        localctx = plsqlParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5720
            self.match(plsqlParser.SET)
            self.state = 5721
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CONSTRAINT or _la==plsqlParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALL]:
                self.state = 5722
                self.match(plsqlParser.ALL)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 5723
                self.constraint_name()
                self.state = 5728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 5724
                    self.match(plsqlParser.COMMA)
                    self.state = 5725
                    self.constraint_name()
                    self.state = 5730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 5733
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(plsqlParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_statement" ):
                return visitor.visitCommit_statement(self)
            else:
                return visitor.visitChildren(self)




    def commit_statement(self):

        localctx = plsqlParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5735
            self.match(plsqlParser.COMMIT)
            self.state = 5737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 5736
                self.match(plsqlParser.WORK)


            self.state = 5752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMMENT]:
                self.state = 5739
                self.match(plsqlParser.COMMENT)
                self.state = 5740
                self.expression(0)
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 5741
                self.match(plsqlParser.FORCE)
                self.state = 5750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 5742
                    self.match(plsqlParser.CORRUPT_XID)
                    self.state = 5743
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 5744
                    self.match(plsqlParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 5745
                    self.expression(0)
                    self.state = 5748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 5746
                        self.match(plsqlParser.COMMA)
                        self.state = 5747
                        self.expression(0)


                    pass


                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.WRITE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 5755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WRITE:
                self.state = 5754
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_clause" ):
                return visitor.visitWrite_clause(self)
            else:
                return visitor.visitChildren(self)




    def write_clause(self):

        localctx = plsqlParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5757
            self.match(plsqlParser.WRITE)
            self.state = 5759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 5758
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE:
                self.state = 5761
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_statement" ):
                return visitor.visitRollback_statement(self)
            else:
                return visitor.visitChildren(self)




    def rollback_statement(self):

        localctx = plsqlParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5764
            self.match(plsqlParser.ROLLBACK)
            self.state = 5766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 5765
                self.match(plsqlParser.WORK)


            self.state = 5775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TO]:
                self.state = 5768
                self.match(plsqlParser.TO)
                self.state = 5770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
                if la_ == 1:
                    self.state = 5769
                    self.match(plsqlParser.SAVEPOINT)


                self.state = 5772
                self.savepoint_name()
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 5773
                self.match(plsqlParser.FORCE)
                self.state = 5774
                self.quoted_string()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_statement" ):
                return visitor.visitSavepoint_statement(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_statement(self):

        localctx = plsqlParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5777
            self.match(plsqlParser.SAVEPOINT)
            self.state = 5778
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain_statement" ):
                return visitor.visitExplain_statement(self)
            else:
                return visitor.visitChildren(self)




    def explain_statement(self):

        localctx = plsqlParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5780
            self.match(plsqlParser.EXPLAIN)
            self.state = 5781
            self.match(plsqlParser.PLAN)
            self.state = 5786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SET:
                self.state = 5782
                self.match(plsqlParser.SET)
                self.state = 5783
                self.match(plsqlParser.STATEMENT_ID)
                self.state = 5784
                self.match(plsqlParser.EQUALS_OP)
                self.state = 5785
                self.quoted_string()


            self.state = 5790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTO:
                self.state = 5788
                self.match(plsqlParser.INTO)
                self.state = 5789
                self.tableview_name()


            self.state = 5792
            self.match(plsqlParser.FOR)
            self.state = 5798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 5793
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.state = 5794
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.state = 5795
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.state = 5796
                self.insert_statement()
                pass
            elif token in [plsqlParser.MERGE]:
                self.state = 5797
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_factoring_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = plsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WITH:
                self.state = 5800
                self.subquery_factoring_clause()


            self.state = 5803
            self.subquery(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Factoring_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_factoring_clause" ):
                return visitor.visitSubquery_factoring_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_factoring_clause(self):

        localctx = plsqlParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5805
            self.match(plsqlParser.WITH)
            self.state = 5806
            self.factoring_element()
            self.state = 5811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5807
                self.match(plsqlParser.COMMA)
                self.state = 5808
                self.factoring_element()
                self.state = 5813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(plsqlParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(plsqlParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactoring_element" ):
                return visitor.visitFactoring_element(self)
            else:
                return visitor.visitChildren(self)




    def factoring_element(self):

        localctx = plsqlParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5814
            self.query_name()
            self.state = 5816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 5815
                self.paren_column_list()


            self.state = 5818
            self.match(plsqlParser.AS)
            self.state = 5819
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5820
            self.subquery(0)
            self.state = 5822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 5821
                self.order_by_clause()


            self.state = 5824
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 5826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEARCH:
                self.state = 5825
                self.search_clause()


            self.state = 5829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CYCLE:
                self.state = 5828
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(plsqlParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FIRST)
            else:
                return self.getToken(plsqlParser.FIRST, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def DEPTH(self):
            return self.getToken(plsqlParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(plsqlParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULLS)
            else:
                return self.getToken(plsqlParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LAST)
            else:
                return self.getToken(plsqlParser.LAST, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_clause" ):
                return visitor.visitSearch_clause(self)
            else:
                return visitor.visitChildren(self)




    def search_clause(self):

        localctx = plsqlParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5831
            self.match(plsqlParser.SEARCH)
            self.state = 5832
            _la = self._input.LA(1)
            if not(_la==plsqlParser.BREADTH or _la==plsqlParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5833
            self.match(plsqlParser.FIRST)
            self.state = 5834
            self.match(plsqlParser.BY)
            self.state = 5835
            self.column_name()
            self.state = 5837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ASC:
                self.state = 5836
                self.match(plsqlParser.ASC)


            self.state = 5840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DESC:
                self.state = 5839
                self.match(plsqlParser.DESC)


            self.state = 5844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 5842
                self.match(plsqlParser.NULLS)
                self.state = 5843
                self.match(plsqlParser.FIRST)


            self.state = 5848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NULLS:
                self.state = 5846
                self.match(plsqlParser.NULLS)
                self.state = 5847
                self.match(plsqlParser.LAST)


            self.state = 5868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5850
                self.match(plsqlParser.COMMA)
                self.state = 5851
                self.column_name()
                self.state = 5853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC:
                    self.state = 5852
                    self.match(plsqlParser.ASC)


                self.state = 5856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DESC:
                    self.state = 5855
                    self.match(plsqlParser.DESC)


                self.state = 5860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
                if la_ == 1:
                    self.state = 5858
                    self.match(plsqlParser.NULLS)
                    self.state = 5859
                    self.match(plsqlParser.FIRST)


                self.state = 5864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULLS:
                    self.state = 5862
                    self.match(plsqlParser.NULLS)
                    self.state = 5863
                    self.match(plsqlParser.LAST)


                self.state = 5870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5871
            self.match(plsqlParser.SET)
            self.state = 5872
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCycle_clause" ):
                return visitor.visitCycle_clause(self)
            else:
                return visitor.visitChildren(self)




    def cycle_clause(self):

        localctx = plsqlParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5874
            self.match(plsqlParser.CYCLE)
            self.state = 5875
            self.column_name()
            self.state = 5880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 5876
                self.match(plsqlParser.COMMA)
                self.state = 5877
                self.column_name()
                self.state = 5882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5883
            self.match(plsqlParser.SET)
            self.state = 5884
            self.column_name()
            self.state = 5885
            self.match(plsqlParser.TO)
            self.state = 5886
            self.expression(0)
            self.state = 5887
            self.match(plsqlParser.DEFAULT)
            self.state = 5888
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryParenContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryParen" ):
                listener.enterSubqueryParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryParen" ):
                listener.exitSubqueryParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryParen" ):
                return visitor.visitSubqueryParen(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreSubqueryContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_block(self):
            return self.getTypedRuleContext(plsqlParser.Query_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreSubquery" ):
                listener.enterIgnoreSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreSubquery" ):
                listener.exitIgnoreSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreSubquery" ):
                return visitor.visitIgnoreSubquery(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryCompoundContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.left = None # SubqueryContext
            self.op = None # Subquery_operation_partContext
            self.right = None # SubqueryContext
            self.copyFrom(ctx)

        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(plsqlParser.SubqueryContext,i)

        def subquery_operation_part(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_operation_partContext,0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryCompound" ):
                listener.enterSubqueryCompound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryCompound" ):
                listener.exitSubqueryCompound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryCompound" ):
                return visitor.visitSubqueryCompound(self)
            else:
                return visitor.visitChildren(self)



    def subquery(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.SubqueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 660
        self.enterRecursionRule(localctx, 660, self.RULE_subquery, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                localctx = plsqlParser.SubqueryParenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5891
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 5892
                self.subquery(0)
                self.state = 5893
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.SELECT]:
                localctx = plsqlParser.IgnoreSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5895
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 5906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,844,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.SubqueryCompoundContext(self, plsqlParser.SubqueryContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subquery)
                    self.state = 5898
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 5899
                    localctx.op = self.subquery_operation_part()
                    self.state = 5900
                    localctx.right = self.subquery(0)
                    self.state = 5902
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
                    if la_ == 1:
                        self.state = 5901
                        self.order_by_clause()

             
                self.state = 5908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,844,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(plsqlParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(plsqlParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(plsqlParser.EXCEPT, 0)

        def MINUS(self):
            return self.getToken(plsqlParser.MINUS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_operation_part" ):
                return visitor.visitSubquery_operation_part(self)
            else:
                return visitor.visitChildren(self)




    def subquery_operation_part(self):

        localctx = plsqlParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5909
            _la = self._input.LA(1)
            if not(_la==plsqlParser.EXCEPT or _la==plsqlParser.INTERSECT or _la==plsqlParser.MINUS or _la==plsqlParser.UNION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL:
                self.state = 5910
                self.match(plsqlParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self._selected_element = None # Selected_elementContext
            self.target_list = list() # of Selected_elementContexts

        def SELECT(self):
            return self.getToken(plsqlParser.SELECT, 0)

        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(plsqlParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(plsqlParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_clauseContext,i)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Having_clauseContext,i)


        def model_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,i)


        def limit_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Limit_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Limit_clauseContext,i)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_block" ):
                return visitor.visitQuery_block(self)
            else:
                return visitor.visitChildren(self)




    def query_block(self):

        localctx = plsqlParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5913
            self.match(plsqlParser.SELECT)
            self.state = 5915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
            if la_ == 1:
                self.state = 5914
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5917
            localctx._selected_element = self.selected_element()
            localctx.target_list.append(localctx._selected_element)
            self.state = 5922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,847,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5918
                    self.match(plsqlParser.COMMA)
                    self.state = 5919
                    localctx._selected_element = self.selected_element()
                    localctx.target_list.append(localctx._selected_element) 
                self.state = 5924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,847,self._ctx)

            self.state = 5926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 5925
                self.into_clause()


            self.state = 5929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.state = 5928
                self.from_clause()


            self.state = 5932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 5931
                self.where_clause()


            self.state = 5935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 5934
                self.hierarchical_query_clause()


            self.state = 5941
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,853,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5939
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GROUP]:
                        self.state = 5937
                        self.group_by_clause()
                        pass
                    elif token in [plsqlParser.HAVING]:
                        self.state = 5938
                        self.having_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5943
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,853,self._ctx)

            self.state = 5945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
            if la_ == 1:
                self.state = 5944
                self.model_clause()


            self.state = 5952
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,856,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5950
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.FOR]:
                        self.state = 5947
                        self.for_update_clause()
                        pass
                    elif token in [plsqlParser.ORDER]:
                        self.state = 5948
                        self.order_by_clause()
                        pass
                    elif token in [plsqlParser.LIMIT]:
                        self.state = 5949
                        self.limit_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,856,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alias_exprContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.alias = None # Column_aliasContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_expr" ):
                listener.enterAlias_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_expr" ):
                listener.exitAlias_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_expr" ):
                return visitor.visitAlias_expr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableview_nameContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableview_name" ):
                listener.enterIgnoreTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableview_name" ):
                listener.exitIgnoreTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableview_name" ):
                return visitor.visitIgnoreTableview_name(self)
            else:
                return visitor.visitChildren(self)


    class StarTableContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)
        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarTable" ):
                listener.enterStarTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarTable" ):
                listener.exitStarTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarTable" ):
                return visitor.visitStarTable(self)
            else:
                return visitor.visitChildren(self)


    class Star1Context(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar1" ):
                listener.enterStar1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar1" ):
                listener.exitStar1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar1" ):
                return visitor.visitStar1(self)
            else:
                return visitor.visitChildren(self)



    def selected_element(self):

        localctx = plsqlParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_selected_element)
        try:
            self.state = 5965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,858,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.Star1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5955
                self.star()
                pass

            elif la_ == 2:
                localctx = plsqlParser.StarTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5956
                self.dot_id()
                self.state = 5957
                self.match(plsqlParser.PERIOD)
                self.state = 5958
                self.star()
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreTableview_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5960
                self.tableview_name()
                pass

            elif la_ == 4:
                localctx = plsqlParser.Alias_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5961
                localctx.expr = self.expression(0)
                self.state = 5963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
                if la_ == 1:
                    self.state = 5962
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_refContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_refContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = plsqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5967
            self.match(plsqlParser.FROM)
            self.state = 5968
            self.table_ref(0)
            self.state = 5973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,859,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5969
                    self.match(plsqlParser.COMMA)
                    self.state = 5970
                    self.table_ref(0) 
                self.state = 5975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,859,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_ref_pivotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_pivot" ):
                listener.enterTable_ref_pivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_pivot" ):
                listener.exitTable_ref_pivot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_pivot" ):
                return visitor.visitTable_ref_pivot(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_pivot(self):

        localctx = plsqlParser.Table_ref_pivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_table_ref_pivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5976
            self.table_ref(0)
            self.state = 5979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PIVOT]:
                self.state = 5977
                self.pivot_clause()
                pass
            elif token in [plsqlParser.UNPIVOT]:
                self.state = 5978
                self.unpivot_clause()
                pass
            elif token in [plsqlParser.EOF]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)

        def join_clause(self):
            return self.getTypedRuleContext(plsqlParser.Join_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExpr" ):
                listener.enterJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExpr" ):
                listener.exitJoinExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExpr" ):
                return visitor.visitJoinExpr(self)
            else:
                return visitor.visitChildren(self)


    class TableRefSimpleContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefSimple" ):
                listener.enterTableRefSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefSimple" ):
                listener.exitTableRefSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefSimple" ):
                return visitor.visitTableRefSimple(self)
            else:
                return visitor.visitChildren(self)


    class TableRefAuxContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefAux" ):
                listener.enterTableRefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefAux" ):
                listener.exitTableRefAux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefAux" ):
                return visitor.visitTableRefAux(self)
            else:
                return visitor.visitChildren(self)



    def table_ref(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Table_refContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 672
        self.enterRecursionRule(localctx, 672, self.RULE_table_ref, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.TableRefSimpleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5982
                self.table_ref_aux()
                self.state = 5986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,861,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5983
                        self.flashback_query_clause() 
                    self.state = 5988
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,861,self._ctx)

                pass

            elif la_ == 2:
                localctx = plsqlParser.TableRefAuxContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5989
                self.table_ref_aux()
                self.state = 5993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,862,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5990
                        self.flashback_query_clause() 
                    self.state = 5995
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,862,self._ctx)

                self.state = 5997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
                if la_ == 1:
                    self.state = 5996
                    self.table_alias()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6005
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,865,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.JoinExprContext(self, plsqlParser.Table_refContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_ref)
                    self.state = 6001
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 6002
                    self.join_clause() 
                self.state = 6007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,865,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_aux" ):
                return visitor.visitTable_ref_aux(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_aux(self):

        localctx = plsqlParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_table_ref_aux)
        try:
            self.state = 6018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6008
                self.dml_table_expression_clause()
                self.state = 6011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,866,self._ctx)
                if la_ == 1:
                    self.state = 6009
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 6010
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6013
                self.match(plsqlParser.ONLY)
                self.state = 6014
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6015
                self.dml_table_expression_clause()
                self.state = 6016
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,i)


        def join_type(self):
            return self.getTypedRuleContext(plsqlParser.Join_typeContext,0)


        def join_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_on_partContext,0)


        def join_using_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_using_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = plsqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 6020
                self.query_partition_clause()


            self.state = 6024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CROSS or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.LEFT - 197)))) != 0) or _la==plsqlParser.NATURAL or _la==plsqlParser.RIGHT:
                self.state = 6023
                self.join_type()


            self.state = 6026
            self.match(plsqlParser.JOIN)
            self.state = 6027
            self.table_ref(0)
            self.state = 6029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
            if la_ == 1:
                self.state = 6028
                self.query_partition_clause()


            self.state = 6033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
            if la_ == 1:
                self.state = 6031
                self.join_on_part()

            elif la_ == 2:
                self.state = 6032
                self.join_using_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_on_part" ):
                return visitor.visitJoin_on_part(self)
            else:
                return visitor.visitChildren(self)




    def join_on_part(self):

        localctx = plsqlParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6035
            self.match(plsqlParser.ON)
            self.state = 6036
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_using_part" ):
                return visitor.visitJoin_using_part(self)
            else:
                return visitor.visitChildren(self)




    def join_using_part(self):

        localctx = plsqlParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6038
            self.match(plsqlParser.USING)
            self.state = 6039
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6040
            self.column_name()
            self.state = 6045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6041
                self.match(plsqlParser.COMMA)
                self.state = 6042
                self.column_name()
                self.state = 6047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6048
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = plsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 6061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6050
                self.match(plsqlParser.CROSS)
                pass
            elif token in [plsqlParser.FULL, plsqlParser.INNER, plsqlParser.LEFT, plsqlParser.NATURAL, plsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NATURAL:
                    self.state = 6051
                    self.match(plsqlParser.NATURAL)


                self.state = 6059
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INNER]:
                    self.state = 6054
                    self.match(plsqlParser.INNER)
                    pass
                elif token in [plsqlParser.FULL, plsqlParser.LEFT, plsqlParser.RIGHT]:
                    self.state = 6055
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.FULL or _la==plsqlParser.LEFT or _la==plsqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.OUTER:
                        self.state = 6056
                        self.match(plsqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_partition_clause" ):
                return visitor.visitQuery_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def query_partition_clause(self):

        localctx = plsqlParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6063
            self.match(plsqlParser.PARTITION)
            self.state = 6064
            self.match(plsqlParser.BY)
            self.state = 6078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
            if la_ == 1:
                self.state = 6065
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6066
                self.subquery(0)
                self.state = 6067
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6069
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 6070
                self.expression(0)
                self.state = 6075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,877,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6071
                        self.match(plsqlParser.COMMA)
                        self.state = 6072
                        self.expression(0) 
                    self.state = 6077
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,877,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_query_clause" ):
                return visitor.visitFlashback_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_query_clause(self):

        localctx = plsqlParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 6088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6080
                self.match(plsqlParser.VERSIONS)
                self.state = 6081
                self.match(plsqlParser.BETWEEN)
                self.state = 6082
                _la = self._input.LA(1)
                if not(_la==plsqlParser.SCN or _la==plsqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6083
                self.expression(0)
                pass
            elif token in [plsqlParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6084
                self.match(plsqlParser.AS)
                self.state = 6085
                self.match(plsqlParser.OF)
                self.state = 6086
                _la = self._input.LA(1)
                if not(_la==plsqlParser.SCN or _la==plsqlParser.SNAPSHOT or _la==plsqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6087
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(plsqlParser.PIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = plsqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6090
            self.match(plsqlParser.PIVOT)
            self.state = 6092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XML:
                self.state = 6091
                self.match(plsqlParser.XML)


            self.state = 6094
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6095
            self.pivot_element()
            self.state = 6100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6096
                self.match(plsqlParser.COMMA)
                self.state = 6097
                self.pivot_element()
                self.state = 6102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6103
            self.pivot_for_clause()
            self.state = 6104
            self.pivot_in_clause()
            self.state = 6105
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_function_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_element" ):
                return visitor.visitPivot_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_element(self):

        localctx = plsqlParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6107
            self.aggregate_function_name()
            self.state = 6108
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6109
            self.expression(0)
            self.state = 6110
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6111
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_for_clause" ):
                return visitor.visitPivot_for_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_for_clause(self):

        localctx = plsqlParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6114
            self.match(plsqlParser.FOR)
            self.state = 6127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 6115
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 6116
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6117
                self.column_name()
                self.state = 6122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6118
                    self.match(plsqlParser.COMMA)
                    self.state = 6119
                    self.column_name()
                    self.state = 6124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6125
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause" ):
                return visitor.visitPivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause(self):

        localctx = plsqlParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6129
            self.match(plsqlParser.IN)
            self.state = 6130
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
            if la_ == 1:
                self.state = 6131
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 6132
                self.match(plsqlParser.ANY)
                self.state = 6137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6133
                    self.match(plsqlParser.COMMA)
                    self.state = 6134
                    self.match(plsqlParser.ANY)
                    self.state = 6139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 6140
                self.pivot_in_clause_element()
                self.state = 6145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6141
                    self.match(plsqlParser.COMMA)
                    self.state = 6142
                    self.pivot_in_clause_element()
                    self.state = 6147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 6150
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_element" ):
                return visitor.visitPivot_in_clause_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_element(self):

        localctx = plsqlParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6152
            self.pivot_in_clause_elements()
            self.state = 6154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6153
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_elements" ):
                return visitor.visitPivot_in_clause_elements(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_elements(self):

        localctx = plsqlParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 6158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,889,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6156
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6157
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(plsqlParser.UNPIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_in_clauseContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = plsqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6160
            self.match(plsqlParser.UNPIVOT)
            self.state = 6163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE:
                self.state = 6161
                _la = self._input.LA(1)
                if not(_la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6162
                self.match(plsqlParser.NULLS)


            self.state = 6165
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 6166
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 6167
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6168
                self.column_name()
                self.state = 6173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6169
                    self.match(plsqlParser.COMMA)
                    self.state = 6170
                    self.column_name()
                    self.state = 6175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6176
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6180
            self.pivot_for_clause()
            self.state = 6181
            self.unpivot_in_clause()
            self.state = 6182
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unpivot_in_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_clause" ):
                return visitor.visitUnpivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_clause(self):

        localctx = plsqlParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6184
            self.match(plsqlParser.IN)
            self.state = 6185
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6186
            self.unpivot_in_elements()
            self.state = 6191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6187
                self.match(plsqlParser.COMMA)
                self.state = 6188
                self.unpivot_in_elements()
                self.state = 6193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6194
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_elements" ):
                return visitor.visitUnpivot_in_elements(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_elements(self):

        localctx = plsqlParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 6196
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 6197
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6198
                self.column_name()
                self.state = 6203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6199
                    self.match(plsqlParser.COMMA)
                    self.state = 6200
                    self.column_name()
                    self.state = 6205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6206
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 6210
                self.match(plsqlParser.AS)
                self.state = 6223
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DATE, plsqlParser.DBTIMEZONE, plsqlParser.DEFAULT, plsqlParser.FALSE, plsqlParser.INTERVAL, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NULL, plsqlParser.SESSIONTIMEZONE, plsqlParser.TIMESTAMP, plsqlParser.TRUE, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 6211
                    self.constant()
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 6212
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6213
                    self.constant()
                    self.state = 6218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.COMMA:
                        self.state = 6214
                        self.match(plsqlParser.COMMA)
                        self.state = 6215
                        self.constant()
                        self.state = 6220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6221
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(plsqlParser.CONNECT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(plsqlParser.Start_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchical_query_clause" ):
                return visitor.visitHierarchical_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def hierarchical_query_clause(self):

        localctx = plsqlParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_hierarchical_query_clause)
        try:
            self.state = 6244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6227
                self.match(plsqlParser.CONNECT)
                self.state = 6228
                self.match(plsqlParser.BY)
                self.state = 6230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
                if la_ == 1:
                    self.state = 6229
                    self.match(plsqlParser.NOCYCLE)


                self.state = 6232
                self.condition()
                self.state = 6234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
                if la_ == 1:
                    self.state = 6233
                    self.start_part()


                pass
            elif token in [plsqlParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6236
                self.start_part()
                self.state = 6237
                self.match(plsqlParser.CONNECT)
                self.state = 6238
                self.match(plsqlParser.BY)
                self.state = 6240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 6239
                    self.match(plsqlParser.NOCYCLE)


                self.state = 6242
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart_part" ):
                return visitor.visitStart_part(self)
            else:
                return visitor.visitChildren(self)




    def start_part(self):

        localctx = plsqlParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6246
            self.match(plsqlParser.START)
            self.state = 6247
            self.match(plsqlParser.WITH)
            self.state = 6248
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_elementsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = plsqlParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6250
            self.match(plsqlParser.GROUP)
            self.state = 6251
            self.match(plsqlParser.BY)
            self.state = 6252
            self.group_by_elements()
            self.state = 6257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,903,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6253
                    self.match(plsqlParser.COMMA)
                    self.state = 6254
                    self.group_by_elements() 
                self.state = 6259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,903,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(plsqlParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_elements" ):
                return visitor.visitGroup_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def group_by_elements(self):

        localctx = plsqlParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_group_by_elements)
        try:
            self.state = 6263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6260
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6261
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6262
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup_cube_clause" ):
                return visitor.visitRollup_cube_clause(self)
            else:
                return visitor.visitChildren(self)




    def rollup_cube_clause(self):

        localctx = plsqlParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6265
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUBE or _la==plsqlParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6266
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6267
            self.grouping_sets_elements()
            self.state = 6272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6268
                self.match(plsqlParser.COMMA)
                self.state = 6269
                self.grouping_sets_elements()
                self.state = 6274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6275
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_clause" ):
                return visitor.visitGrouping_sets_clause(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_clause(self):

        localctx = plsqlParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6277
            self.match(plsqlParser.GROUPING)
            self.state = 6278
            self.match(plsqlParser.SETS)
            self.state = 6279
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6280
            self.grouping_sets_elements()
            self.state = 6285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6281
                self.match(plsqlParser.COMMA)
                self.state = 6282
                self.grouping_sets_elements()
                self.state = 6287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6288
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_elements" ):
                return visitor.visitGrouping_sets_elements(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_elements(self):

        localctx = plsqlParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_grouping_sets_elements)
        try:
            self.state = 6293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6290
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6291
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6292
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(plsqlParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = plsqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6295
            self.match(plsqlParser.HAVING)
            self.state = 6296
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(plsqlParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_clause" ):
                return visitor.visitModel_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_clause(self):

        localctx = plsqlParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6298
            self.match(plsqlParser.MODEL)
            self.state = 6302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 6299
                self.cell_reference_options()
                self.state = 6304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 6305
                self.return_rows_clause()


            self.state = 6311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.REFERENCE:
                self.state = 6308
                self.reference_model()
                self.state = 6313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6314
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_reference_options" ):
                return visitor.visitCell_reference_options(self)
            else:
                return visitor.visitChildren(self)




    def cell_reference_options(self):

        localctx = plsqlParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 6324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IGNORE, plsqlParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6316
                _la = self._input.LA(1)
                if not(_la==plsqlParser.IGNORE or _la==plsqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6317
                self.match(plsqlParser.NAV)
                pass
            elif token in [plsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6318
                self.match(plsqlParser.UNIQUE)
                self.state = 6322
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DIMENSION]:
                    self.state = 6319
                    self.match(plsqlParser.DIMENSION)
                    pass
                elif token in [plsqlParser.SINGLE]:
                    self.state = 6320
                    self.match(plsqlParser.SINGLE)
                    self.state = 6321
                    self.match(plsqlParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_rows_clause" ):
                return visitor.visitReturn_rows_clause(self)
            else:
                return visitor.visitChildren(self)




    def return_rows_clause(self):

        localctx = plsqlParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6326
            self.match(plsqlParser.RETURN)
            self.state = 6327
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6328
            self.match(plsqlParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model" ):
                return visitor.visitReference_model(self)
            else:
                return visitor.visitChildren(self)




    def reference_model(self):

        localctx = plsqlParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6330
            self.match(plsqlParser.REFERENCE)
            self.state = 6331
            self.reference_model_name()
            self.state = 6332
            self.match(plsqlParser.ON)
            self.state = 6333
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6334
            self.subquery(0)
            self.state = 6335
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6336
            self.model_column_clauses()
            self.state = 6340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 6337
                self.cell_reference_options()
                self.state = 6342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model" ):
                return visitor.visitMain_model(self)
            else:
                return visitor.visitChildren(self)




    def main_model(self):

        localctx = plsqlParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.MAIN:
                self.state = 6343
                self.match(plsqlParser.MAIN)
                self.state = 6344
                self.main_model_name()


            self.state = 6347
            self.model_column_clauses()
            self.state = 6351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 6348
                self.cell_reference_options()
                self.state = 6353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6354
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_clauses" ):
                return visitor.visitModel_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def model_column_clauses(self):

        localctx = plsqlParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 6356
                self.model_column_partition_part()


            self.state = 6359
            self.match(plsqlParser.DIMENSION)
            self.state = 6360
            self.match(plsqlParser.BY)
            self.state = 6361
            self.model_column_list()
            self.state = 6362
            self.match(plsqlParser.MEASURES)
            self.state = 6363
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_partition_part" ):
                return visitor.visitModel_column_partition_part(self)
            else:
                return visitor.visitChildren(self)




    def model_column_partition_part(self):

        localctx = plsqlParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6365
            self.match(plsqlParser.PARTITION)
            self.state = 6366
            self.match(plsqlParser.BY)
            self.state = 6367
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_columnContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_list" ):
                return visitor.visitModel_column_list(self)
            else:
                return visitor.visitChildren(self)




    def model_column_list(self):

        localctx = plsqlParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6369
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6370
            self.model_column()
            self.state = 6375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6371
                self.match(plsqlParser.COMMA)
                self.state = 6372
                self.model_column()
                self.state = 6377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6378
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column" ):
                return visitor.visitModel_column(self)
            else:
                return visitor.visitChildren(self)




    def model_column(self):

        localctx = plsqlParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6380
            self.expression(0)
            self.state = 6382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6381
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_rules_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def model_rules_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_partContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_clause" ):
                return visitor.visitModel_rules_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_clause(self):

        localctx = plsqlParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RULES:
                self.state = 6384
                self.model_rules_part()


            self.state = 6387
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6388
            self.model_rules_element()
            self.state = 6393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6389
                self.match(plsqlParser.COMMA)
                self.state = 6390
                self.model_rules_element()
                self.state = 6395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6396
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_part" ):
                return visitor.visitModel_rules_part(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_part(self):

        localctx = plsqlParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6398
            self.match(plsqlParser.RULES)
            self.state = 6404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UPDATE]:
                self.state = 6399
                self.match(plsqlParser.UPDATE)
                pass
            elif token in [plsqlParser.UPSERT]:
                self.state = 6400
                self.match(plsqlParser.UPSERT)
                self.state = 6402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ALL:
                    self.state = 6401
                    self.match(plsqlParser.ALL)


                pass
            elif token in [plsqlParser.AUTOMATIC, plsqlParser.ITERATE, plsqlParser.SEQUENTIAL, plsqlParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 6408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL:
                self.state = 6406
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6407
                self.match(plsqlParser.ORDER)


            self.state = 6411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ITERATE:
                self.state = 6410
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(plsqlParser.Cell_assignmentContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_element" ):
                return visitor.visitModel_rules_element(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_element(self):

        localctx = plsqlParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
            if la_ == 1:
                self.state = 6413
                self.match(plsqlParser.UPDATE)

            elif la_ == 2:
                self.state = 6414
                self.match(plsqlParser.UPSERT)
                self.state = 6416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,925,self._ctx)
                if la_ == 1:
                    self.state = 6415
                    self.match(plsqlParser.ALL)




            self.state = 6420
            self.cell_assignment()
            self.state = 6422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 6421
                self.order_by_clause()


            self.state = 6424
            self.match(plsqlParser.EQUALS_OP)
            self.state = 6425
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(plsqlParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_assignment" ):
                return visitor.visitCell_assignment(self)
            else:
                return visitor.visitChildren(self)




    def cell_assignment(self):

        localctx = plsqlParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6427
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def until_part(self):
            return self.getTypedRuleContext(plsqlParser.Until_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_iterate_clause" ):
                return visitor.visitModel_iterate_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_iterate_clause(self):

        localctx = plsqlParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6429
            self.match(plsqlParser.ITERATE)
            self.state = 6430
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6431
            self.expression(0)
            self.state = 6432
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.UNTIL:
                self.state = 6433
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_part" ):
                return visitor.visitUntil_part(self)
            else:
                return visitor.visitChildren(self)




    def until_part(self):

        localctx = plsqlParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6436
            self.match(plsqlParser.UNTIL)
            self.state = 6437
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6438
            self.condition()
            self.state = 6439
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = plsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6441
            self.match(plsqlParser.ORDER)
            self.state = 6443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SIBLINGS:
                self.state = 6442
                self.match(plsqlParser.SIBLINGS)


            self.state = 6445
            self.match(plsqlParser.BY)
            self.state = 6446
            self.order_by_elements()
            self.state = 6451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,930,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6447
                    self.match(plsqlParser.COMMA)
                    self.state = 6448
                    self.order_by_elements() 
                self.state = 6453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,930,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token
            self.nulls = None # Token

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(plsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(plsqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_elements" ):
                return visitor.visitOrder_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def order_by_elements(self):

        localctx = plsqlParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6454
            self.expression(0)
            self.state = 6456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
            if la_ == 1:
                self.state = 6455
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
            if la_ == 1:
                self.state = 6458
                self.match(plsqlParser.NULLS)
                self.state = 6459
                localctx.nulls = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                    localctx.nulls = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(plsqlParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(plsqlParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_clause" ):
                return visitor.visitFor_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_update_clause(self):

        localctx = plsqlParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_for_update_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6462
            self.match(plsqlParser.FOR)
            self.state = 6463
            self.match(plsqlParser.UPDATE)
            self.state = 6465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                self.state = 6464
                self.for_update_of_part()


            self.state = 6468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
            if la_ == 1:
                self.state = 6467
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_of_part" ):
                return visitor.visitFor_update_of_part(self)
            else:
                return visitor.visitChildren(self)




    def for_update_of_part(self):

        localctx = plsqlParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6470
            self.match(plsqlParser.OF)
            self.state = 6471
            self.column_name()
            self.state = 6476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,935,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6472
                    self.match(plsqlParser.COMMA)
                    self.state = 6473
                    self.column_name() 
                self.state = 6478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,935,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_options" ):
                return visitor.visitFor_update_options(self)
            else:
                return visitor.visitChildren(self)




    def for_update_options(self):

        localctx = plsqlParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_for_update_options)
        try:
            self.state = 6484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6479
                self.match(plsqlParser.SKIP_)
                self.state = 6480
                self.match(plsqlParser.LOCKED)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6481
                self.match(plsqlParser.NOWAIT)
                pass
            elif token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6482
                self.match(plsqlParser.WAIT)
                self.state = 6483
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_clause" ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = plsqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6486
            self.match(plsqlParser.LIMIT)
            self.state = 6487
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(plsqlParser.Update_set_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(plsqlParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = plsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6489
            self.match(plsqlParser.UPDATE)
            self.state = 6490
            self.general_table_ref()
            self.state = 6491
            self.update_set_clause()
            self.state = 6493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FROM:
                self.state = 6492
                self.from_clause()


            self.state = 6496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6495
                self.where_clause()


            self.state = 6499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 6498
                self.static_returning_clause()


            self.state = 6502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6501
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_set_clause" ):
                return visitor.visitUpdate_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def update_set_clause(self):

        localctx = plsqlParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6504
            self.match(plsqlParser.SET)
            self.state = 6520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
            if la_ == 1:
                self.state = 6505
                self.column_based_update_set_clause()
                self.state = 6510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6506
                    self.match(plsqlParser.COMMA)
                    self.state = 6507
                    self.column_based_update_set_clause()
                    self.state = 6512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6513
                self.match(plsqlParser.VALUE)
                self.state = 6514
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6515
                self.r_id()
                self.state = 6516
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 6517
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6518
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_based_update_set_clause" ):
                return visitor.visitColumn_based_update_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def column_based_update_set_clause(self):

        localctx = plsqlParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_column_based_update_set_clause)
        try:
            self.state = 6530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6522
                self.column_name()
                self.state = 6523
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6524
                self.expression(0)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6526
                self.paren_column_list()
                self.state = 6527
                self.match(plsqlParser.EQUALS_OP)
                self.state = 6528
                self.subquery(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = plsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6532
            self.match(plsqlParser.DELETE)
            self.state = 6534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FROM:
                self.state = 6533
                self.match(plsqlParser.FROM)


            self.state = 6536
            self.general_table_ref()
            self.state = 6538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6537
                self.where_clause()


            self.state = 6541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 6540
                self.static_returning_clause()


            self.state = 6544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6543
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = plsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6546
            self.match(plsqlParser.INSERT)
            self.state = 6549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 6547
                self.single_table_insert()
                pass
            elif token in [plsqlParser.ALL, plsqlParser.FIRST, plsqlParser.WHEN]:
                self.state = 6548
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_table_insert" ):
                return visitor.visitSingle_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def single_table_insert(self):

        localctx = plsqlParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_single_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6551
            self.insert_into_clause()
            self.state = 6557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VALUES]:
                self.state = 6552
                self.values_clause()
                self.state = 6554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 6553
                    self.static_returning_clause()


                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 6556
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6559
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_insert" ):
                return visitor.visitMulti_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_insert(self):

        localctx = plsqlParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
            if la_ == 1:
                self.state = 6562
                self.match(plsqlParser.ALL)
                self.state = 6564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6563
                    self.multi_table_element()
                    self.state = 6566 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 6568
                self.conditional_insert_clause()
                pass


            self.state = 6571
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_element" ):
                return visitor.visitMulti_table_element(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_element(self):

        localctx = plsqlParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6573
            self.insert_into_clause()
            self.state = 6575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VALUES:
                self.state = 6574
                self.values_clause()


            self.state = 6578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6577
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_clause" ):
                return visitor.visitConditional_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_clause(self):

        localctx = plsqlParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL or _la==plsqlParser.FIRST:
                self.state = 6580
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6584 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6583
                self.conditional_insert_when_part()
                self.state = 6586 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 6589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 6588
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_when_part" ):
                return visitor.visitConditional_insert_when_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_when_part(self):

        localctx = plsqlParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6591
            self.match(plsqlParser.WHEN)
            self.state = 6592
            self.condition()
            self.state = 6593
            self.match(plsqlParser.THEN)
            self.state = 6595 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6594
                self.multi_table_element()
                self.state = 6597 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_else_part" ):
                return visitor.visitConditional_insert_else_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_else_part(self):

        localctx = plsqlParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6599
            self.match(plsqlParser.ELSE)
            self.state = 6601 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6600
                self.multi_table_element()
                self.state = 6603 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_into_clause" ):
                return visitor.visitInsert_into_clause(self)
            else:
                return visitor.visitChildren(self)




    def insert_into_clause(self):

        localctx = plsqlParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_insert_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6605
            self.match(plsqlParser.INTO)
            self.state = 6606
            self.general_table_ref()
            self.state = 6608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
            if la_ == 1:
                self.state = 6607
                self.paren_column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues_clause" ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)




    def values_clause(self):

        localctx = plsqlParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6610
            self.match(plsqlParser.VALUES)
            self.state = 6611
            self.expression_list()
            self.state = 6616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6612
                self.match(plsqlParser.COMMA)
                self.state = 6613
                self.expression_list()
                self.state = 6618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(plsqlParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = plsqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6619
            self.match(plsqlParser.MERGE)
            self.state = 6620
            self.match(plsqlParser.INTO)
            self.state = 6621
            self.tableview_name()
            self.state = 6623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6622
                self.table_alias()


            self.state = 6625
            self.match(plsqlParser.USING)
            self.state = 6626
            self.selected_tableview()
            self.state = 6627
            self.match(plsqlParser.ON)
            self.state = 6628
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6629
            self.condition()
            self.state = 6630
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
            if la_ == 1:
                self.state = 6631
                self.merge_update_clause()
                self.state = 6633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 6632
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 6635
                self.merge_insert_clause()
                self.state = 6637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 6636
                    self.merge_update_clause()




            self.state = 6642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 6641
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Merge_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_clause" ):
                return visitor.visitMerge_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_clause(self):

        localctx = plsqlParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6644
            self.match(plsqlParser.WHEN)
            self.state = 6645
            self.match(plsqlParser.MATCHED)
            self.state = 6646
            self.match(plsqlParser.THEN)
            self.state = 6647
            self.match(plsqlParser.UPDATE)
            self.state = 6648
            self.match(plsqlParser.SET)
            self.state = 6649
            self.merge_element()
            self.state = 6654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6650
                self.match(plsqlParser.COMMA)
                self.state = 6651
                self.merge_element()
                self.state = 6656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6657
                self.where_clause()


            self.state = 6661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
            if la_ == 1:
                self.state = 6660
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_element" ):
                return visitor.visitMerge_element(self)
            else:
                return visitor.visitChildren(self)




    def merge_element(self):

        localctx = plsqlParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6663
            self.column_name()
            self.state = 6664
            self.match(plsqlParser.EQUALS_OP)
            self.state = 6665
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_delete_part" ):
                return visitor.visitMerge_update_delete_part(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_delete_part(self):

        localctx = plsqlParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6667
            self.match(plsqlParser.DELETE)
            self.state = 6668
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Paren_column_listContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_insert_clause" ):
                return visitor.visitMerge_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_insert_clause(self):

        localctx = plsqlParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6670
            self.match(plsqlParser.WHEN)
            self.state = 6671
            self.match(plsqlParser.NOT)
            self.state = 6672
            self.match(plsqlParser.MATCHED)
            self.state = 6673
            self.match(plsqlParser.THEN)
            self.state = 6674
            self.match(plsqlParser.INSERT)
            self.state = 6676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 6675
                self.paren_column_list()


            self.state = 6678
            self.match(plsqlParser.VALUES)
            self.state = 6679
            self.expression_list()
            self.state = 6681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 6680
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_tableview" ):
                return visitor.visitSelected_tableview(self)
            else:
                return visitor.visitChildren(self)




    def selected_tableview(self):

        localctx = plsqlParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 6683
                self.tableview_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 6684
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6685
                self.select_statement()
                self.state = 6686
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 6690
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(plsqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(plsqlParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(plsqlParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_statement" ):
                return visitor.visitLock_table_statement(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_statement(self):

        localctx = plsqlParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6693
            self.match(plsqlParser.LOCK)
            self.state = 6694
            self.match(plsqlParser.TABLE)
            self.state = 6695
            self.lock_table_element()
            self.state = 6700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6696
                self.match(plsqlParser.COMMA)
                self.state = 6697
                self.lock_table_element()
                self.state = 6702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6703
            self.match(plsqlParser.IN)
            self.state = 6704
            self.lock_mode()
            self.state = 6705
            self.match(plsqlParser.MODE)
            self.state = 6707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 6706
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_nowait_part" ):
                return visitor.visitWait_nowait_part(self)
            else:
                return visitor.visitChildren(self)




    def wait_nowait_part(self):

        localctx = plsqlParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_wait_nowait_part)
        try:
            self.state = 6712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6709
                self.match(plsqlParser.WAIT)
                self.state = 6710
                self.expression(0)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6711
                self.match(plsqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_element" ):
                return visitor.visitLock_table_element(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_element(self):

        localctx = plsqlParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6714
            self.tableview_name()
            self.state = 6716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION:
                self.state = 6715
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def SHARE(self):
            return self.getToken(plsqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(plsqlParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_mode" ):
                return visitor.visitLock_mode(self)
            else:
                return visitor.visitChildren(self)




    def lock_mode(self):

        localctx = plsqlParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 6730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6718
                self.match(plsqlParser.ROW)
                self.state = 6719
                self.match(plsqlParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6720
                self.match(plsqlParser.ROW)
                self.state = 6721
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6722
                self.match(plsqlParser.SHARE)
                self.state = 6724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UPDATE:
                    self.state = 6723
                    self.match(plsqlParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6726
                self.match(plsqlParser.SHARE)
                self.state = 6727
                self.match(plsqlParser.ROW)
                self.state = 6728
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6729
                self.match(plsqlParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_table_ref" ):
                return visitor.visitGeneral_table_ref(self)
            else:
                return visitor.visitChildren(self)




    def general_table_ref(self):

        localctx = plsqlParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
            if la_ == 1:
                self.state = 6732
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 6733
                self.match(plsqlParser.ONLY)
                self.state = 6734
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6735
                self.dml_table_expression_clause()
                self.state = 6736
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 6741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
            if la_ == 1:
                self.state = 6740
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_returning_clause" ):
                return visitor.visitStatic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def static_returning_clause(self):

        localctx = plsqlParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6743
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6744
            self.expression(0)
            self.state = 6749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6745
                self.match(plsqlParser.COMMA)
                self.state = 6746
                self.expression(0)
                self.state = 6751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6752
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_clause" ):
                return visitor.visitError_logging_clause(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_clause(self):

        localctx = plsqlParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_error_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6754
            self.match(plsqlParser.LOG)
            self.state = 6755
            self.match(plsqlParser.ERRORS)
            self.state = 6757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,984,self._ctx)
            if la_ == 1:
                self.state = 6756
                self.error_logging_into_part()


            self.state = 6760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
            if la_ == 1:
                self.state = 6759
                self.expression(0)


            self.state = 6763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REJECT:
                self.state = 6762
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_into_part" ):
                return visitor.visitError_logging_into_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_into_part(self):

        localctx = plsqlParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6765
            self.match(plsqlParser.INTO)
            self.state = 6766
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_reject_part" ):
                return visitor.visitError_logging_reject_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_reject_part(self):

        localctx = plsqlParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6768
            self.match(plsqlParser.REJECT)
            self.state = 6769
            self.match(plsqlParser.LIMIT)
            self.state = 6772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
            if la_ == 1:
                self.state = 6770
                self.match(plsqlParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 6771
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(plsqlParser.Table_collection_expressionContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(plsqlParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_table_expression_clause" ):
                return visitor.visitDml_table_expression_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_table_expression_clause(self):

        localctx = plsqlParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 6786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE, plsqlParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6774
                self.table_collection_expression()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6775
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6776
                self.select_statement()
                self.state = 6778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WITH:
                    self.state = 6777
                    self.subquery_restriction_clause()


                self.state = 6780
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6782
                self.tableview_name()
                self.state = 6784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,989,self._ctx)
                if la_ == 1:
                    self.state = 6783
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def THE(self):
            return self.getToken(plsqlParser.THE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_collection_expression" ):
                return visitor.visitTable_collection_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_collection_expression(self):

        localctx = plsqlParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6788
            _la = self._input.LA(1)
            if not(_la==plsqlParser.TABLE or _la==plsqlParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
            if la_ == 1:
                self.state = 6789
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6790
                self.subquery(0)
                self.state = 6791
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6793
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6794
                self.expression(0)
                self.state = 6795
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 6799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 6796
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 6797
                    self.match(plsqlParser.PLUS_SIGN)
                    self.state = 6798
                    self.match(plsqlParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(plsqlParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_restriction_clause" ):
                return visitor.visitSubquery_restriction_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_restriction_clause(self):

        localctx = plsqlParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6803
            self.match(plsqlParser.WITH)
            self.state = 6812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 6804
                self.match(plsqlParser.READ)
                self.state = 6805
                self.match(plsqlParser.ONLY)
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 6806
                self.match(plsqlParser.CHECK)
                self.state = 6807
                self.match(plsqlParser.OPTION)
                self.state = 6810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 6808
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 6809
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def seed_part(self):
            return self.getTypedRuleContext(plsqlParser.Seed_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_clause" ):
                return visitor.visitSample_clause(self)
            else:
                return visitor.visitChildren(self)




    def sample_clause(self):

        localctx = plsqlParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6814
            self.match(plsqlParser.SAMPLE)
            self.state = 6816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BLOCK:
                self.state = 6815
                self.match(plsqlParser.BLOCK)


            self.state = 6818
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6819
            self.expression(0)
            self.state = 6822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 6820
                self.match(plsqlParser.COMMA)
                self.state = 6821
                self.expression(0)


            self.state = 6824
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 6826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.state = 6825
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeed_part" ):
                return visitor.visitSeed_part(self)
            else:
                return visitor.visitChildren(self)




    def seed_part(self):

        localctx = plsqlParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6828
            self.match(plsqlParser.SEED)
            self.state = 6829
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6830
            self.expression(0)
            self.state = 6831
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_expression" ):
                return visitor.visitCursor_expression(self)
            else:
                return visitor.visitChildren(self)




    def cursor_expression(self):

        localctx = plsqlParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6833
            self.match(plsqlParser.CURSOR)
            self.state = 6834
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6835
            self.subquery(0)
            self.state = 6836
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = plsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6838
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DISTINCT - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXISTS - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FALSE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NOT - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIOR - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELECT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUE - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 586)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)) | (1 << (plsqlParser.LEFT_PAREN - 586)) | (1 << (plsqlParser.PLUS_SIGN - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (plsqlParser.MINUS_SIGN - 650)) | (1 << (plsqlParser.BINDVAR - 650)) | (1 << (plsqlParser.COLON - 650)) | (1 << (plsqlParser.REGULAR_ID - 650)))) != 0):
                self.state = 6839
                self.expression(0)


            self.state = 6846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 6842
                self.match(plsqlParser.COMMA)
                self.state = 6843
                self.expression(0)
                self.state = 6848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6849
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = plsqlParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6851
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreExpr" ):
                listener.enterIgnoreExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreExpr" ):
                listener.exitIgnoreExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreExpr" ):
                return visitor.visitIgnoreExpr(self)
            else:
                return visitor.visitChildren(self)


    class AndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)


    class LikeExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Like_typeContext
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def like_type(self):
            return self.getTypedRuleContext(plsqlParser.Like_typeContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeExpr" ):
                listener.enterLikeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeExpr" ):
                listener.exitLikeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeExpr" ):
                return visitor.visitLikeExpr(self)
            else:
                return visitor.visitChildren(self)


    class RelExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Relational_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def relational_operator(self):
            return self.getTypedRuleContext(plsqlParser.Relational_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelExpr" ):
                listener.enterRelExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelExpr" ):
                listener.exitRelExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelExpr" ):
                return visitor.visitRelExpr(self)
            else:
                return visitor.visitChildren(self)


    class MemberExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)
        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)
        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberExpr" ):
                listener.enterMemberExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberExpr" ):
                listener.exitMemberExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberExpr" ):
                return visitor.visitMemberExpr(self)
            else:
                return visitor.visitChildren(self)


    class BetweenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenExpr" ):
                listener.enterBetweenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenExpr" ):
                listener.exitBetweenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenExpr" ):
                return visitor.visitBetweenExpr(self)
            else:
                return visitor.visitChildren(self)


    class CursorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # Cursor_partContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)
        def cursor_part(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorExpr" ):
                listener.enterCursorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorExpr" ):
                listener.exitCursorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorExpr" ):
                return visitor.visitCursorExpr(self)
            else:
                return visitor.visitChildren(self)


    class IsExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Is_partContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)
        def is_part(self):
            return self.getTypedRuleContext(plsqlParser.Is_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpr" ):
                listener.enterIsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpr" ):
                listener.exitIsExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpr" ):
                return visitor.visitIsExpr(self)
            else:
                return visitor.visitChildren(self)


    class NotExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpr" ):
                listener.enterNotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpr" ):
                listener.exitNotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)


    class InExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpr" ):
                listener.enterInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpr" ):
                listener.exitInExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpr" ):
                return visitor.visitInExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)


    class OrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpr" ):
                return visitor.visitOrExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 836
        self.enterRecursionRule(localctx, 836, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.CursorExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6854
                localctx.op = self.match(plsqlParser.CURSOR)
                self.state = 6855
                localctx.expr = self.cursor_part()
                pass

            elif la_ == 2:
                localctx = plsqlParser.NotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6856
                localctx.op = self.match(plsqlParser.NOT)
                self.state = 6857
                localctx.expr = self.expression(5)
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6858
                self.binary_expression(0)
                pass

            elif la_ == 4:
                localctx = plsqlParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6859
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6860
                self.expression(0)
                self.state = 6861
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1008,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6915
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BetweenExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6865
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 6867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6866
                            self.match(plsqlParser.NOT)


                        self.state = 6869
                        localctx.op = self.match(plsqlParser.BETWEEN)
                        self.state = 6870
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 6871
                        self.match(plsqlParser.AND)
                        self.state = 6872
                        localctx._expression = self.expression(11)
                        localctx.right.append(localctx._expression)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.RelExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6874
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 6875
                        localctx.op = self.relational_operator()
                        self.state = 6876
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.AndExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6878
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6879
                        localctx.op = self.match(plsqlParser.AND)
                        self.state = 6880
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.OrExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6881
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6882
                        localctx.op = self.match(plsqlParser.OR)
                        self.state = 6883
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 5:
                        localctx = plsqlParser.IsExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6884
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 6885
                        localctx.op = self.match(plsqlParser.IS)
                        self.state = 6886
                        localctx.right = self.is_part()
                        pass

                    elif la_ == 6:
                        localctx = plsqlParser.InExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6887
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 6889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6888
                            self.match(plsqlParser.NOT)


                        self.state = 6891
                        localctx.op = self.match(plsqlParser.IN)
                        self.state = 6897
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1003,self._ctx)
                        if la_ == 1:
                            self.state = 6892
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 6893
                            self.subquery(0)
                            self.state = 6894
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass

                        elif la_ == 2:
                            self.state = 6896
                            self.expression_list()
                            pass


                        pass

                    elif la_ == 7:
                        localctx = plsqlParser.LikeExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6899
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 6901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 6900
                            self.match(plsqlParser.NOT)


                        self.state = 6903
                        localctx.op = self.like_type()
                        self.state = 6904
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 6907
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
                        if la_ == 1:
                            self.state = 6905
                            self.match(plsqlParser.ESCAPE)
                            self.state = 6906
                            localctx._expression = self.expression(0)
                            localctx.right.append(localctx._expression)


                        pass

                    elif la_ == 8:
                        localctx = plsqlParser.MemberExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 6909
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 6910
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.OF:
                            self.state = 6911
                            self.match(plsqlParser.OF)


                        self.state = 6914
                        localctx.right = self.binary_expression(0)
                        pass

             
                self.state = 6919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1008,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Is_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_is_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_part" ):
                listener.enterIs_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_part" ):
                listener.exitIs_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_part" ):
                return visitor.visitIs_part(self)
            else:
                return visitor.visitChildren(self)




    def is_part(self):

        localctx = plsqlParser.Is_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_is_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 6920
                self.match(plsqlParser.NOT)


            self.state = 6948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NULL]:
                self.state = 6923
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.NAN]:
                self.state = 6924
                self.match(plsqlParser.NAN)
                pass
            elif token in [plsqlParser.PRESENT]:
                self.state = 6925
                self.match(plsqlParser.PRESENT)
                pass
            elif token in [plsqlParser.INFINITE]:
                self.state = 6926
                self.match(plsqlParser.INFINITE)
                pass
            elif token in [plsqlParser.A_LETTER]:
                self.state = 6927
                self.match(plsqlParser.A_LETTER)
                self.state = 6928
                self.match(plsqlParser.SET)
                pass
            elif token in [plsqlParser.EMPTY]:
                self.state = 6929
                self.match(plsqlParser.EMPTY)
                pass
            elif token in [plsqlParser.OF]:
                self.state = 6930
                self.match(plsqlParser.OF)
                self.state = 6932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TYPE:
                    self.state = 6931
                    self.match(plsqlParser.TYPE)


                self.state = 6934
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
                if la_ == 1:
                    self.state = 6935
                    self.match(plsqlParser.ONLY)


                self.state = 6938
                self.type_spec()
                self.state = 6943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 6939
                    self.match(plsqlParser.COMMA)
                    self.state = 6940
                    self.type_spec()
                    self.state = 6945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6946
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_part" ):
                listener.enterCursor_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_part" ):
                listener.exitCursor_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_part" ):
                return visitor.visitCursor_part(self)
            else:
                return visitor.visitChildren(self)




    def cursor_part(self):

        localctx = plsqlParser.Cursor_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_cursor_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6950
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 6951
            self.subquery(0)
            self.state = 6952
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiset_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_multiset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_type" ):
                listener.enterMultiset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_type" ):
                listener.exitMultiset_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_type" ):
                return visitor.visitMultiset_type(self)
            else:
                return visitor.visitChildren(self)




    def multiset_type(self):

        localctx = plsqlParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6954
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def not_equal_op(self):
            return self.getTypedRuleContext(plsqlParser.Not_equal_opContext,0)


        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = plsqlParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_relational_operator)
        try:
            self.state = 6962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6956
                self.match(plsqlParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6957
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6958
                self.match(plsqlParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6959
                self.match(plsqlParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6960
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6961
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def ILIKE(self):
            return self.getToken(plsqlParser.ILIKE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_like_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_type" ):
                listener.enterLike_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_type" ):
                listener.exitLike_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_type" ):
                return visitor.visitLike_type(self)
            else:
                return visitor.visitChildren(self)




    def like_type(self):

        localctx = plsqlParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6964
            _la = self._input.LA(1)
            if not(((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (plsqlParser.ILIKE - 215)) | (1 << (plsqlParser.LIKE - 215)) | (1 << (plsqlParser.LIKE2 - 215)) | (1 << (plsqlParser.LIKE4 - 215)) | (1 << (plsqlParser.LIKEC - 215)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_escape_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_like_escape_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_escape_part" ):
                listener.enterLike_escape_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_escape_part" ):
                listener.exitLike_escape_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_escape_part" ):
                return visitor.visitLike_escape_part(self)
            else:
                return visitor.visitChildren(self)




    def like_escape_part(self):

        localctx = plsqlParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6966
            self.match(plsqlParser.ESCAPE)
            self.state = 6967
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_elements" ):
                return visitor.visitBetween_elements(self)
            else:
                return visitor.visitChildren(self)




    def between_elements(self):

        localctx = plsqlParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6969
            self.concatenation()
            self.state = 6970
            self.match(plsqlParser.AND)
            self.state = 6971
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)




    def concatenation(self):

        localctx = plsqlParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6973
            self.binary_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_binary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.left = None # Binary_expressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,i)

        def ASTERISK(self):
            return self.getToken(plsqlParser.ASTERISK, 0)
        def SOLIDUS(self):
            return self.getToken(plsqlParser.SOLIDUS, 0)
        def PERCENT(self):
            return self.getToken(plsqlParser.PERCENT, 0)
        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)
        def CONCATENATION_OP(self):
            return self.getToken(plsqlParser.CONCATENATION_OP, 0)
        def AT(self):
            return self.getToken(plsqlParser.AT, 0)
        def interval_expression(self):
            return self.getTypedRuleContext(plsqlParser.Interval_expressionContext,0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)
        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpr" ):
                listener.enterBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpr" ):
                listener.exitBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpr" ):
                return visitor.visitBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreBinaryExpr" ):
                listener.enterIgnoreBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreBinaryExpr" ):
                listener.exitIgnoreBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreBinaryExpr" ):
                return visitor.visitIgnoreBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenBinaryExpr" ):
                listener.enterParenBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenBinaryExpr" ):
                listener.exitParenBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenBinaryExpr" ):
                return visitor.visitParenBinaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def binary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Binary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 854
        self.enterRecursionRule(localctx, 854, self.RULE_binary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1015,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.ParenBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6976
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 6977
                self.binary_expression(0)
                self.state = 6978
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = plsqlParser.IgnoreBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6980
                self.unary_expression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1019,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6983
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 6984
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 643)) & ~0x3f) == 0 and ((1 << (_la - 643)) & ((1 << (plsqlParser.PERCENT - 643)) | (1 << (plsqlParser.ASTERISK - 643)) | (1 << (plsqlParser.SOLIDUS - 643)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6985
                        localctx.right = self.binary_expression(7)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6986
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 6987
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6988
                        localctx.right = self.binary_expression(6)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6989
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6990
                        localctx.op = self.match(plsqlParser.CONCATENATION_OP)
                        self.state = 6991
                        localctx.right = self.binary_expression(5)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6992
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6993
                        localctx.op = self.match(plsqlParser.T__1)
                        self.state = 6994
                        localctx.right = self.binary_expression(4)
                        pass

                    elif la_ == 5:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 6995
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 7004
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.AT]:
                            self.state = 6996
                            self.match(plsqlParser.AT)
                            self.state = 7001
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.LOCAL]:
                                self.state = 6997
                                self.match(plsqlParser.LOCAL)
                                pass
                            elif token in [plsqlParser.TIME]:
                                self.state = 6998
                                self.match(plsqlParser.TIME)
                                self.state = 6999
                                self.match(plsqlParser.ZONE)
                                self.state = 7000
                                self.binary_expression(0)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass
                        elif token in [plsqlParser.DAY, plsqlParser.YEAR]:
                            self.state = 7003
                            self.interval_expression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 7010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1019,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval_expression" ):
                return visitor.visitInterval_expression(self)
            else:
                return visitor.visitChildren(self)




    def interval_expression(self):

        localctx = plsqlParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 7035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7011
                self.match(plsqlParser.DAY)
                self.state = 7016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 7012
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7013
                    self.concatenation()
                    self.state = 7014
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 7018
                self.match(plsqlParser.TO)
                self.state = 7019
                self.match(plsqlParser.SECOND)
                self.state = 7024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
                if la_ == 1:
                    self.state = 7020
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7021
                    self.concatenation()
                    self.state = 7022
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7026
                self.match(plsqlParser.YEAR)
                self.state = 7031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 7027
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7028
                    self.concatenation()
                    self.state = 7029
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 7033
                self.match(plsqlParser.TO)
                self.state = 7034
                self.match(plsqlParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(plsqlParser.LEFT_BRACKET, 0)

        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(plsqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression" ):
                return visitor.visitModel_expression(self)
            else:
                return visitor.visitChildren(self)




    def model_expression(self):

        localctx = plsqlParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7037
            self.unary_expression(0)
            self.state = 7038
            self.match(plsqlParser.LEFT_BRACKET)
            self.state = 7039
            self.model_expression_element()
            self.state = 7040
            self.match(plsqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(plsqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression_element" ):
                return visitor.visitModel_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def model_expression_element(self):

        localctx = plsqlParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 7065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1028,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1024,self._ctx)
                if la_ == 1:
                    self.state = 7042
                    self.match(plsqlParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 7043
                    self.expression(0)
                    pass


                self.state = 7053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7046
                    self.match(plsqlParser.COMMA)
                    self.state = 7049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
                    if la_ == 1:
                        self.state = 7047
                        self.match(plsqlParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 7048
                        self.expression(0)
                        pass


                    self.state = 7055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7056
                self.single_column_for_loop()
                self.state = 7061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7057
                    self.match(plsqlParser.COMMA)
                    self.state = 7058
                    self.single_column_for_loop()
                    self.state = 7063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7064
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(plsqlParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(plsqlParser.For_like_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_column_for_loop" ):
                return visitor.visitSingle_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def single_column_for_loop(self):

        localctx = plsqlParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7067
            self.match(plsqlParser.FOR)
            self.state = 7068
            self.column_name()
            self.state = 7081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IN]:
                self.state = 7069
                self.match(plsqlParser.IN)
                self.state = 7070
                self.expression_list()
                pass
            elif token in [plsqlParser.FROM, plsqlParser.LIKE]:
                self.state = 7072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LIKE:
                    self.state = 7071
                    self.for_like_part()


                self.state = 7074
                self.match(plsqlParser.FROM)
                self.state = 7075
                localctx.ex1 = self.expression(0)
                self.state = 7076
                self.match(plsqlParser.TO)
                self.state = 7077
                localctx.ex2 = self.expression(0)
                self.state = 7078
                self.for_increment_decrement_type()
                self.state = 7079
                localctx.ex3 = self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_like_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_like_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_like_part" ):
                listener.enterFor_like_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_like_part" ):
                listener.exitFor_like_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_like_part" ):
                return visitor.visitFor_like_part(self)
            else:
                return visitor.visitChildren(self)




    def for_like_part(self):

        localctx = plsqlParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7083
            self.match(plsqlParser.LIKE)
            self.state = 7084
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_increment_decrement_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_increment_decrement_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_increment_decrement_type" ):
                listener.enterFor_increment_decrement_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_increment_decrement_type" ):
                listener.exitFor_increment_decrement_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_increment_decrement_type" ):
                return visitor.visitFor_increment_decrement_type(self)
            else:
                return visitor.visitChildren(self)




    def for_increment_decrement_type(self):

        localctx = plsqlParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7086
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DECREMENT or _la==plsqlParser.INCREMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_column_for_loop" ):
                return visitor.visitMulti_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def multi_column_for_loop(self):

        localctx = plsqlParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7088
            self.match(plsqlParser.FOR)
            self.state = 7089
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7090
            self.column_name()
            self.state = 7095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7091
                self.match(plsqlParser.COMMA)
                self.state = 7092
                self.column_name()
                self.state = 7097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7098
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 7099
            self.match(plsqlParser.IN)
            self.state = 7100
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1033,self._ctx)
            if la_ == 1:
                self.state = 7101
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 7102
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7103
                self.expression_list()
                self.state = 7108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7104
                    self.match(plsqlParser.COMMA)
                    self.state = 7105
                    self.expression_list()
                    self.state = 7110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7111
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 7115
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_unary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreUnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)

        def quantified_expression(self):
            return self.getTypedRuleContext(plsqlParser.Quantified_expressionContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreUnaryExpr" ):
                listener.enterIgnoreUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreUnaryExpr" ):
                listener.exitIgnoreUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreUnaryExpr" ):
                return visitor.visitIgnoreUnaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)

        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)
        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)
        def PRIOR(self):
            return self.getToken(plsqlParser.PRIOR, 0)
        def CONNECT_BY_ROOT(self):
            return self.getToken(plsqlParser.CONNECT_BY_ROOT, 0)
        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)
        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)
        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)

        def RIGHT_BRACKET(self):
            return self.getToken(plsqlParser.RIGHT_BRACKET, 0)
        def LEFT_BRACKET(self):
            return self.getToken(plsqlParser.LEFT_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpr" ):
                listener.enterUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpr" ):
                listener.exitUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def unary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Unary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 870
        self.enterRecursionRule(localctx, 870, self.RULE_unary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 7118
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7119
                self.unary_expression(10)
                pass

            elif la_ == 2:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7120
                localctx.op = self.match(plsqlParser.PRIOR)
                self.state = 7121
                self.unary_expression(9)
                pass

            elif la_ == 3:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7122
                localctx.op = self.match(plsqlParser.CONNECT_BY_ROOT)
                self.state = 7123
                self.unary_expression(8)
                pass

            elif la_ == 4:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7124
                localctx.op = self.match(plsqlParser.NEW)
                self.state = 7125
                self.unary_expression(7)
                pass

            elif la_ == 5:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7126
                localctx.op = self.match(plsqlParser.DISTINCT)
                self.state = 7127
                self.unary_expression(6)
                pass

            elif la_ == 6:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7128
                localctx.op = self.match(plsqlParser.ALL)
                self.state = 7129
                self.unary_expression(5)
                pass

            elif la_ == 7:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7130
                self.case_statement()
                pass

            elif la_ == 8:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7131
                self.quantified_expression()
                pass

            elif la_ == 9:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7132
                self.standard_function(0)
                pass

            elif la_ == 10:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7133
                self.atom()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7143
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1035,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.UnaryExprContext(self, plsqlParser.Unary_expressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unary_expression)
                    self.state = 7136
                    if not self.precpred(self._ctx, 11):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                    self.state = 7137
                    localctx.op = self.match(plsqlParser.LEFT_BRACKET)
                    self.state = 7138
                    self.model_expression_element()
                    self.state = 7139
                    self.match(plsqlParser.RIGHT_BRACKET) 
                self.state = 7145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1035,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_statement" ):
                return visitor.visitCase_statement(self)
            else:
                return visitor.visitChildren(self)




    def case_statement(self):

        localctx = plsqlParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_case_statement)
        try:
            self.state = 7148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1036,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7146
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7147
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_statement" ):
                return visitor.visitSimple_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_statement(self):

        localctx = plsqlParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7150
                self.label_name()


            self.state = 7153
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 7154
            self.atom()
            self.state = 7156 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7155
                self.simple_case_when_part()
                self.state = 7158 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 7161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 7160
                self.case_else_part()


            self.state = 7163
            self.match(plsqlParser.END)
            self.state = 7165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
            if la_ == 1:
                self.state = 7164
                self.match(plsqlParser.CASE)


            self.state = 7168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1041,self._ctx)
            if la_ == 1:
                self.state = 7167
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_when_part" ):
                return visitor.visitSimple_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_when_part(self):

        localctx = plsqlParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7170
            self.match(plsqlParser.WHEN)
            self.state = 7171
            localctx.whenExpr = self.expression(0)
            self.state = 7172
            self.match(plsqlParser.THEN)
            self.state = 7175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1042,self._ctx)
            if la_ == 1:
                self.state = 7173
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 7174
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_statement" ):
                return visitor.visitSearched_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_statement(self):

        localctx = plsqlParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7177
                self.label_name()


            self.state = 7180
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 7182 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7181
                self.searched_case_when_part()
                self.state = 7184 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 7187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 7186
                self.case_else_part()


            self.state = 7189
            self.match(plsqlParser.END)
            self.state = 7191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1046,self._ctx)
            if la_ == 1:
                self.state = 7190
                self.match(plsqlParser.CASE)


            self.state = 7194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1047,self._ctx)
            if la_ == 1:
                self.state = 7193
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_when_part" ):
                return visitor.visitSearched_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_when_part(self):

        localctx = plsqlParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7196
            self.match(plsqlParser.WHEN)
            self.state = 7197
            localctx.whenExpr = self.expression(0)
            self.state = 7198
            self.match(plsqlParser.THEN)
            self.state = 7201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
            if la_ == 1:
                self.state = 7199
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 7200
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_else_part" ):
                return visitor.visitCase_else_part(self)
            else:
                return visitor.visitChildren(self)




    def case_else_part(self):

        localctx = plsqlParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7203
            self.match(plsqlParser.ELSE)
            self.state = 7206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1049,self._ctx)
            if la_ == 1:
                self.state = 7204
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 7205
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(plsqlParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(plsqlParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(plsqlParser.ConstantContext,0)


        def literal(self):
            return self.getTypedRuleContext(plsqlParser.LiteralContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = plsqlParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_atom)
        try:
            self.state = 7226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7208
                self.table_element()
                self.state = 7209
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7211
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7212
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7213
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7214
                self.general_element()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7215
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7216
                self.atom()
                self.state = 7217
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                if la_ == 1:
                    self.state = 7219
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7220
                    self.subquery(0)
                    self.state = 7221
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 7223
                    self.expression_list()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_or_vectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(plsqlParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_expression_or_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_or_vector" ):
                listener.enterExpression_or_vector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_or_vector" ):
                listener.exitExpression_or_vector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_or_vector" ):
                return visitor.visitExpression_or_vector(self)
            else:
                return visitor.visitChildren(self)




    def expression_or_vector(self):

        localctx = plsqlParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7228
            self.expression(0)
            self.state = 7230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 7229
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_vector_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expr" ):
                listener.enterVector_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expr" ):
                listener.exitVector_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_expr" ):
                return visitor.visitVector_expr(self)
            else:
                return visitor.visitChildren(self)




    def vector_expr(self):

        localctx = plsqlParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7232
            self.match(plsqlParser.COMMA)
            self.state = 7233
            self.expression(0)
            self.state = 7238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7234
                self.match(plsqlParser.COMMA)
                self.state = 7235
                self.expression(0)
                self.state = 7240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(plsqlParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_expression" ):
                return visitor.visitQuantified_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_expression(self):

        localctx = plsqlParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7241
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.ANY or _la==plsqlParser.EXISTS or _la==plsqlParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
            if la_ == 1:
                self.state = 7242
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7243
                self.subquery(0)
                self.state = 7244
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 7246
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7247
                self.expression(0)
                self.state = 7248
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_standard_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AggregateCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateCall" ):
                listener.enterAggregateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateCall" ):
                listener.exitAggregateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateCall" ):
                return visitor.visitAggregateCall(self)
            else:
                return visitor.visitChildren(self)


    class TodoCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)

        def function_argument_modeling(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_modelingContext,0)

        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)
        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)
        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)
        def collect_order_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Collect_order_by_partContext,0)

        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)
        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)
        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)
        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)
        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)
        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,0)

        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Standard_prediction_function_keywordContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)
        def cost_matrix_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cost_matrix_clauseContext,0)

        def POSITION(self):
            return self.getToken(plsqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(plsqlParser.IN, 0)
        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)
        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)
        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)
        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)
        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTodoCall" ):
                listener.enterTodoCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTodoCall" ):
                listener.exitTodoCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTodoCall" ):
                return visitor.visitTodoCall(self)
            else:
                return visitor.visitChildren(self)


    class XmlCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)
        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)

        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)
        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)
        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)
        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)
        def xml_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_attributes_clauseContext,0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)
        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)
        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)
        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)
        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)
        def xml_passing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_passing_clauseContext,0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)
        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)
        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)
        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)
        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)
        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)
        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)
        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)
        def ON(self):
            return self.getToken(plsqlParser.ON, 0)
        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)
        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)
        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_version_partContext,0)

        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_standalone_partContext,0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_enconding_partContext,0)

        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_version_partContext,0)

        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_ident_partContext,0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)
        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)
        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)
        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)
        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_namespaces_clauseContext,0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)
        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_table_columnContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlCall" ):
                listener.enterXmlCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlCall" ):
                listener.exitXmlCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlCall" ):
                return visitor.visitXmlCall(self)
            else:
                return visitor.visitChildren(self)


    class CastCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)
        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)
        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)
        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastCall" ):
                listener.enterCastCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastCall" ):
                listener.exitCastCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastCall" ):
                return visitor.visitCastCall(self)
            else:
                return visitor.visitChildren(self)


    class ExtractCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)
        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)
        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)
        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractCall" ):
                listener.enterExtractCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractCall" ):
                listener.exitExtractCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractCall" ):
                return visitor.visitExtractCall(self)
            else:
                return visitor.visitChildren(self)


    class WithinOrOverCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.name = None # Within_or_over_clause_keywordContext
            self.copyFrom(ctx)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)

        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Within_or_over_clause_keywordContext,0)

        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Within_or_over_partContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithinOrOverCall" ):
                listener.enterWithinOrOverCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithinOrOverCall" ):
                listener.exitWithinOrOverCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithinOrOverCall" ):
                return visitor.visitWithinOrOverCall(self)
            else:
                return visitor.visitChildren(self)



    def standard_function(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Standard_functionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 892
        self.enterRecursionRule(localctx, 892, self.RULE_standard_function, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.AggregateCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 7253
                self.aggregate_windowed_function()
                pass

            elif la_ == 2:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7254
                self.regular_id()
                self.state = 7255
                self.function_argument_modeling()
                self.state = 7257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1055,self._ctx)
                if la_ == 1:
                    self.state = 7256
                    self.using_clause()


                pass

            elif la_ == 3:
                localctx = plsqlParser.CastCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7259
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CAST or _la==plsqlParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7260
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                if la_ == 1:
                    self.state = 7261
                    self.match(plsqlParser.MULTISET)
                    self.state = 7262
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 7263
                    self.subquery(0)
                    self.state = 7264
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 7266
                    self.concatenation()
                    pass

                elif la_ == 3:
                    self.state = 7267
                    self.expression(0)
                    pass


                self.state = 7270
                self.match(plsqlParser.AS)
                self.state = 7271
                self.type_spec()
                self.state = 7272
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = plsqlParser.CastCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                if la_ == 1:
                    self.state = 7274
                    self.subquery(0)
                    pass

                elif la_ == 2:
                    self.state = 7275
                    self.atom()
                    pass


                self.state = 7278
                self.match(plsqlParser.T__2)
                self.state = 7279
                self.type_spec()
                pass

            elif la_ == 5:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7281
                self.match(plsqlParser.CHR)
                self.state = 7282
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7283
                self.concatenation()
                self.state = 7284
                self.match(plsqlParser.USING)
                self.state = 7285
                self.match(plsqlParser.NCHAR_CS)
                self.state = 7286
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7288
                self.match(plsqlParser.COLLECT)
                self.state = 7289
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1058,self._ctx)
                if la_ == 1:
                    self.state = 7290
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7293
                self.concatenation()
                self.state = 7295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 7294
                    self.collect_order_by_part()


                self.state = 7297
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = plsqlParser.WithinOrOverCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7299
                localctx.name = self.within_or_over_clause_keyword()
                self.state = 7300
                self.function_argument()
                self.state = 7302 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 7301
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 7304 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1060,self._ctx)

                pass

            elif la_ == 8:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7306
                self.match(plsqlParser.DECOMPOSE)
                self.state = 7307
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7308
                self.concatenation()
                self.state = 7310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY:
                    self.state = 7309
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7312
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = plsqlParser.ExtractCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7314
                localctx.name = self.match(plsqlParser.EXTRACT)
                self.state = 7315
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
                if la_ == 1:
                    self.state = 7316
                    self.regular_id()
                    pass

                elif la_ == 2:
                    self.state = 7317
                    self.expression(0)
                    pass


                self.state = 7320
                self.match(plsqlParser.FROM)
                self.state = 7321
                self.concatenation()
                self.state = 7322
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7324
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST_VALUE or _la==plsqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7325
                self.function_argument_analytic()
                self.state = 7327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 7326
                    self.respect_or_ignore_nulls()


                self.state = 7329
                self.over_clause()
                pass

            elif la_ == 11:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7331
                self.standard_prediction_function_keyword()
                self.state = 7332
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7333
                self.expression(0)
                self.state = 7338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7334
                    self.match(plsqlParser.COMMA)
                    self.state = 7335
                    self.expression(0)
                    self.state = 7340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COST:
                    self.state = 7341
                    self.cost_matrix_clause()


                self.state = 7345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 7344
                    self.using_clause()


                self.state = 7347
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7349
                self.match(plsqlParser.POSITION)
                self.state = 7350
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7351
                self.expression(0)
                self.state = 7352
                self.match(plsqlParser.IN)
                self.state = 7353
                self.expression(0)
                self.state = 7354
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7356
                self.match(plsqlParser.TRANSLATE)
                self.state = 7357
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7358
                self.expression(0)
                self.state = 7361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 7359
                    self.match(plsqlParser.USING)
                    self.state = 7360
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CHAR_CS or _la==plsqlParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7363
                    self.match(plsqlParser.COMMA)
                    self.state = 7364
                    self.expression(0)
                    self.state = 7369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7370
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7372
                self.match(plsqlParser.TREAT)
                self.state = 7373
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7374
                self.expression(0)
                self.state = 7375
                self.match(plsqlParser.AS)
                self.state = 7377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
                if la_ == 1:
                    self.state = 7376
                    self.match(plsqlParser.REF)


                self.state = 7379
                self.type_spec()
                self.state = 7380
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7382
                self.match(plsqlParser.TRIM)
                self.state = 7383
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
                if la_ == 1:
                    self.state = 7385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING:
                        self.state = 7384
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING:
                        self.state = 7387
                        self.quoted_string()


                    self.state = 7390
                    self.match(plsqlParser.FROM)


                self.state = 7393
                self.concatenation()
                self.state = 7394
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7396
                self.match(plsqlParser.XMLAGG)
                self.state = 7397
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7398
                self.expression(0)
                self.state = 7400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 7399
                    self.order_by_clause()


                self.state = 7402
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
                if la_ == 1:
                    self.state = 7403
                    self.match(plsqlParser.PERIOD)
                    self.state = 7404
                    self.general_element()


                pass

            elif la_ == 17:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7407
                _la = self._input.LA(1)
                if not(_la==plsqlParser.XMLCOLATTVAL or _la==plsqlParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7408
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7409
                self.xml_multiuse_expression_element()
                self.state = 7414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7410
                    self.match(plsqlParser.COMMA)
                    self.state = 7411
                    self.xml_multiuse_expression_element()
                    self.state = 7416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7417
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
                if la_ == 1:
                    self.state = 7418
                    self.match(plsqlParser.PERIOD)
                    self.state = 7419
                    self.general_element()


                pass

            elif la_ == 18:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7422
                self.match(plsqlParser.XMLELEMENT)
                self.state = 7423
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
                if la_ == 1:
                    self.state = 7424
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
                if la_ == 1:
                    self.state = 7427
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.EVALNAME or _la==plsqlParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7430
                self.expression(0)
                self.state = 7433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1079,self._ctx)
                if la_ == 1:
                    self.state = 7431
                    self.match(plsqlParser.COMMA)
                    self.state = 7432
                    self.xml_attributes_clause()


                self.state = 7442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7435
                    self.match(plsqlParser.COMMA)
                    self.state = 7436
                    self.expression(0)
                    self.state = 7438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 7437
                        self.column_alias()


                    self.state = 7444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7445
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
                if la_ == 1:
                    self.state = 7446
                    self.match(plsqlParser.PERIOD)
                    self.state = 7447
                    self.general_element()


                pass

            elif la_ == 19:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7450
                self.match(plsqlParser.XMLEXISTS)
                self.state = 7451
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7452
                self.expression(0)
                self.state = 7454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7453
                    self.xml_passing_clause()


                self.state = 7456
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 20:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7458
                self.match(plsqlParser.XMLPARSE)
                self.state = 7459
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7460
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7461
                self.concatenation()
                self.state = 7463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WELLFORMED:
                    self.state = 7462
                    self.match(plsqlParser.WELLFORMED)


                self.state = 7465
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1085,self._ctx)
                if la_ == 1:
                    self.state = 7466
                    self.match(plsqlParser.PERIOD)
                    self.state = 7467
                    self.general_element()


                pass

            elif la_ == 21:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7470
                self.match(plsqlParser.XMLPI)
                self.state = 7471
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NAME]:
                    self.state = 7472
                    self.match(plsqlParser.NAME)
                    self.state = 7473
                    self.r_id()
                    pass
                elif token in [plsqlParser.EVALNAME]:
                    self.state = 7474
                    self.match(plsqlParser.EVALNAME)
                    self.state = 7475
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 7478
                    self.match(plsqlParser.COMMA)
                    self.state = 7479
                    self.concatenation()


                self.state = 7482
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1088,self._ctx)
                if la_ == 1:
                    self.state = 7483
                    self.match(plsqlParser.PERIOD)
                    self.state = 7484
                    self.general_element()


                pass

            elif la_ == 22:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7487
                self.match(plsqlParser.XMLQUERY)
                self.state = 7488
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7489
                self.concatenation()
                self.state = 7491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7490
                    self.xml_passing_clause()


                self.state = 7493
                self.match(plsqlParser.RETURNING)
                self.state = 7494
                self.match(plsqlParser.CONTENT)
                self.state = 7498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULL:
                    self.state = 7495
                    self.match(plsqlParser.NULL)
                    self.state = 7496
                    self.match(plsqlParser.ON)
                    self.state = 7497
                    self.match(plsqlParser.EMPTY)


                self.state = 7500
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1091,self._ctx)
                if la_ == 1:
                    self.state = 7501
                    self.match(plsqlParser.PERIOD)
                    self.state = 7502
                    self.general_element()


                pass

            elif la_ == 23:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7505
                self.match(plsqlParser.XMLROOT)
                self.state = 7506
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7507
                self.concatenation()
                self.state = 7510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
                if la_ == 1:
                    self.state = 7508
                    self.match(plsqlParser.COMMA)
                    self.state = 7509
                    self.xmlroot_param_version_part()


                self.state = 7514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 7512
                    self.match(plsqlParser.COMMA)
                    self.state = 7513
                    self.xmlroot_param_standalone_part()


                self.state = 7516
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
                if la_ == 1:
                    self.state = 7517
                    self.match(plsqlParser.PERIOD)
                    self.state = 7518
                    self.general_element()


                pass

            elif la_ == 24:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7521
                self.match(plsqlParser.XMLSERIALIZE)
                self.state = 7522
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7523
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7524
                self.concatenation()
                self.state = 7527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 7525
                    self.match(plsqlParser.AS)
                    self.state = 7526
                    self.type_spec()


                self.state = 7530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ENCODING:
                    self.state = 7529
                    self.xmlserialize_param_enconding_part()


                self.state = 7533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VERSION:
                    self.state = 7532
                    self.xmlserialize_param_version_part()


                self.state = 7536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDENT or _la==plsqlParser.NO:
                    self.state = 7535
                    self.xmlserialize_param_ident_part()


                self.state = 7540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.HIDE or _la==plsqlParser.SHOW:
                    self.state = 7538
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.HIDE or _la==plsqlParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7539
                    self.match(plsqlParser.DEFAULTS)


                self.state = 7542
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1100,self._ctx)
                if la_ == 1:
                    self.state = 7543
                    self.match(plsqlParser.PERIOD)
                    self.state = 7544
                    self.general_element()


                pass

            elif la_ == 25:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7547
                self.match(plsqlParser.XMLTABLE)
                self.state = 7548
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
                if la_ == 1:
                    self.state = 7549
                    self.xml_namespaces_clause()


                self.state = 7552
                self.concatenation()
                self.state = 7554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 7553
                    self.xml_passing_clause()


                self.state = 7561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COLUMNS:
                    self.state = 7556
                    self.match(plsqlParser.COLUMNS)
                    self.state = 7557
                    self.xml_table_column()

                    self.state = 7558
                    self.match(plsqlParser.COMMA)
                    self.state = 7559
                    self.xml_table_column()


                self.state = 7563
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
                if la_ == 1:
                    self.state = 7564
                    self.match(plsqlParser.PERIOD)
                    self.state = 7565
                    self.general_element()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.CastCallContext(self, plsqlParser.Standard_functionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_standard_function)
                    self.state = 7570
                    if not self.precpred(self._ctx, 22):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                    self.state = 7571
                    self.match(plsqlParser.T__2)
                    self.state = 7572
                    self.type_spec() 
                self.state = 7577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # StarContext
            self.pref = None # Token

        def over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = plsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 7596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7578
                self.over_clause_keyword()
                self.state = 7579
                self.function_argument_analytic()
                self.state = 7581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
                if la_ == 1:
                    self.state = 7580
                    self.over_clause()


                pass
            elif token in [plsqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7583
                self.match(plsqlParser.COUNT)
                self.state = 7584
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ASTERISK]:
                    self.state = 7585
                    localctx.args = self.star()
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNIQUE, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 7587
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1108,self._ctx)
                    if la_ == 1:
                        self.state = 7586
                        localctx.pref = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                            localctx.pref = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7589
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7592
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 7593
                    self.over_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_keyword" ):
                return visitor.visitOver_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def over_clause_keyword(self):

        localctx = plsqlParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7598
            _la = self._input.LA(1)
            if not(((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (plsqlParser.AVG - 618)) | (1 << (plsqlParser.CORR - 618)) | (1 << (plsqlParser.LAG - 618)) | (1 << (plsqlParser.LEAD - 618)) | (1 << (plsqlParser.MAX - 618)) | (1 << (plsqlParser.MEDIAN - 618)) | (1 << (plsqlParser.MIN - 618)) | (1 << (plsqlParser.NTILE - 618)) | (1 << (plsqlParser.RATIO_TO_REPORT - 618)) | (1 << (plsqlParser.ROW_NUMBER - 618)) | (1 << (plsqlParser.SUM - 618)) | (1 << (plsqlParser.VARIANCE - 618)) | (1 << (plsqlParser.REGR_ - 618)) | (1 << (plsqlParser.STDDEV - 618)) | (1 << (plsqlParser.VAR_ - 618)) | (1 << (plsqlParser.COVAR_ - 618)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_clause_keyword" ):
                return visitor.visitWithin_or_over_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_clause_keyword(self):

        localctx = plsqlParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7600
            _la = self._input.LA(1)
            if not(((((_la - 611)) & ~0x3f) == 0 and ((1 << (_la - 611)) & ((1 << (plsqlParser.CUME_DIST - 611)) | (1 << (plsqlParser.DENSE_RANK - 611)) | (1 << (plsqlParser.LISTAGG - 611)) | (1 << (plsqlParser.PERCENT_RANK - 611)) | (1 << (plsqlParser.PERCENTILE_CONT - 611)) | (1 << (plsqlParser.PERCENTILE_DISC - 611)) | (1 << (plsqlParser.RANK - 611)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_prediction_function_keyword" ):
                return visitor.visitStandard_prediction_function_keyword(self)
            else:
                return visitor.visitChildren(self)




    def standard_prediction_function_keyword(self):

        localctx = plsqlParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7602
            _la = self._input.LA(1)
            if not(((((_la - 605)) & ~0x3f) == 0 and ((1 << (_la - 605)) & ((1 << (plsqlParser.PREDICTION - 605)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 605)) | (1 << (plsqlParser.PREDICTION_COST - 605)) | (1 << (plsqlParser.PREDICTION_DETAILS - 605)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 605)) | (1 << (plsqlParser.PREDICTION_SET - 605)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = plsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7604
            self.match(plsqlParser.OVER)
            self.state = 7605
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 7606
                self.query_partition_clause()


            self.state = 7613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 7609
                self.order_by_clause()
                self.state = 7611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RANGE or _la==plsqlParser.ROWS:
                    self.state = 7610
                    self.windowing_clause()




            self.state = 7615
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_clause" ):
                return visitor.visitWindowing_clause(self)
            else:
                return visitor.visitChildren(self)




    def windowing_clause(self):

        localctx = plsqlParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7617
            self.windowing_type()
            self.state = 7624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BETWEEN]:
                self.state = 7618
                self.match(plsqlParser.BETWEEN)
                self.state = 7619
                self.windowing_elements()
                self.state = 7620
                self.match(plsqlParser.AND)
                self.state = 7621
                self.windowing_elements()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 7623
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_type" ):
                return visitor.visitWindowing_type(self)
            else:
                return visitor.visitChildren(self)




    def windowing_type(self):

        localctx = plsqlParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7626
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RANGE or _la==plsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_elements" ):
                return visitor.visitWindowing_elements(self)
            else:
                return visitor.visitChildren(self)




    def windowing_elements(self):

        localctx = plsqlParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 7635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7628
                self.match(plsqlParser.UNBOUNDED)
                self.state = 7629
                self.match(plsqlParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7630
                self.match(plsqlParser.CURRENT)
                self.state = 7631
                self.match(plsqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7632
                self.concatenation()
                self.state = 7633
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FOLLOWING or _la==plsqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Using_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_clause" ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = plsqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7637
            self.match(plsqlParser.USING)
            self.state = 7647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
            if la_ == 1:
                self.state = 7638
                self.star()
                pass

            elif la_ == 2:
                self.state = 7639
                self.using_element()
                self.state = 7644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7640
                        self.match(plsqlParser.COMMA)
                        self.state = 7641
                        self.using_element() 
                    self.state = 7646
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1117,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_element(self):
            return self.getTypedRuleContext(plsqlParser.Selected_elementContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_element" ):
                return visitor.visitUsing_element(self)
            else:
                return visitor.visitChildren(self)




    def using_element(self):

        localctx = plsqlParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1120,self._ctx)
            if la_ == 1:
                self.state = 7649
                self.match(plsqlParser.IN)
                self.state = 7651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
                if la_ == 1:
                    self.state = 7650
                    self.match(plsqlParser.OUT)



            elif la_ == 2:
                self.state = 7653
                self.match(plsqlParser.OUT)


            self.state = 7656
            self.selected_element()
            self.state = 7658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
            if la_ == 1:
                self.state = 7657
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollect_order_by_part" ):
                return visitor.visitCollect_order_by_part(self)
            else:
                return visitor.visitChildren(self)




    def collect_order_by_part(self):

        localctx = plsqlParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7660
            self.match(plsqlParser.ORDER)
            self.state = 7661
            self.match(plsqlParser.BY)
            self.state = 7662
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_part" ):
                return visitor.visitWithin_or_over_part(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_part(self):

        localctx = plsqlParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_within_or_over_part)
        try:
            self.state = 7671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7664
                self.match(plsqlParser.WITHIN)
                self.state = 7665
                self.match(plsqlParser.GROUP)
                self.state = 7666
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7667
                self.order_by_clause()
                self.state = 7668
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7670
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cost_class_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_matrix_clause" ):
                return visitor.visitCost_matrix_clause(self)
            else:
                return visitor.visitChildren(self)




    def cost_matrix_clause(self):

        localctx = plsqlParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7673
            self.match(plsqlParser.COST)
            self.state = 7691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MODEL]:
                self.state = 7674
                self.match(plsqlParser.MODEL)
                self.state = 7676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AUTO:
                    self.state = 7675
                    self.match(plsqlParser.AUTO)


                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 7678
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 7679
                self.cost_class_name()
                self.state = 7684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 7680
                    self.match(plsqlParser.COMMA)
                    self.state = 7681
                    self.cost_class_name()
                    self.state = 7686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7687
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 7688
                self.match(plsqlParser.VALUES)
                self.state = 7689
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_passing_clause" ):
                return visitor.visitXml_passing_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_passing_clause(self):

        localctx = plsqlParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7693
            self.match(plsqlParser.PASSING)
            self.state = 7696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BY:
                self.state = 7694
                self.match(plsqlParser.BY)
                self.state = 7695
                self.match(plsqlParser.VALUE)


            self.state = 7698
            self.expression(0)
            self.state = 7700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 7699
                self.column_alias()


            self.state = 7702
            self.match(plsqlParser.COMMA)
            self.state = 7703
            self.expression(0)
            self.state = 7705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1128,self._ctx)
            if la_ == 1:
                self.state = 7704
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_attributes_clause" ):
                return visitor.visitXml_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes_clause(self):

        localctx = plsqlParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7707
            self.match(plsqlParser.XMLATTRIBUTES)
            self.state = 7708
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1129,self._ctx)
            if la_ == 1:
                self.state = 7709
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1130,self._ctx)
            if la_ == 1:
                self.state = 7712
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOSCHEMACHECK or _la==plsqlParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7715
            self.xml_multiuse_expression_element()
            self.state = 7720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7716
                self.match(plsqlParser.COMMA)
                self.state = 7717
                self.xml_multiuse_expression_element()
                self.state = 7722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7723
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_namespaces_clause" ):
                return visitor.visitXml_namespaces_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_namespaces_clause(self):

        localctx = plsqlParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7725
            self.match(plsqlParser.XMLNAMESPACES)
            self.state = 7726
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 7730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
            if la_ == 1:
                self.state = 7727
                self.concatenation()
                self.state = 7728
                self.column_alias()


            self.state = 7738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 7732
                self.match(plsqlParser.COMMA)
                self.state = 7733
                self.concatenation()
                self.state = 7734
                self.column_alias()
                self.state = 7740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 7741
                self.xml_general_default_part()


            self.state = 7744
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(plsqlParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_table_column" ):
                return visitor.visitXml_table_column(self)
            else:
                return visitor.visitChildren(self)




    def xml_table_column(self):

        localctx = plsqlParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7746
            self.xml_column_name()
            self.state = 7757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.FOR]:
                self.state = 7747
                self.match(plsqlParser.FOR)
                self.state = 7748
                self.match(plsqlParser.ORDINALITY)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 7749
                self.type_spec()
                self.state = 7752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PATH:
                    self.state = 7750
                    self.match(plsqlParser.PATH)
                    self.state = 7751
                    self.concatenation()


                self.state = 7755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DEFAULT:
                    self.state = 7754
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_general_default_part" ):
                return visitor.visitXml_general_default_part(self)
            else:
                return visitor.visitChildren(self)




    def xml_general_default_part(self):

        localctx = plsqlParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7759
            self.match(plsqlParser.DEFAULT)
            self.state = 7760
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_multiuse_expression_element" ):
                return visitor.visitXml_multiuse_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def xml_multiuse_expression_element(self):

        localctx = plsqlParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7762
            self.expression(0)
            self.state = 7769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 7763
                self.match(plsqlParser.AS)
                self.state = 7767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1138,self._ctx)
                if la_ == 1:
                    self.state = 7764
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 7765
                    self.match(plsqlParser.EVALNAME)
                    self.state = 7766
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_version_part" ):
                return visitor.visitXmlroot_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_version_part(self):

        localctx = plsqlParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7771
            self.match(plsqlParser.VERSION)
            self.state = 7775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1140,self._ctx)
            if la_ == 1:
                self.state = 7772
                self.match(plsqlParser.NO)
                self.state = 7773
                self.match(plsqlParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 7774
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_standalone_part" ):
                return visitor.visitXmlroot_param_standalone_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_standalone_part(self):

        localctx = plsqlParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7777
            self.match(plsqlParser.STANDALONE)
            self.state = 7783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.YES]:
                self.state = 7778
                self.match(plsqlParser.YES)
                pass
            elif token in [plsqlParser.NO]:
                self.state = 7779
                self.match(plsqlParser.NO)
                self.state = 7781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VALUE:
                    self.state = 7780
                    self.match(plsqlParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_enconding_part" ):
                return visitor.visitXmlserialize_param_enconding_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_enconding_part(self):

        localctx = plsqlParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7785
            self.match(plsqlParser.ENCODING)
            self.state = 7786
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_version_part" ):
                return visitor.visitXmlserialize_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_version_part(self):

        localctx = plsqlParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7788
            self.match(plsqlParser.VERSION)
            self.state = 7789
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_ident_part" ):
                return visitor.visitXmlserialize_param_ident_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_ident_part(self):

        localctx = plsqlParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 7799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7791
                self.match(plsqlParser.NO)
                self.state = 7792
                self.match(plsqlParser.INDENT)
                pass
            elif token in [plsqlParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7793
                self.match(plsqlParser.INDENT)
                self.state = 7797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.SIZE:
                    self.state = 7794
                    self.match(plsqlParser.SIZE)
                    self.state = 7795
                    self.match(plsqlParser.EQUALS_OP)
                    self.state = 7796
                    self.concatenation()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(plsqlParser.SOLIDUS, 0)

        def whenever_command(self):
            return self.getTypedRuleContext(plsqlParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(plsqlParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(plsqlParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_commandContext,0)


        def show_errors_command(self):
            return self.getTypedRuleContext(plsqlParser.Show_errors_commandContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_plus_command" ):
                return visitor.visitSql_plus_command(self)
            else:
                return visitor.visitChildren(self)




    def sql_plus_command(self):

        localctx = plsqlParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_sql_plus_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SOLIDUS]:
                self.state = 7801
                self.match(plsqlParser.SOLIDUS)
                pass
            elif token in [plsqlParser.WHENEVER]:
                self.state = 7802
                self.whenever_command()
                pass
            elif token in [plsqlParser.EXIT]:
                self.state = 7803
                self.exit_command()
                pass
            elif token in [plsqlParser.PROMPT]:
                self.state = 7804
                self.prompt_command()
                pass
            elif token in [plsqlParser.SET]:
                self.state = 7805
                self.set_command()
                pass
            elif token in [plsqlParser.SHOW]:
                self.state = 7806
                self.show_errors_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever_command" ):
                return visitor.visitWhenever_command(self)
            else:
                return visitor.visitChildren(self)




    def whenever_command(self):

        localctx = plsqlParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7809
            self.match(plsqlParser.WHENEVER)
            self.state = 7810
            _la = self._input.LA(1)
            if not(_la==plsqlParser.OSERROR or _la==plsqlParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXIT]:
                self.state = 7811
                self.match(plsqlParser.EXIT)
                self.state = 7812
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FAILURE or _la==plsqlParser.SUCCESS or _la==plsqlParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7813
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.CONTINUE]:
                self.state = 7814
                self.match(plsqlParser.CONTINUE)
                self.state = 7815
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.NONE or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_command" ):
                return visitor.visitSet_command(self)
            else:
                return visitor.visitChildren(self)




    def set_command(self):

        localctx = plsqlParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7818
            self.match(plsqlParser.SET)
            self.state = 7819
            self.regular_id()
            self.state = 7825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1147,self._ctx)
            if la_ == 1:
                self.state = 7820
                self.match(plsqlParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 7821
                self.match(plsqlParser.ON)
                pass

            elif la_ == 3:
                self.state = 7822
                self.match(plsqlParser.OFF)
                pass

            elif la_ == 4:
                self.state = 7823
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 7824
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exit_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_command" ):
                listener.enterExit_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_command" ):
                listener.exitExit_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_command" ):
                return visitor.visitExit_command(self)
            else:
                return visitor.visitChildren(self)




    def exit_command(self):

        localctx = plsqlParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7827
            self.match(plsqlParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prompt_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(plsqlParser.PROMPT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_prompt_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_command" ):
                listener.enterPrompt_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_command" ):
                listener.exitPrompt_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_command" ):
                return visitor.visitPrompt_command(self)
            else:
                return visitor.visitChildren(self)




    def prompt_command(self):

        localctx = plsqlParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7829
            self.match(plsqlParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_errors_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_show_errors_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_errors_command" ):
                listener.enterShow_errors_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_errors_command" ):
                listener.exitShow_errors_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_errors_command" ):
                return visitor.visitShow_errors_command(self)
            else:
                return visitor.visitChildren(self)




    def show_errors_command(self):

        localctx = plsqlParser.Show_errors_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_show_errors_command)
        try:
            self.state = 7835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7831
                self.match(plsqlParser.SHOW)
                self.state = 7832
                self.match(plsqlParser.ERR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7833
                self.match(plsqlParser.SHOW)
                self.state = 7834
                self.match(plsqlParser.ERRORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_extension_clause" ):
                return visitor.visitPartition_extension_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_extension_clause(self):

        localctx = plsqlParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7837
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 7838
                self.match(plsqlParser.FOR)


            self.state = 7841
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = plsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 7851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 7843
                    self.match(plsqlParser.AS)


                self.state = 7848
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 7846
                    self.r_id()
                    pass
                elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 7847
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7850
                self.match(plsqlParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = plsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 7853
                self.match(plsqlParser.AS)


            self.state = 7858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 7856
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.state = 7857
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alias_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_quoted_string" ):
                listener.enterAlias_quoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_quoted_string" ):
                listener.exitAlias_quoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_quoted_string" ):
                return visitor.visitAlias_quoted_string(self)
            else:
                return visitor.visitChildren(self)




    def alias_quoted_string(self):

        localctx = plsqlParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7860
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(plsqlParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(plsqlParser.Current_of_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = plsqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7862
            self.match(plsqlParser.WHERE)
            self.state = 7865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CURRENT]:
                self.state = 7863
                self.current_of_clause()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NVL, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITION, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 7864
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_of_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_current_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_of_clause" ):
                listener.enterCurrent_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_of_clause" ):
                listener.exitCurrent_of_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrent_of_clause" ):
                return visitor.visitCurrent_of_clause(self)
            else:
                return visitor.visitChildren(self)




    def current_of_clause(self):

        localctx = plsqlParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7867
            self.match(plsqlParser.CURRENT)
            self.state = 7868
            self.match(plsqlParser.OF)
            self.state = 7869
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInto_clause" ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = plsqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_into_clause)
        try:
            self.state = 7891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7871
                self.match(plsqlParser.INTO)
                self.state = 7872
                self.variable_name()
                self.state = 7877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1156,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7873
                        self.match(plsqlParser.COMMA)
                        self.state = 7874
                        self.variable_name() 
                    self.state = 7879
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1156,self._ctx)

                pass
            elif token in [plsqlParser.BULK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7880
                self.match(plsqlParser.BULK)
                self.state = 7881
                self.match(plsqlParser.COLLECT)
                self.state = 7882
                self.match(plsqlParser.INTO)
                self.state = 7883
                self.variable_name()
                self.state = 7888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1157,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7884
                        self.match(plsqlParser.COMMA)
                        self.state = 7885
                        self.variable_name() 
                    self.state = 7890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1157,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_column_name" ):
                return visitor.visitXml_column_name(self)
            else:
                return visitor.visitChildren(self)




    def xml_column_name(self):

        localctx = plsqlParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_xml_column_name)
        try:
            self.state = 7895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7893
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7894
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_class_name" ):
                return visitor.visitCost_class_name(self)
            else:
                return visitor.visitChildren(self)




    def cost_class_name(self):

        localctx = plsqlParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7897
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = plsqlParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7899
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = plsqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7901
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_segment_name" ):
                return visitor.visitRollback_segment_name(self)
            else:
                return visitor.visitChildren(self)




    def rollback_segment_name(self):

        localctx = plsqlParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7903
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_name" ):
                return visitor.visitTable_var_name(self)
            else:
                return visitor.visitChildren(self)




    def table_var_name(self):

        localctx = plsqlParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7905
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = plsqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7907
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_name" ):
                return visitor.visitRoutine_name(self)
            else:
                return visitor.visitChildren(self)




    def routine_name(self):

        localctx = plsqlParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7909
            self.r_id()
            self.state = 7914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7910
                self.match(plsqlParser.PERIOD)
                self.state = 7911
                self.id_expression()
                self.state = 7916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 7917
                self.match(plsqlParser.AT_SIGN)
                self.state = 7918
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_name" ):
                return visitor.visitPackage_name(self)
            else:
                return visitor.visitChildren(self)




    def package_name(self):

        localctx = plsqlParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7921
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementation_type_name" ):
                return visitor.visitImplementation_type_name(self)
            else:
                return visitor.visitChildren(self)




    def implementation_type_name(self):

        localctx = plsqlParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7923
            self.r_id()
            self.state = 7926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7924
                self.match(plsqlParser.PERIOD)
                self.state = 7925
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = plsqlParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7928
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model_name" ):
                return visitor.visitReference_model_name(self)
            else:
                return visitor.visitChildren(self)




    def reference_model_name(self):

        localctx = plsqlParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7930
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model_name" ):
                return visitor.visitMain_model_name(self)
            else:
                return visitor.visitChildren(self)




    def main_model_name(self):

        localctx = plsqlParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7932
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_name" ):
                return visitor.visitAggregate_function_name(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_name(self):

        localctx = plsqlParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7934
            self.r_id()
            self.state = 7939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7935
                self.match(plsqlParser.PERIOD)
                self.state = 7936
                self.id_expression()
                self.state = 7941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = plsqlParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7942
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_name" ):
                return visitor.visitConstraint_name(self)
            else:
                return visitor.visitChildren(self)




    def constraint_name(self):

        localctx = plsqlParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7944
            self.r_id()
            self.state = 7949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7945
                self.match(plsqlParser.PERIOD)
                self.state = 7946
                self.id_expression()
                self.state = 7951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 7952
                self.match(plsqlParser.AT_SIGN)
                self.state = 7953
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = plsqlParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7956
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = plsqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7958
            self.id_expression()
            self.state = 7963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7959
                    self.match(plsqlParser.PERIOD)
                    self.state = 7960
                    self.id_expression() 
                self.state = 7965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_name" ):
                return visitor.visitSequence_name(self)
            else:
                return visitor.visitChildren(self)




    def sequence_name(self):

        localctx = plsqlParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7966
            self.id_expression()
            self.state = 7971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7967
                self.match(plsqlParser.PERIOD)
                self.state = 7968
                self.id_expression()
                self.state = 7973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_name" ):
                return visitor.visitException_name(self)
            else:
                return visitor.visitChildren(self)




    def exception_name(self):

        localctx = plsqlParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7974
            self.r_id()
            self.state = 7979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 7975
                self.match(plsqlParser.PERIOD)
                self.state = 7976
                self.id_expression()
                self.state = 7981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = plsqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7982
            self.r_id()
            self.state = 7985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7983
                self.match(plsqlParser.PERIOD)
                self.state = 7984
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_name" ):
                return visitor.visitProcedure_name(self)
            else:
                return visitor.visitChildren(self)




    def procedure_name(self):

        localctx = plsqlParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7987
            self.r_id()
            self.state = 7990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7988
                self.match(plsqlParser.PERIOD)
                self.state = 7989
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = plsqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7992
            self.r_id()
            self.state = 7995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 7993
                self.match(plsqlParser.PERIOD)
                self.state = 7994
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = plsqlParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_variable_name)
        try:
            self.state = 7999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7997
                self.dot_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7998
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = plsqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8001
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = plsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_cursor_name)
        try:
            self.state = 8005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8003
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8004
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_name" ):
                return visitor.visitRecord_name(self)
            else:
                return visitor.visitChildren(self)




    def record_name(self):

        localctx = plsqlParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_record_name)
        try:
            self.state = 8009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8007
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8008
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_name" ):
                return visitor.visitCollection_name(self)
            else:
                return visitor.visitChildren(self)




    def collection_name(self):

        localctx = plsqlParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8011
            self.r_id()
            self.state = 8014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 8012
                self.match(plsqlParser.PERIOD)
                self.state = 8013
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLink_name" ):
                return visitor.visitLink_name(self)
            else:
                return visitor.visitChildren(self)




    def link_name(self):

        localctx = plsqlParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8016
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = plsqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8018
            self.r_id()
            self.state = 8023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8019
                    self.match(plsqlParser.PERIOD)
                    self.state = 8020
                    self.id_expression() 
                self.state = 8025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRole_name" ):
                return visitor.visitRole_name(self)
            else:
                return visitor.visitChildren(self)




    def role_name(self):

        localctx = plsqlParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_role_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8026
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def AT_SIGN(self):
            return self.getToken(plsqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableview_name" ):
                return visitor.visitTableview_name(self)
            else:
                return visitor.visitChildren(self)




    def tableview_name(self):

        localctx = plsqlParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8028
            self.dot_id()
            self.state = 8032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1177,self._ctx)
            if la_ == 1:
                self.state = 8029
                self.match(plsqlParser.AT_SIGN)
                self.state = 8030
                self.link_name()

            elif la_ == 2:
                self.state = 8031
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_expression = None # Id_expressionContext
            self.fields = list() # of Id_expressionContexts

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_id" ):
                return visitor.visitDot_id(self)
            else:
                return visitor.visitChildren(self)




    def dot_id(self):

        localctx = plsqlParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_dot_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8034
            localctx._id_expression = self.id_expression()
            localctx.fields.append(localctx._id_expression)
            self.state = 8039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8035
                    self.match(plsqlParser.PERIOD)
                    self.state = 8036
                    localctx._id_expression = self.id_expression()
                    localctx.fields.append(localctx._id_expression) 
                self.state = 8041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(plsqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)




    def star(self):

        localctx = plsqlParser.StarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8042
            self.match(plsqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_clause" ):
                return visitor.visitKeep_clause(self)
            else:
                return visitor.visitChildren(self)




    def keep_clause(self):

        localctx = plsqlParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8044
            self.match(plsqlParser.KEEP)
            self.state = 8045
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8046
            self.match(plsqlParser.DENSE_RANK)
            self.state = 8047
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8048
            self.order_by_clause()
            self.state = 8049
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 8051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1179,self._ctx)
            if la_ == 1:
                self.state = 8050
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._argument = None # ArgumentContext
            self.argument_list = list() # of ArgumentContexts

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = plsqlParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8053
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DISTINCT - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXISTS - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FALSE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NOT - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIOR - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELECT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUE - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 586)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)) | (1 << (plsqlParser.LEFT_PAREN - 586)) | (1 << (plsqlParser.PLUS_SIGN - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (plsqlParser.MINUS_SIGN - 650)) | (1 << (plsqlParser.BINDVAR - 650)) | (1 << (plsqlParser.COLON - 650)) | (1 << (plsqlParser.REGULAR_ID - 650)))) != 0):
                self.state = 8054
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)


            self.state = 8061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 8057
                self.match(plsqlParser.COMMA)
                self.state = 8058
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)
                self.state = 8063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8064
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 8066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1182,self._ctx)
            if la_ == 1:
                self.state = 8065
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_analytic" ):
                return visitor.visitFunction_argument_analytic(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_analytic(self):

        localctx = plsqlParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8068
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONNECT_BY_ROOT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DISTINCT - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXISTS - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FALSE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NOT - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITION - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PRIOR - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELECT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUE - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 586)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)) | (1 << (plsqlParser.LEFT_PAREN - 586)) | (1 << (plsqlParser.PLUS_SIGN - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (plsqlParser.MINUS_SIGN - 650)) | (1 << (plsqlParser.BINDVAR - 650)) | (1 << (plsqlParser.COLON - 650)) | (1 << (plsqlParser.REGULAR_ID - 650)))) != 0):
                self.state = 8069
                self.argument()
                self.state = 8071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 8070
                    self.respect_or_ignore_nulls()




            self.state = 8082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 8075
                self.match(plsqlParser.COMMA)
                self.state = 8076
                self.argument()
                self.state = 8078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 8077
                    self.respect_or_ignore_nulls()


                self.state = 8084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8085
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 8087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1187,self._ctx)
            if la_ == 1:
                self.state = 8086
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(plsqlParser.PERIOD, 0)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COMMA)
            else:
                return self.getToken(plsqlParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULL)
            else:
                return self.getToken(plsqlParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_modeling" ):
                return visitor.visitFunction_argument_modeling(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_modeling(self):

        localctx = plsqlParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8089
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8090
            self.column_name()
            self.state = 8103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 8091
                self.match(plsqlParser.COMMA)
                self.state = 8094
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                    self.state = 8092
                    self.numeric()
                    pass
                elif token in [plsqlParser.NULL]:
                    self.state = 8093
                    self.match(plsqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 8096
                    self.match(plsqlParser.COMMA)
                    self.state = 8099
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 8097
                        self.numeric()
                        pass
                    elif token in [plsqlParser.NULL]:
                        self.state = 8098
                        self.match(plsqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 8105
            self.match(plsqlParser.USING)
            self.state = 8125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
            if la_ == 1:
                self.state = 8106
                self.tableview_name()
                self.state = 8107
                self.match(plsqlParser.PERIOD)
                self.state = 8108
                self.star()
                pass

            elif la_ == 2:
                self.state = 8110
                self.star()
                pass

            elif la_ == 3:
                self.state = 8111
                self.expression(0)
                self.state = 8113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 8112
                    self.column_alias()


                self.state = 8122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 8115
                    self.match(plsqlParser.COMMA)
                    self.state = 8116
                    self.expression(0)
                    self.state = 8118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 586)) | (1 << (plsqlParser.CHAR_STRING - 586)) | (1 << (plsqlParser.DELIMITED_ID - 586)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 8117
                        self.column_alias()


                    self.state = 8124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 8127
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 8129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1196,self._ctx)
            if la_ == 1:
                self.state = 8128
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRespect_or_ignore_nulls" ):
                return visitor.visitRespect_or_ignore_nulls(self)
            else:
                return visitor.visitChildren(self)




    def respect_or_ignore_nulls(self):

        localctx = plsqlParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8131
            _la = self._input.LA(1)
            if not(_la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8132
            self.match(plsqlParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = plsqlParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1197,self._ctx)
            if la_ == 1:
                self.state = 8134
                self.r_id()
                self.state = 8135
                self.match(plsqlParser.EQUALS_OP)
                self.state = 8136
                self.match(plsqlParser.GREATER_THAN_OP)


            self.state = 8140
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = plsqlParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 8150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8142
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1198,self._ctx)
                if la_ == 1:
                    self.state = 8143
                    self.match(plsqlParser.REF)


                self.state = 8146
                self.type_name()
                self.state = 8148
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1199,self._ctx)
                if la_ == 1:
                    self.state = 8147
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(plsqlParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(plsqlParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = plsqlParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 8180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BOOLEAN, plsqlParser.CHAR, plsqlParser.CHARACTER, plsqlParser.CLOB, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.FLOAT, plsqlParser.HOUR, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.LONG, plsqlParser.MINUTE, plsqlParser.MLSLABEL, plsqlParser.MONTH, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NCHAR, plsqlParser.NCLOB, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.RAW, plsqlParser.REAL, plsqlParser.ROWID, plsqlParser.SECOND, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SMALLINT, plsqlParser.STRING, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.UROWID, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.YEAR, plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8152
                self.native_datatype_element()
                self.state = 8154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1201,self._ctx)
                if la_ == 1:
                    self.state = 8153
                    self.precision_part()


                self.state = 8162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1203,self._ctx)
                if la_ == 1:
                    self.state = 8156
                    self.match(plsqlParser.WITH)
                    self.state = 8158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LOCAL:
                        self.state = 8157
                        self.match(plsqlParser.LOCAL)


                    self.state = 8160
                    self.match(plsqlParser.TIME)
                    self.state = 8161
                    self.match(plsqlParser.ZONE)


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8164
                self.match(plsqlParser.INTERVAL)
                self.state = 8165
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 8166
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 8167
                    self.expression(0)
                    self.state = 8168
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 8172
                self.match(plsqlParser.TO)
                self.state = 8173
                _la = self._input.LA(1)
                if not(_la==plsqlParser.MONTH or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1205,self._ctx)
                if la_ == 1:
                    self.state = 8174
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 8175
                    self.expression(0)
                    self.state = 8176
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_part" ):
                return visitor.visitPrecision_part(self)
            else:
                return visitor.visitChildren(self)




    def precision_part(self):

        localctx = plsqlParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8182
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8183
            self.numeric()
            self.state = 8186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 8184
                self.match(plsqlParser.COMMA)
                self.state = 8185
                self.numeric()


            self.state = 8189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BYTE or _la==plsqlParser.CHAR:
                self.state = 8188
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BYTE or _la==plsqlParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8191
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNative_datatype_element" ):
                return visitor.visitNative_datatype_element(self)
            else:
                return visitor.visitChildren(self)




    def native_datatype_element(self):

        localctx = plsqlParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_native_datatype_element)
        try:
            self.state = 8253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8193
                self.match(plsqlParser.BINARY_INTEGER)
                pass
            elif token in [plsqlParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8194
                self.match(plsqlParser.PLS_INTEGER)
                pass
            elif token in [plsqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8195
                self.match(plsqlParser.NATURAL)
                pass
            elif token in [plsqlParser.BINARY_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8196
                self.match(plsqlParser.BINARY_FLOAT)
                pass
            elif token in [plsqlParser.BINARY_DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8197
                self.match(plsqlParser.BINARY_DOUBLE)
                pass
            elif token in [plsqlParser.NATURALN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8198
                self.match(plsqlParser.NATURALN)
                pass
            elif token in [plsqlParser.POSITIVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8199
                self.match(plsqlParser.POSITIVE)
                pass
            elif token in [plsqlParser.POSITIVEN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8200
                self.match(plsqlParser.POSITIVEN)
                pass
            elif token in [plsqlParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8201
                self.match(plsqlParser.SIGNTYPE)
                pass
            elif token in [plsqlParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8202
                self.match(plsqlParser.SIMPLE_INTEGER)
                pass
            elif token in [plsqlParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8203
                self.match(plsqlParser.NVARCHAR2)
                pass
            elif token in [plsqlParser.DEC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8204
                self.match(plsqlParser.DEC)
                pass
            elif token in [plsqlParser.INTEGER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8205
                self.match(plsqlParser.INTEGER)
                pass
            elif token in [plsqlParser.INT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 8206
                self.match(plsqlParser.INT)
                pass
            elif token in [plsqlParser.NUMERIC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 8207
                self.match(plsqlParser.NUMERIC)
                pass
            elif token in [plsqlParser.SMALLINT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 8208
                self.match(plsqlParser.SMALLINT)
                pass
            elif token in [plsqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 8209
                self.match(plsqlParser.NUMBER)
                pass
            elif token in [plsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 8210
                self.match(plsqlParser.DECIMAL)
                pass
            elif token in [plsqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 8211
                self.match(plsqlParser.DOUBLE)
                self.state = 8213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1209,self._ctx)
                if la_ == 1:
                    self.state = 8212
                    self.match(plsqlParser.PRECISION)


                pass
            elif token in [plsqlParser.FLOAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 8215
                self.match(plsqlParser.FLOAT)
                pass
            elif token in [plsqlParser.REAL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 8216
                self.match(plsqlParser.REAL)
                pass
            elif token in [plsqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 22)
                self.state = 8217
                self.match(plsqlParser.NCHAR)
                pass
            elif token in [plsqlParser.LONG]:
                self.enterOuterAlt(localctx, 23)
                self.state = 8218
                self.match(plsqlParser.LONG)
                self.state = 8220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1210,self._ctx)
                if la_ == 1:
                    self.state = 8219
                    self.match(plsqlParser.RAW)


                pass
            elif token in [plsqlParser.CHAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 8222
                self.match(plsqlParser.CHAR)
                pass
            elif token in [plsqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 8223
                self.match(plsqlParser.CHARACTER)
                pass
            elif token in [plsqlParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 26)
                self.state = 8224
                self.match(plsqlParser.VARCHAR2)
                pass
            elif token in [plsqlParser.VARCHAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 8225
                self.match(plsqlParser.VARCHAR)
                pass
            elif token in [plsqlParser.STRING]:
                self.enterOuterAlt(localctx, 28)
                self.state = 8226
                self.match(plsqlParser.STRING)
                pass
            elif token in [plsqlParser.RAW]:
                self.enterOuterAlt(localctx, 29)
                self.state = 8227
                self.match(plsqlParser.RAW)
                pass
            elif token in [plsqlParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 8228
                self.match(plsqlParser.BOOLEAN)
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 8229
                self.match(plsqlParser.DATE)
                pass
            elif token in [plsqlParser.ROWID]:
                self.enterOuterAlt(localctx, 32)
                self.state = 8230
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.UROWID]:
                self.enterOuterAlt(localctx, 33)
                self.state = 8231
                self.match(plsqlParser.UROWID)
                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 8232
                self.match(plsqlParser.YEAR)
                pass
            elif token in [plsqlParser.MONTH]:
                self.enterOuterAlt(localctx, 35)
                self.state = 8233
                self.match(plsqlParser.MONTH)
                pass
            elif token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 36)
                self.state = 8234
                self.match(plsqlParser.DAY)
                pass
            elif token in [plsqlParser.HOUR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 8235
                self.match(plsqlParser.HOUR)
                pass
            elif token in [plsqlParser.MINUTE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 8236
                self.match(plsqlParser.MINUTE)
                pass
            elif token in [plsqlParser.SECOND]:
                self.enterOuterAlt(localctx, 39)
                self.state = 8237
                self.match(plsqlParser.SECOND)
                pass
            elif token in [plsqlParser.TIMEZONE_HOUR]:
                self.enterOuterAlt(localctx, 40)
                self.state = 8238
                self.match(plsqlParser.TIMEZONE_HOUR)
                pass
            elif token in [plsqlParser.TIMEZONE_MINUTE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 8239
                self.match(plsqlParser.TIMEZONE_MINUTE)
                pass
            elif token in [plsqlParser.TIMEZONE_REGION]:
                self.enterOuterAlt(localctx, 42)
                self.state = 8240
                self.match(plsqlParser.TIMEZONE_REGION)
                pass
            elif token in [plsqlParser.TIMEZONE_ABBR]:
                self.enterOuterAlt(localctx, 43)
                self.state = 8241
                self.match(plsqlParser.TIMEZONE_ABBR)
                pass
            elif token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 8242
                self.match(plsqlParser.TIMESTAMP)
                pass
            elif token in [plsqlParser.TIMESTAMP_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 45)
                self.state = 8243
                self.match(plsqlParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 46)
                self.state = 8244
                self.match(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 8245
                self.match(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 48)
                self.state = 8246
                self.match(plsqlParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.DSINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 8247
                self.match(plsqlParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.BFILE]:
                self.enterOuterAlt(localctx, 50)
                self.state = 8248
                self.match(plsqlParser.BFILE)
                pass
            elif token in [plsqlParser.BLOB]:
                self.enterOuterAlt(localctx, 51)
                self.state = 8249
                self.match(plsqlParser.BLOB)
                pass
            elif token in [plsqlParser.CLOB]:
                self.enterOuterAlt(localctx, 52)
                self.state = 8250
                self.match(plsqlParser.CLOB)
                pass
            elif token in [plsqlParser.NCLOB]:
                self.enterOuterAlt(localctx, 53)
                self.state = 8251
                self.match(plsqlParser.NCLOB)
                pass
            elif token in [plsqlParser.MLSLABEL]:
                self.enterOuterAlt(localctx, 54)
                self.state = 8252
                self.match(plsqlParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BINDVAR)
            else:
                return self.getToken(plsqlParser.BINDVAR, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.COLON)
            else:
                return self.getToken(plsqlParser.COLON, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PERIOD)
            else:
                return self.getToken(plsqlParser.PERIOD, i)

        def general_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.General_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.General_elementContext,i)


        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_variable" ):
                return visitor.visitBind_variable(self)
            else:
                return visitor.visitChildren(self)




    def bind_variable(self):

        localctx = plsqlParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINDVAR]:
                self.state = 8255
                self.match(plsqlParser.BINDVAR)
                pass
            elif token in [plsqlParser.COLON]:
                self.state = 8256
                self.match(plsqlParser.COLON)
                self.state = 8257
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1215,self._ctx)
            if la_ == 1:
                self.state = 8261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDICATOR:
                    self.state = 8260
                    self.match(plsqlParser.INDICATOR)


                self.state = 8266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.BINDVAR]:
                    self.state = 8263
                    self.match(plsqlParser.BINDVAR)
                    pass
                elif token in [plsqlParser.COLON]:
                    self.state = 8264
                    self.match(plsqlParser.COLON)
                    self.state = 8265
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 8274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8270
                    self.match(plsqlParser.PERIOD)
                    self.state = 8271
                    self.general_element() 
                self.state = 8276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_general_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FuncCallContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def general_element(self):

        localctx = plsqlParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_general_element)
        try:
            self.state = 8281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1217,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 8277
                self.dot_id()
                self.state = 8278
                self.function_argument()
                pass

            elif la_ == 2:
                localctx = plsqlParser.IdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 8280
                self.dot_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_element" ):
                return visitor.visitTable_element(self)
            else:
                return visitor.visitChildren(self)




    def table_element(self):

        localctx = plsqlParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_table_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8283
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DAY)
            else:
                return self.getToken(plsqlParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.HOUR)
            else:
                return self.getToken(plsqlParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MINUTE)
            else:
                return self.getToken(plsqlParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECOND)
            else:
                return self.getToken(plsqlParser.SECOND, i)

        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LEFT_PAREN)
            else:
                return self.getToken(plsqlParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.RIGHT_PAREN)
            else:
                return self.getToken(plsqlParser.RIGHT_PAREN, i)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def COMMA(self):
            return self.getToken(plsqlParser.COMMA, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(plsqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(plsqlParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = plsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 8347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8285
                self.match(plsqlParser.TIMESTAMP)
                self.state = 8288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 8286
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 8287
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1219,self._ctx)
                if la_ == 1:
                    self.state = 8290
                    self.match(plsqlParser.AT)
                    self.state = 8291
                    self.match(plsqlParser.TIME)
                    self.state = 8292
                    self.match(plsqlParser.ZONE)
                    self.state = 8293
                    self.quoted_string()


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8296
                self.match(plsqlParser.INTERVAL)
                self.state = 8300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 8297
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 8298
                    self.bind_variable()
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 8299
                    self.general_element()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8302
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.HOUR or _la==plsqlParser.MINUTE or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1224,self._ctx)
                if la_ == 1:
                    self.state = 8303
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 8306
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER]:
                        self.state = 8304
                        self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                        self.state = 8305
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 8308
                        self.match(plsqlParser.COMMA)
                        self.state = 8311
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.UNSIGNED_INTEGER]:
                            self.state = 8309
                            self.match(plsqlParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                            self.state = 8310
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 8315
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 8333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1228,self._ctx)
                if la_ == 1:
                    self.state = 8318
                    self.match(plsqlParser.TO)
                    self.state = 8331
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DAY]:
                        self.state = 8319
                        self.match(plsqlParser.DAY)
                        pass
                    elif token in [plsqlParser.HOUR]:
                        self.state = 8320
                        self.match(plsqlParser.HOUR)
                        pass
                    elif token in [plsqlParser.MINUTE]:
                        self.state = 8321
                        self.match(plsqlParser.MINUTE)
                        pass
                    elif token in [plsqlParser.SECOND]:
                        self.state = 8322
                        self.match(plsqlParser.SECOND)
                        self.state = 8329
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1226,self._ctx)
                        if la_ == 1:
                            self.state = 8323
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 8326
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.UNSIGNED_INTEGER]:
                                self.state = 8324
                                self.match(plsqlParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                                self.state = 8325
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 8328
                            self.match(plsqlParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8335
                self.numeric()
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8336
                self.match(plsqlParser.DATE)
                self.state = 8337
                self.quoted_string()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8338
                self.quoted_string()
                pass
            elif token in [plsqlParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8339
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8340
                self.match(plsqlParser.TRUE)
                pass
            elif token in [plsqlParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8341
                self.match(plsqlParser.FALSE)
                pass
            elif token in [plsqlParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8342
                self.match(plsqlParser.DBTIMEZONE)
                pass
            elif token in [plsqlParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8343
                self.match(plsqlParser.SESSIONTIMEZONE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8344
                self.match(plsqlParser.MINVALUE)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8345
                self.match(plsqlParser.MAXVALUE)
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8346
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric" ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = plsqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8349
            _la = self._input.LA(1)
            if not(_la==plsqlParser.UNSIGNED_INTEGER or _la==plsqlParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_negative" ):
                return visitor.visitNumeric_negative(self)
            else:
                return visitor.visitChildren(self)




    def numeric_negative(self):

        localctx = plsqlParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8351
            self.match(plsqlParser.MINUS_SIGN)
            self.state = 8352
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoted_string" ):
                return visitor.visitQuoted_string(self)
            else:
                return visitor.visitChildren(self)




    def quoted_string(self):

        localctx = plsqlParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8354
            _la = self._input.LA(1)
            if not(_la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = plsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_r_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8356
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(plsqlParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_expression" ):
                return visitor.visitId_expression(self)
            else:
                return visitor.visitChildren(self)




    def id_expression(self):

        localctx = plsqlParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_id_expression)
        try:
            self.state = 8360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BUILD, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COALESCE, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPLETE, plsqlParser.COMPOUND, plsqlParser.CONCAT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECODE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DEMAND, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.EDITIONING, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENFORCED, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FAST, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LIST, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MASTER, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEVER, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NVL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.MATERIALIZED, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PREBUILT, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PUBLIC, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REDUCED, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REFRESH, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.REWRITE, plsqlParser.RIGHT, plsqlParser.ROLE, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBSTRING, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TABLES, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TO_CHAR, plsqlParser.TO_DATE, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TRUSTED, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERBOSE, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.VIEW, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHOUT, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8358
                self.regular_id()
                pass
            elif token in [plsqlParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8359
                self.match(plsqlParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_equal_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(plsqlParser.NOT_EQUAL_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def EXCLAMATION_OPERATOR_PART(self):
            return self.getToken(plsqlParser.EXCLAMATION_OPERATOR_PART, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def CARRET_OPERATOR_PART(self):
            return self.getToken(plsqlParser.CARRET_OPERATOR_PART, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_not_equal_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal_op" ):
                listener.enterNot_equal_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal_op" ):
                listener.exitNot_equal_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal_op" ):
                return visitor.visitNot_equal_op(self)
            else:
                return visitor.visitChildren(self)




    def not_equal_op(self):

        localctx = plsqlParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_not_equal_op)
        try:
            self.state = 8369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOT_EQUAL_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8362
                self.match(plsqlParser.NOT_EQUAL_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8363
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 8364
                self.match(plsqlParser.GREATER_THAN_OP)
                pass
            elif token in [plsqlParser.EXCLAMATION_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8365
                self.match(plsqlParser.EXCLAMATION_OPERATOR_PART)
                self.state = 8366
                self.match(plsqlParser.EQUALS_OP)
                pass
            elif token in [plsqlParser.CARRET_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8367
                self.match(plsqlParser.CARRET_OPERATOR_PART)
                self.state = 8368
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Greater_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_OR_EQUALS_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OR_EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(plsqlParser.GREATER_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_greater_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_than_or_equals_op" ):
                listener.enterGreater_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_than_or_equals_op" ):
                listener.exitGreater_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_than_or_equals_op" ):
                return visitor.visitGreater_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def greater_than_or_equals_op(self):

        localctx = plsqlParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 8374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.GREATER_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8371
                self.match(plsqlParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.GREATER_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8372
                self.match(plsqlParser.GREATER_THAN_OP)
                self.state = 8373
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Less_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN_OR_EQUALS_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OR_EQUALS_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(plsqlParser.LESS_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(plsqlParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_less_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_than_or_equals_op" ):
                listener.enterLess_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_than_or_equals_op" ):
                listener.exitLess_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_than_or_equals_op" ):
                return visitor.visitLess_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def less_than_or_equals_op(self):

        localctx = plsqlParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_less_than_or_equals_op)
        try:
            self.state = 8379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LESS_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8376
                self.match(plsqlParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8377
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 8378
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATION_OP(self):
            return self.getToken(plsqlParser.CONCATENATION_OP, 0)

        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.VERTICAL_BAR)
            else:
                return self.getToken(plsqlParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_op" ):
                listener.enterConcatenation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_op" ):
                listener.exitConcatenation_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_op" ):
                return visitor.visitConcatenation_op(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_op(self):

        localctx = plsqlParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_concatenation_op)
        try:
            self.state = 8384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONCATENATION_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8381
                self.match(plsqlParser.CONCATENATION_OP)
                pass
            elif token in [plsqlParser.VERTICAL_BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8382
                self.match(plsqlParser.VERTICAL_BAR)
                self.state = 8383
                self.match(plsqlParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(plsqlParser.LEFT_PAREN, 0)

        def PLUS_SIGN(self):
            return self.getToken(plsqlParser.PLUS_SIGN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(plsqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_sign" ):
                return visitor.visitOuter_join_sign(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_sign(self):

        localctx = plsqlParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8386
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 8387
            self.match(plsqlParser.PLUS_SIGN)
            self.state = 8388
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def BUILD(self):
            return self.getToken(plsqlParser.BUILD, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def COALESCE(self):
            return self.getToken(plsqlParser.COALESCE, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def COMPLETE(self):
            return self.getToken(plsqlParser.COMPLETE, 0)

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def CONCAT(self):
            return self.getToken(plsqlParser.CONCAT, 0)

        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DECODE(self):
            return self.getToken(plsqlParser.DECODE, 0)

        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def DEMAND(self):
            return self.getToken(plsqlParser.DEMAND, 0)

        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def EDITIONING(self):
            return self.getToken(plsqlParser.EDITIONING, 0)

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def ENFORCED(self):
            return self.getToken(plsqlParser.ENFORCED, 0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def FAST(self):
            return self.getToken(plsqlParser.FAST, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def INOUT(self):
            return self.getToken(plsqlParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def LIST(self):
            return self.getToken(plsqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def LOOP(self):
            return self.getToken(plsqlParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def MASTER(self):
            return self.getToken(plsqlParser.MASTER, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def NEVER(self):
            return self.getToken(plsqlParser.NEVER, 0)

        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(plsqlParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def NVL(self):
            return self.getToken(plsqlParser.NVL, 0)

        def MATERIALIZED(self):
            return self.getToken(plsqlParser.MATERIALIZED, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def PREBUILT(self):
            return self.getToken(plsqlParser.PREBUILT, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def REDUCED(self):
            return self.getToken(plsqlParser.REDUCED, 0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def REFRESH(self):
            return self.getToken(plsqlParser.REFRESH, 0)

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def REWRITE(self):
            return self.getToken(plsqlParser.REWRITE, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def ROLE(self):
            return self.getToken(plsqlParser.ROLE, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(plsqlParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def SUBSTRING(self):
            return self.getToken(plsqlParser.SUBSTRING, 0)

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def TABLES(self):
            return self.getToken(plsqlParser.TABLES, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TO_CHAR(self):
            return self.getToken(plsqlParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(plsqlParser.TO_DATE, 0)

        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def TRUSTED(self):
            return self.getToken(plsqlParser.TRUSTED, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def VERBOSE(self):
            return self.getToken(plsqlParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def VIEW(self):
            return self.getToken(plsqlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(plsqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def PUBLIC(self):
            return self.getToken(plsqlParser.PUBLIC, 0)

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_id" ):
                return visitor.visitRegular_id(self)
            else:
                return visitor.visitChildren(self)




    def regular_id(self):

        localctx = plsqlParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8390
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BUILD) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CHR - 65)) | (1 << (plsqlParser.CLOB - 65)) | (1 << (plsqlParser.CLOSE - 65)) | (1 << (plsqlParser.CLUSTER - 65)) | (1 << (plsqlParser.COALESCE - 65)) | (1 << (plsqlParser.COLLECT - 65)) | (1 << (plsqlParser.COLUMNS - 65)) | (1 << (plsqlParser.COMMENT - 65)) | (1 << (plsqlParser.COMMIT - 65)) | (1 << (plsqlParser.COMMITTED - 65)) | (1 << (plsqlParser.COMPATIBILITY - 65)) | (1 << (plsqlParser.COMPILE - 65)) | (1 << (plsqlParser.COMPLETE - 65)) | (1 << (plsqlParser.COMPOUND - 65)) | (1 << (plsqlParser.CONCAT - 65)) | (1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECODE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.DEFAULTS - 129)) | (1 << (plsqlParser.DEFERRED - 129)) | (1 << (plsqlParser.DEFINER - 129)) | (1 << (plsqlParser.DEMAND - 129)) | (1 << (plsqlParser.DETERMINISTIC - 129)) | (1 << (plsqlParser.DIMENSION - 129)) | (1 << (plsqlParser.DISABLE - 129)) | (1 << (plsqlParser.DISASSOCIATE - 129)) | (1 << (plsqlParser.DOCUMENT - 129)) | (1 << (plsqlParser.DOUBLE - 129)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (plsqlParser.EACH - 129)) | (1 << (plsqlParser.EDITIONING - 129)) | (1 << (plsqlParser.ELEMENT - 129)) | (1 << (plsqlParser.EMPTY - 129)) | (1 << (plsqlParser.ENABLE - 129)) | (1 << (plsqlParser.ENCODING - 129)) | (1 << (plsqlParser.ENFORCED - 129)) | (1 << (plsqlParser.ENTITYESCAPING - 129)) | (1 << (plsqlParser.ERR - 129)) | (1 << (plsqlParser.ERRORS - 129)) | (1 << (plsqlParser.ESCAPE - 129)) | (1 << (plsqlParser.EVALNAME - 129)) | (1 << (plsqlParser.EXCEPTION - 129)) | (1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FAST - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (plsqlParser.FULL - 197)) | (1 << (plsqlParser.FUNCTION - 197)) | (1 << (plsqlParser.GROUPING - 197)) | (1 << (plsqlParser.HASH - 197)) | (1 << (plsqlParser.HIDE - 197)) | (1 << (plsqlParser.HOUR - 197)) | (1 << (plsqlParser.IGNORE - 197)) | (1 << (plsqlParser.IMMEDIATE - 197)) | (1 << (plsqlParser.INCLUDE - 197)) | (1 << (plsqlParser.INCLUDING - 197)) | (1 << (plsqlParser.INCREMENT - 197)) | (1 << (plsqlParser.INDENT - 197)) | (1 << (plsqlParser.INDEXED - 197)) | (1 << (plsqlParser.INDICATOR - 197)) | (1 << (plsqlParser.INDICES - 197)) | (1 << (plsqlParser.INFINITE - 197)) | (1 << (plsqlParser.INLINE - 197)) | (1 << (plsqlParser.INNER - 197)) | (1 << (plsqlParser.INOUT - 197)) | (1 << (plsqlParser.INSTANTIABLE - 197)) | (1 << (plsqlParser.INSTEAD - 197)) | (1 << (plsqlParser.INT - 197)) | (1 << (plsqlParser.INTEGER - 197)) | (1 << (plsqlParser.INTERVAL - 197)) | (1 << (plsqlParser.INVALIDATE - 197)) | (1 << (plsqlParser.ISOLATION - 197)) | (1 << (plsqlParser.ITERATE - 197)) | (1 << (plsqlParser.JAVA - 197)) | (1 << (plsqlParser.JOIN - 197)) | (1 << (plsqlParser.KEEP - 197)) | (1 << (plsqlParser.LANGUAGE - 197)) | (1 << (plsqlParser.LAST - 197)) | (1 << (plsqlParser.LAST_VALUE - 197)) | (1 << (plsqlParser.LEADING - 197)) | (1 << (plsqlParser.LEFT - 197)) | (1 << (plsqlParser.LEVEL - 197)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (plsqlParser.LIBRARY - 261)) | (1 << (plsqlParser.LIKE2 - 261)) | (1 << (plsqlParser.LIKE4 - 261)) | (1 << (plsqlParser.LIKEC - 261)) | (1 << (plsqlParser.LIMIT - 261)) | (1 << (plsqlParser.LIST - 261)) | (1 << (plsqlParser.LOCAL - 261)) | (1 << (plsqlParser.LOCKED - 261)) | (1 << (plsqlParser.LOG - 261)) | (1 << (plsqlParser.LOGOFF - 261)) | (1 << (plsqlParser.LOGON - 261)) | (1 << (plsqlParser.LONG - 261)) | (1 << (plsqlParser.LOOP - 261)) | (1 << (plsqlParser.MAIN - 261)) | (1 << (plsqlParser.MAP - 261)) | (1 << (plsqlParser.MASTER - 261)) | (1 << (plsqlParser.MATCHED - 261)) | (1 << (plsqlParser.MAXVALUE - 261)) | (1 << (plsqlParser.MEASURES - 261)) | (1 << (plsqlParser.MEMBER - 261)) | (1 << (plsqlParser.MERGE - 261)) | (1 << (plsqlParser.MINUTE - 261)) | (1 << (plsqlParser.MINVALUE - 261)) | (1 << (plsqlParser.MLSLABEL - 261)) | (1 << (plsqlParser.MODEL - 261)) | (1 << (plsqlParser.MODIFY - 261)) | (1 << (plsqlParser.MONTH - 261)) | (1 << (plsqlParser.MULTISET - 261)) | (1 << (plsqlParser.NAME - 261)) | (1 << (plsqlParser.NAN - 261)) | (1 << (plsqlParser.NATURAL - 261)) | (1 << (plsqlParser.NATURALN - 261)) | (1 << (plsqlParser.NAV - 261)) | (1 << (plsqlParser.NCHAR - 261)) | (1 << (plsqlParser.NCHAR_CS - 261)) | (1 << (plsqlParser.NCLOB - 261)) | (1 << (plsqlParser.NESTED - 261)) | (1 << (plsqlParser.NEVER - 261)) | (1 << (plsqlParser.NEW - 261)) | (1 << (plsqlParser.NO - 261)) | (1 << (plsqlParser.NOAUDIT - 261)) | (1 << (plsqlParser.NOCOPY - 261)) | (1 << (plsqlParser.NOCYCLE - 261)) | (1 << (plsqlParser.NOENTITYESCAPING - 261)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (plsqlParser.NONE - 329)) | (1 << (plsqlParser.NOSCHEMACHECK - 329)) | (1 << (plsqlParser.NVL - 329)) | (1 << (plsqlParser.NULLS - 329)) | (1 << (plsqlParser.NUMBER - 329)) | (1 << (plsqlParser.NUMERIC - 329)) | (1 << (plsqlParser.NVARCHAR2 - 329)) | (1 << (plsqlParser.MATERIALIZED - 329)) | (1 << (plsqlParser.OBJECT - 329)) | (1 << (plsqlParser.OFF - 329)) | (1 << (plsqlParser.OID - 329)) | (1 << (plsqlParser.OLD - 329)) | (1 << (plsqlParser.ONLY - 329)) | (1 << (plsqlParser.OPEN - 329)) | (1 << (plsqlParser.ORADATA - 329)) | (1 << (plsqlParser.ORDINALITY - 329)) | (1 << (plsqlParser.OSERROR - 329)) | (1 << (plsqlParser.OUT - 329)) | (1 << (plsqlParser.OUTER - 329)) | (1 << (plsqlParser.OVER - 329)) | (1 << (plsqlParser.OVERRIDING - 329)) | (1 << (plsqlParser.PACKAGE - 329)) | (1 << (plsqlParser.PARALLEL_ENABLE - 329)) | (1 << (plsqlParser.PARAMETERS - 329)) | (1 << (plsqlParser.PARENT - 329)) | (1 << (plsqlParser.PARTITION - 329)) | (1 << (plsqlParser.PASSING - 329)) | (1 << (plsqlParser.PATH - 329)) | (1 << (plsqlParser.PIPELINED - 329)) | (1 << (plsqlParser.PLAN - 329)) | (1 << (plsqlParser.PLS_INTEGER - 329)) | (1 << (plsqlParser.POSITIVE - 329)) | (1 << (plsqlParser.POSITIVEN - 329)) | (1 << (plsqlParser.PRAGMA - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (plsqlParser.PREBUILT - 393)) | (1 << (plsqlParser.PRECEDING - 393)) | (1 << (plsqlParser.PRECISION - 393)) | (1 << (plsqlParser.PRESENT - 393)) | (1 << (plsqlParser.PUBLIC - 393)) | (1 << (plsqlParser.RAISE - 393)) | (1 << (plsqlParser.RANGE - 393)) | (1 << (plsqlParser.RAW - 393)) | (1 << (plsqlParser.READ - 393)) | (1 << (plsqlParser.REAL - 393)) | (1 << (plsqlParser.RECORD - 393)) | (1 << (plsqlParser.REDUCED - 393)) | (1 << (plsqlParser.REF - 393)) | (1 << (plsqlParser.REFERENCE - 393)) | (1 << (plsqlParser.REFERENCING - 393)) | (1 << (plsqlParser.REFRESH - 393)) | (1 << (plsqlParser.REJECT - 393)) | (1 << (plsqlParser.RELIES_ON - 393)) | (1 << (plsqlParser.RENAME - 393)) | (1 << (plsqlParser.REPLACE - 393)) | (1 << (plsqlParser.RESPECT - 393)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 393)) | (1 << (plsqlParser.RESULT - 393)) | (1 << (plsqlParser.RESULT_CACHE - 393)) | (1 << (plsqlParser.RETURN - 393)) | (1 << (plsqlParser.RETURNING - 393)) | (1 << (plsqlParser.REUSE - 393)) | (1 << (plsqlParser.REVERSE - 393)) | (1 << (plsqlParser.REWRITE - 393)) | (1 << (plsqlParser.RIGHT - 393)) | (1 << (plsqlParser.ROLE - 393)) | (1 << (plsqlParser.ROLLBACK - 393)) | (1 << (plsqlParser.ROLLUP - 393)) | (1 << (plsqlParser.ROW - 393)) | (1 << (plsqlParser.ROWID - 393)) | (1 << (plsqlParser.ROWS - 393)) | (1 << (plsqlParser.RULES - 393)) | (1 << (plsqlParser.SAMPLE - 393)) | (1 << (plsqlParser.SAVE - 393)) | (1 << (plsqlParser.SAVEPOINT - 393)) | (1 << (plsqlParser.SCHEMA - 393)) | (1 << (plsqlParser.SCHEMACHECK - 393)) | (1 << (plsqlParser.SCN - 393)) | (1 << (plsqlParser.SECOND - 393)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (plsqlParser.SEED - 458)) | (1 << (plsqlParser.SEGMENT - 458)) | (1 << (plsqlParser.SELF - 458)) | (1 << (plsqlParser.SEQUENTIAL - 458)) | (1 << (plsqlParser.SERIALIZABLE - 458)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 458)) | (1 << (plsqlParser.SERVERERROR - 458)) | (1 << (plsqlParser.SESSIONTIMEZONE - 458)) | (1 << (plsqlParser.SET - 458)) | (1 << (plsqlParser.SETS - 458)) | (1 << (plsqlParser.SETTINGS - 458)) | (1 << (plsqlParser.SHOW - 458)) | (1 << (plsqlParser.SHUTDOWN - 458)) | (1 << (plsqlParser.SIBLINGS - 458)) | (1 << (plsqlParser.SIGNTYPE - 458)) | (1 << (plsqlParser.SIMPLE_INTEGER - 458)) | (1 << (plsqlParser.SINGLE - 458)) | (1 << (plsqlParser.SIZE - 458)) | (1 << (plsqlParser.SKIP_ - 458)) | (1 << (plsqlParser.SMALLINT - 458)) | (1 << (plsqlParser.SNAPSHOT - 458)) | (1 << (plsqlParser.SOME - 458)) | (1 << (plsqlParser.SPECIFICATION - 458)) | (1 << (plsqlParser.SQLDATA - 458)) | (1 << (plsqlParser.SQLERROR - 458)) | (1 << (plsqlParser.STANDALONE - 458)) | (1 << (plsqlParser.STARTUP - 458)) | (1 << (plsqlParser.STATEMENT - 458)) | (1 << (plsqlParser.STATEMENT_ID - 458)) | (1 << (plsqlParser.STATIC - 458)) | (1 << (plsqlParser.STATISTICS - 458)) | (1 << (plsqlParser.STRING - 458)) | (1 << (plsqlParser.SUBMULTISET - 458)) | (1 << (plsqlParser.SUBPARTITION - 458)) | (1 << (plsqlParser.SUBSTITUTABLE - 458)) | (1 << (plsqlParser.SUBSTRING - 458)) | (1 << (plsqlParser.SUBTYPE - 458)) | (1 << (plsqlParser.SUCCESS - 458)) | (1 << (plsqlParser.SUSPEND - 458)) | (1 << (plsqlParser.TABLES - 458)) | (1 << (plsqlParser.TIME - 458)) | (1 << (plsqlParser.TIMESTAMP - 458)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (plsqlParser.TIMEZONE_ABBR - 522)) | (1 << (plsqlParser.TIMEZONE_HOUR - 522)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 522)) | (1 << (plsqlParser.TIMEZONE_REGION - 522)) | (1 << (plsqlParser.TO_CHAR - 522)) | (1 << (plsqlParser.TO_DATE - 522)) | (1 << (plsqlParser.TRAILING - 522)) | (1 << (plsqlParser.TRANSACTION - 522)) | (1 << (plsqlParser.TRANSLATE - 522)) | (1 << (plsqlParser.TREAT - 522)) | (1 << (plsqlParser.TRIGGER - 522)) | (1 << (plsqlParser.TRIM - 522)) | (1 << (plsqlParser.TRUNCATE - 522)) | (1 << (plsqlParser.TRUSTED - 522)) | (1 << (plsqlParser.TYPE - 522)) | (1 << (plsqlParser.UNBOUNDED - 522)) | (1 << (plsqlParser.UNDER - 522)) | (1 << (plsqlParser.UNLIMITED - 522)) | (1 << (plsqlParser.UNTIL - 522)) | (1 << (plsqlParser.UPDATED - 522)) | (1 << (plsqlParser.UPSERT - 522)) | (1 << (plsqlParser.UROWID - 522)) | (1 << (plsqlParser.USE - 522)) | (1 << (plsqlParser.VALIDATE - 522)) | (1 << (plsqlParser.VALUE - 522)) | (1 << (plsqlParser.VARCHAR - 522)) | (1 << (plsqlParser.VARCHAR2 - 522)) | (1 << (plsqlParser.VARIABLE - 522)) | (1 << (plsqlParser.VARRAY - 522)) | (1 << (plsqlParser.VARYING - 522)) | (1 << (plsqlParser.VERBOSE - 522)) | (1 << (plsqlParser.VERSION - 522)) | (1 << (plsqlParser.VERSIONS - 522)) | (1 << (plsqlParser.VIEW - 522)) | (1 << (plsqlParser.WAIT - 522)) | (1 << (plsqlParser.WARNING - 522)) | (1 << (plsqlParser.WELLFORMED - 522)) | (1 << (plsqlParser.WHENEVER - 522)) | (1 << (plsqlParser.WHILE - 522)) | (1 << (plsqlParser.WITHOUT - 522)) | (1 << (plsqlParser.WITHIN - 522)) | (1 << (plsqlParser.WORK - 522)) | (1 << (plsqlParser.WRITE - 522)) | (1 << (plsqlParser.XML - 522)) | (1 << (plsqlParser.XMLAGG - 522)) | (1 << (plsqlParser.XMLATTRIBUTES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (plsqlParser.XMLCAST - 586)) | (1 << (plsqlParser.XMLCOLATTVAL - 586)) | (1 << (plsqlParser.XMLELEMENT - 586)) | (1 << (plsqlParser.XMLEXISTS - 586)) | (1 << (plsqlParser.XMLFOREST - 586)) | (1 << (plsqlParser.XMLNAMESPACES - 586)) | (1 << (plsqlParser.XMLPARSE - 586)) | (1 << (plsqlParser.XMLPI - 586)) | (1 << (plsqlParser.XMLQUERY - 586)) | (1 << (plsqlParser.XMLROOT - 586)) | (1 << (plsqlParser.XMLSERIALIZE - 586)) | (1 << (plsqlParser.XMLTABLE - 586)) | (1 << (plsqlParser.YEAR - 586)) | (1 << (plsqlParser.YES - 586)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 586)) | (1 << (plsqlParser.ZONE - 586)) | (1 << (plsqlParser.PREDICTION - 586)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 586)) | (1 << (plsqlParser.PREDICTION_COST - 586)) | (1 << (plsqlParser.PREDICTION_DETAILS - 586)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 586)) | (1 << (plsqlParser.PREDICTION_SET - 586)) | (1 << (plsqlParser.CUME_DIST - 586)) | (1 << (plsqlParser.DENSE_RANK - 586)) | (1 << (plsqlParser.LISTAGG - 586)) | (1 << (plsqlParser.PERCENT_RANK - 586)) | (1 << (plsqlParser.PERCENTILE_CONT - 586)) | (1 << (plsqlParser.PERCENTILE_DISC - 586)) | (1 << (plsqlParser.RANK - 586)) | (1 << (plsqlParser.AVG - 586)) | (1 << (plsqlParser.CORR - 586)) | (1 << (plsqlParser.LAG - 586)) | (1 << (plsqlParser.LEAD - 586)) | (1 << (plsqlParser.MAX - 586)) | (1 << (plsqlParser.MEDIAN - 586)) | (1 << (plsqlParser.MIN - 586)) | (1 << (plsqlParser.NTILE - 586)) | (1 << (plsqlParser.RATIO_TO_REPORT - 586)) | (1 << (plsqlParser.ROW_NUMBER - 586)) | (1 << (plsqlParser.SUM - 586)) | (1 << (plsqlParser.VARIANCE - 586)) | (1 << (plsqlParser.REGR_ - 586)) | (1 << (plsqlParser.STDDEV - 586)) | (1 << (plsqlParser.VAR_ - 586)) | (1 << (plsqlParser.COVAR_ - 586)))) != 0) or _la==plsqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[330] = self.subquery_sempred
        self._predicates[336] = self.table_ref_sempred
        self._predicates[418] = self.expression_sempred
        self._predicates[427] = self.binary_expression_sempred
        self._predicates[435] = self.unary_expression_sempred
        self._predicates[446] = self.standard_function_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def subquery_sempred(self, localctx:SubqueryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def table_ref_sempred(self, localctx:Table_refContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

    def binary_expression_sempred(self, localctx:Binary_expressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def unary_expression_sempred(self, localctx:Unary_expressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 11)
         

    def standard_function_sempred(self, localctx:Standard_functionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         




