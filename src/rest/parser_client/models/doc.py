# coding: utf-8

"""
    PL/SQL analysis

    PL/SQL query parser API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: cerm20@vse.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Doc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'str',
        'body': 'str',
        'exec_time': 'float',
        'timestamp': 'str'
    }

    attribute_map = {
        'index': 'index',
        'body': 'body',
        'exec_time': 'exec_time',
        'timestamp': 'timestamp'
    }

    def __init__(self, index=None, body=None, exec_time=None, timestamp=None):  # noqa: E501
        """Doc - a model defined in Swagger"""  # noqa: E501

        self._index = None
        self._body = None
        self._exec_time = None
        self._timestamp = None
        self.discriminator = None

        self.index = index
        self.body = body
        if exec_time is not None:
            self.exec_time = exec_time
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def index(self):
        """Gets the index of this Doc.  # noqa: E501


        :return: The index of this Doc.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Doc.


        :param index: The index of this Doc.  # noqa: E501
        :type: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def body(self):
        """Gets the body of this Doc.  # noqa: E501


        :return: The body of this Doc.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Doc.


        :param body: The body of this Doc.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def exec_time(self):
        """Gets the exec_time of this Doc.  # noqa: E501


        :return: The exec_time of this Doc.  # noqa: E501
        :rtype: float
        """
        return self._exec_time

    @exec_time.setter
    def exec_time(self, exec_time):
        """Sets the exec_time of this Doc.


        :param exec_time: The exec_time of this Doc.  # noqa: E501
        :type: float
        """

        self._exec_time = exec_time

    @property
    def timestamp(self):
        """Gets the timestamp of this Doc.  # noqa: E501


        :return: The timestamp of this Doc.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Doc.


        :param timestamp: The timestamp of this Doc.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Doc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Doc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
